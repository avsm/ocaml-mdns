<rfc number="6762" sha1="fcb13130ee945fea97631dfc875e677f63b9a76c" title="Multicast DNS">
<header>
<value name="Category">Standards Track</value>
<value name="ISSN">2070-1721</value>
<value name="Request for Comments">6762</value>
</header>

<sections>

<section name="Abstract">
<paragraph num="1">
<line end="417" id="L17" start="354">   As networked devices become smaller, more portable, and more</line>
<line end="476" id="L18" start="418">   ubiquitous, the ability to operate with less configured</line>
<line end="549" id="L19" start="477">   infrastructure is increasingly important.  In particular, the ability</line>
<line end="622" id="L20" start="550">   to look up DNS resource record data types (including, but not limited</line>
<line end="693" id="L21" start="623">   to, host names) in the absence of a conventional managed DNS server</line>
<line end="707" id="L22" start="694">   is useful.</line>
</paragraph>

<paragraph num="2">
<line end="773" id="L24" start="709">   Multicast DNS (mDNS) provides the ability to perform DNS-like</line>
<line end="840" id="L25" start="774">   operations on the local link in the absence of any conventional</line>
<line end="912" id="L26" start="841">   Unicast DNS server.  In addition, Multicast DNS designates a portion</line>
<line end="982" id="L27" start="913">   of the DNS namespace to be free for local use, without the need to</line>
<line end="1051" id="L28" start="983">   pay any annual fee, and without the need to set up delegations or</line>
<line end="1120" id="L29" start="1052">   otherwise configure a conventional DNS server to answer for those</line>
<line end="1130" id="L30" start="1121">   names.</line>
</paragraph>

<paragraph num="3">
<line end="1204" id="L32" start="1132">   The primary benefits of Multicast DNS names are that (i) they require</line>
<line end="1273" id="L33" start="1205">   little or no administration or configuration to set them up, (ii)</line>
<line end="1341" id="L34" start="1274">   they work when no infrastructure is present, and (iii) they work</line>
<line end="1376" id="L35" start="1342">   during infrastructure failures.</line>
</paragraph>

</section>

<section name="Status of This Memo">
<paragraph num="1">
<line end="1447" id="L39" start="1399">   This is an Internet Standards Track document.</line>
</paragraph>

<paragraph num="2">
<line end="1517" id="L41" start="1449">   This document is a product of the Internet Engineering Task Force</line>
<line end="1588" id="L42" start="1518">   (IETF).  It represents the consensus of the IETF community.  It has</line>
<line end="1659" id="L43" start="1589">   received public review and has been approved for publication by the</line>
<line end="1730" id="L44" start="1660">   Internet Engineering Steering Group (IESG).  Further information on</line>
<line end="1791" id="L45" start="1731">   Internet Standards is available in Section 2 of RFC 5741.</line>
</paragraph>

<paragraph num="3">
<line end="1862" id="L47" start="1793">   Information about the current status of this document, any errata,</line>
<line end="1918" id="L48" start="1863">   and how to provide feedback on it may be obtained at</line>
<line end="1961" id="L49" start="1919">   http://www.rfc-editor.org/info/rfc6762.</line>
</paragraph>

</section>

<section name="Copyright Notice">
<paragraph num="1">
<line end="2204" id="L65" start="2138">   Copyright (c) 2013 IETF Trust and the persons identified as the</line>
<line end="2247" id="L66" start="2205">   document authors.  All rights reserved.</line>
</paragraph>

<paragraph num="2">
<line end="2313" id="L68" start="2249">   This document is subject to BCP 78 and the IETF Trust's Legal</line>
<line end="2354" id="L69" start="2314">   Provisions Relating to IETF Documents</line>
<line end="2421" id="L70" start="2355">   (http://trustee.ietf.org/license-info) in effect on the date of</line>
<line end="2485" id="L71" start="2422">   publication of this document.  Please review these documents</line>
<line end="2558" id="L72" start="2486">   carefully, as they describe your rights and restrictions with respect</line>
<line end="2630" id="L73" start="2559">   to this document.  Code Components extracted from this document must</line>
<line end="2700" id="L74" start="2631">   include Simplified BSD License text as described in Section 4.e of</line>
<line end="2767" id="L75" start="2701">   the Trust Legal Provisions and are provided without warranty as</line>
<line end="2811" id="L76" start="2768">   described in the Simplified BSD License.</line>
</paragraph>

<paragraph num="3">
<line end="2878" id="L78" start="2813">   This document may contain material from IETF Documents or IETF</line>
<line end="2948" id="L79" start="2879">   Contributions published or made publicly available before November</line>
<line end="3018" id="L80" start="2949">   10, 2008.  The person(s) controlling the copyright in some of this</line>
<line end="3085" id="L81" start="3019">   material may not have granted the IETF Trust the right to allow</line>
<line end="3155" id="L82" start="3086">   modifications of such material outside the IETF Standards Process.</line>
<line end="3227" id="L83" start="3156">   Without obtaining an adequate license from the person(s) controlling</line>
<line end="3297" id="L84" start="3228">   the copyright in such materials, this document may not be modified</line>
<line end="3367" id="L85" start="3298">   outside the IETF Standards Process, and derivative works of it may</line>
<line end="3438" id="L86" start="3368">   not be created outside the IETF Standards Process, except to format</line>
<line end="3510" id="L87" start="3439">   it for publication as an RFC or to translate it into languages other</line>
<line end="3527" id="L88" start="3511">   than English.</line>
</paragraph>

</section>

<section name="Table of Contents">
<paragraph num="1">
<line end="3794" id="L121" start="3722">   1. Introduction ....................................................4</line>
<line end="3867" id="L122" start="3795">   2. Conventions and Terminology Used in This Document ...............4</line>
<line end="3940" id="L123" start="3868">   3. Multicast DNS Names .............................................5</line>
<line end="4013" id="L124" start="3941">   4. Reverse Address Mapping .........................................7</line>
<line end="4086" id="L125" start="4014">   5. Querying ........................................................8</line>
<line end="4159" id="L126" start="4087">   6. Responding .....................................................13</line>
<line end="4232" id="L127" start="4160">   7. Traffic Reduction ..............................................22</line>
<line end="4305" id="L128" start="4233">   8. Probing and Announcing on Startup ..............................25</line>
<line end="4378" id="L129" start="4306">   9. Conflict Resolution ............................................31</line>
<line end="4451" id="L130" start="4379">   10. Resource Record TTL Values and Cache Coherency ................33</line>
<line end="4524" id="L131" start="4452">   11. Source Address Check ..........................................38</line>
<line end="4597" id="L132" start="4525">   12. Special Characteristics of Multicast DNS Domains ..............40</line>
<line end="4670" id="L133" start="4598">   13. Enabling and Disabling Multicast DNS ..........................41</line>
<line end="4743" id="L134" start="4671">   14. Considerations for Multiple Interfaces ........................42</line>
<line end="4816" id="L135" start="4744">   15. Considerations for Multiple Responders on the Same Machine ....43</line>
<line end="4889" id="L136" start="4817">   16. Multicast DNS Character Set ...................................45</line>
<line end="4962" id="L137" start="4890">   17. Multicast DNS Message Size ....................................46</line>
<line end="5035" id="L138" start="4963">   18. Multicast DNS Message Format ..................................47</line>
<line end="5108" id="L139" start="5036">   19. Summary of Differences between Multicast DNS and Unicast DNS ..51</line>
<line end="5181" id="L140" start="5109">   20. IPv6 Considerations ...........................................52</line>
<line end="5254" id="L141" start="5182">   21. Security Considerations .......................................52</line>
<line end="5327" id="L142" start="5255">   22. IANA Considerations ...........................................53</line>
<line end="5400" id="L143" start="5328">   23. Acknowledgments ...............................................56</line>
<line end="5473" id="L144" start="5401">   24. References ....................................................56</line>
<line end="5546" id="L145" start="5474">   Appendix A. Design Rationale for Choice of UDP Port Number ........60</line>
<line end="5609" id="L146" start="5547">   Appendix B. Design Rationale for Not Using Hashed Multicast</line>
<line end="5682" id="L147" start="5610">               Addresses .............................................61</line>
<line end="5745" id="L148" start="5683">   Appendix C. Design Rationale for Maximum Multicast DNS Name</line>
<line end="5818" id="L149" start="5746">               Length ................................................62</line>
<line end="5891" id="L150" start="5819">   Appendix D. Benefits of Multicast Responses .......................64</line>
<line end="5964" id="L151" start="5892">   Appendix E. Design Rationale for Encoding Negative Responses ......65</line>
<line end="6037" id="L152" start="5965">   Appendix F. Use of UTF-8 ..........................................66</line>
<line end="6110" id="L153" start="6038">   Appendix G. Private DNS Namespaces ................................67</line>
<line end="6183" id="L154" start="6111">   Appendix H. Deployment History ....................................67</line>
</paragraph>

</section>

<section id="s1" name="Introduction" num="1">
<paragraph id="s1_p1" num="1">
<clause id="s1_p1_c1" num="1">
<linesub end="6493" start="6370">Multicast DNS and its companion technology DNS-Based Service</linesub>
<linesub end="6569" start="6434">Discovery [RFC6763] were created to provide IP networking with the</linesub>
<linesub end="6643" start="6504">ease-of-use and autoconfiguration for which AppleTalk was well-known</linesub>
<linesub end="6658" start="6576">[RFC6760].</linesub>
</clause>
<clause id="s1_p1_c2" num="2">
<linesub end="6717" start="6588">When reading this document, familiarity with the concepts</linesub>
<linesub end="6788" start="6649">of Zero Configuration Networking [Zeroconf] and automatic link-local</linesub>
<linesub end="6808" start="6721">addressing [RFC3927] [RFC4862] is helpful.</linesub>
</clause>
</paragraph>

<paragraph id="s1_p2" num="2">
<clause id="s1_p2_c1" num="1">
<linesub end="6891" start="6768">Multicast DNS borrows heavily from the existing DNS protocol</linesub>
<linesub end="6957" start="6832">[RFC1034] [RFC1035] [RFC6195], using the existing DNS message</linesub>
<linesub end="7015" start="6897">structure, name syntax, and resource record types.</linesub>
</clause>
<clause id="s1_p2_c2" num="2">
<linesub end="7030" start="6949">This document</linesub>
<linesub end="7086" start="6966">specifies no new operation codes or response codes.</linesub>
</clause>
<clause id="s1_p2_c3" num="3">
<linesub end="7101" start="7019">This document</linesub>
<linesub end="7177" start="7036">describes how clients send DNS-like queries via IP multicast, and how</linesub>
<linesub end="7248" start="7109">a collection of hosts cooperate to collectively answer those queries</linesub>
<linesub end="7222" start="7181">in a useful manner.</linesub>
</clause>
</paragraph>

</section>

<section id="s2" name="Conventions and Terminology Used in This Document" num="2">
<paragraph id="s2_p1" num="1">
<clause id="s2_p1_c1" num="1">
<linesub end="7397" start="7260">The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",</linesub>
<linesub end="7470" start="7331">"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this</linesub>
<linesub end="7542" start="7403">document are to be interpreted as described in "Key words for use in</linesub>
<linesub end="7572" start="7475">RFCs to Indicate Requirement Levels" [RFC2119].</linesub>
</clause>
</paragraph>

<paragraph id="s2_p2" num="2">
<clause id="s2_p2_c1" num="1">
<linesub end="7666" start="7527">When this document uses the term "Multicast DNS", it should be taken</linesub>
<linesub end="7736" start="7599">to mean: "Clients performing DNS-like queries for DNS-like resource</linesub>
<linesub end="7807" start="7670">records by sending DNS-like UDP query and response messages over IP</linesub>
<linesub end="7840" start="7741">Multicast to UDP port 5353".</linesub>
</clause>
<clause id="s2_p2_c2" num="2">
<linesub end="7880" start="7771">The design rationale for selecting UDP</linesub>
<linesub end="7890" start="7813">port 5353 is discussed in Appendix A.</linesub>
</clause>
</paragraph>

<paragraph id="s2_p3" num="3">
<clause id="s2_p3_c1" num="1">
<linesub end="7996" start="7855">This document uses the term "host name" in the strict sense to mean a</linesub>
<linesub end="8067" start="7928">fully qualified domain name that has an IPv4 or IPv6 address record.</linesub>
</clause>
<clause id="s2_p3_c2" num="2">
<linesub end="8125" start="8000">It does not use the term "host name" in the commonly used but</linesub>
<linesub end="8200" start="8065">incorrect sense to mean just the first DNS label of a host's fully</linesub>
<linesub end="8182" start="8135">qualified domain name.</linesub>
</clause>
</paragraph>

<paragraph id="s2_p4" num="4">
<clause id="s2_p4_c1" num="1">
<linesub end="8297" start="8162">A DNS (or mDNS) packet contains an IP Time to Live (TTL) in the IP</linesub>
<linesub end="8365" start="8232">header, which is effectively a hop-count limit for the packet, to</linesub>
<linesub end="8398" start="8301">guard against routing loops.</linesub>
</clause>
<clause id="s2_p4_c2" num="2">
<linesub end="8436" start="8331">Each resource record also contains a</linesub>
<linesub end="8512" start="8371">TTL, which is the number of seconds for which the resource record may</linesub>
<linesub end="8524" start="8444">be cached.</linesub>
</clause>
<clause id="s2_p4_c3" num="3">
<linesub end="8581" start="8456">This document uses the term "IP TTL" to refer to the IP</linesub>
<linesub end="8654" start="8515">header TTL (hop limit), and the term "RR TTL" or just "TTL" to refer</linesub>
<linesub end="8678" start="8587">to the resource record TTL (cache lifetime).</linesub>
</clause>
</paragraph>

<paragraph id="s2_p5" num="5">
<clause id="s2_p5_c1" num="1">
<linesub end="8763" start="8636">DNS-format messages contain a header, a Question Section, then</linesub>
<linesub end="8818" start="8702">Answer, Authority, and Additional Record Sections.</linesub>
</clause>
<clause id="s2_p5_c2" num="2">
<linesub end="8831" start="8754">The Answer,</linesub>
<linesub end="8906" start="8769">Authority, and Additional Record Sections all hold resource records</linesub>
<linesub end="9084" start="8994">in the same format.</linesub>
</clause>
<clause id="s2_p5_c3" num="3">
<linesub end="9133" start="9015">Where this document describes issues that apply</linesub>
<linesub end="9197" start="9066">equally to all three sections, it uses the term "Resource Record</linesub>
<linesub end="9249" start="9134">Sections" to refer collectively to these three sections.</linesub>
</clause>
</paragraph>

<paragraph id="s2_p6" num="6">
<clause id="s2_p6_c1" num="1">
<linesub end="9334" start="9195">This document uses the terms "shared" and "unique" when referring to</linesub>
<linesub end="9332" start="9267">resource record sets [RFC1034]:</linesub>
</clause>
</paragraph>

<paragraph id="s2_p7" num="7">
<clause id="s2_p7_c1" num="1">
<linesub end="9442" start="9306">A "shared" resource record set is one where several Multicast DNS</linesub>
<linesub end="9502" start="9378">responders may have records with the same name, rrtype, and</linesub>
<linesub end="9582" start="9444">rrclass, and several responders may respond to a particular query.</linesub>
</clause>
</paragraph>

<paragraph id="s2_p8" importance="must" num="8">
<clause id="s2_p8_c1" num="1">
<linesub end="9652" start="9518">A "unique" resource record set is one where all the records with</linesub>
<linesub end="9725" start="9589">that name, rrtype, and rrclass are conceptually under the control</linesub>
<linesub end="9791" start="9661">or ownership of a single responder, and it is expected that at</linesub>
<linesub end="9854" start="9730">most one responder should respond to a query for that name,</linesub>
<linesub end="9881" start="9796">rrtype, and rrclass.</linesub>
</clause>
<clause id="s2_p8_c2" importance="must" num="2">
<linesub end="9920" start="9818">Before claiming ownership of a unique</linesub>
<linesub end="9990" start="9862">resource record set, a responder MUST probe to verify that no</linesub>
<linesub end="10068" start="9930">other responder already claims ownership of that set, as described</linesub>
<linesub end="10093" start="10003">in Section 8.1, "Probing".</linesub>
<notes>
    <note>Detailed requirements elsewhere:</note>
    <ref type="section" target="s8.1" />
</notes>
</clause>
<clause id="s2_p8_c3" importance="must" num="3">
<linesub end="10125" start="10031">(For fault-tolerance and other</linesub>
<linesub end="10190" start="10068">reasons, sometimes it is permissible to have more than one</linesub>
<linesub end="10271" start="10133">responder answering for a particular "unique" resource record set,</linesub>
<linesub end="10332" start="10206">but such cooperating responders MUST give answers containing</linesub>
<linesub end="10376" start="10273">identical rdata for these records.</linesub>
<notes>
    <note>Identical records are not conflicts:</note>
    <ref type="clause" target="s9_p1_c2" />
    <coderef type="impl" repo="dns" path="lwt/mdns_responder.ml" name="process_response" line="606" />
    <note type="todo">Untested</note>
</notes>
</clause>
<clause id="s2_p8_c4" num="4">
<linesub end="10405" start="10309">If they do not give answers</linesub>
<linesub end="10479" start="10343">containing identical rdata, then the probing step will reject the</linesub>
<linesub end="10549" start="10415">data as being inconsistent with what is already being advertised</linesub>
<linesub end="10556" start="10486">on the network for those names.)</linesub>
</clause>
</paragraph>

<paragraph id="s2_p9" num="9">
<clause id="s2_p9_c1" num="1">
<linesub end="10662" start="10523">Strictly speaking, the terms "shared" and "unique" apply to resource</linesub>
<linesub end="10710" start="10595">record sets, not to individual resource records.</linesub>
</clause>
<clause id="s2_p9_c2" num="2">
<linesub end="10726" start="10645">However, it is</linesub>
<linesub end="10804" start="10663">sometimes convenient to talk of "shared resource records" and "unique</linesub>
<linesub end="10816" start="10736">resource records".</linesub>
</clause>
<clause id="s2_p9_c3" num="3">
<linesub end="10857" start="10756">When used this way, the terms should be</linesub>
<linesub end="10924" start="10799">understood to mean a record that is a member of a "shared" or</linesub>
<linesub end="10953" start="10864">"unique" resource record set, respectively.</linesub>
</clause>
</paragraph>

</section>

<section id="s3" name="Multicast DNS Names" num="3">
<paragraph id="s3_p1" num="1">
<clause id="s3_p1_c1" num="1">
<linesub end="11076" start="10937">A host that belongs to an organization or individual who has control</linesub>
<linesub end="11142" start="11009">over some portion of the DNS namespace can be assigned a globally</linesub>
<linesub end="11205" start="11078">unique name within that portion of the DNS namespace, such as,</linesub>
<linesub end="11239" start="11144">"cheshire.example.com.".</linesub>
</clause>
<clause id="s3_p1_c2" num="2">
<linesub end="11283" start="11170">For those of us who have this luxury, this</linesub>
<linesub end="11304" start="11216">works very well.</linesub>
</clause>
<clause id="s3_p1_c3" num="3">
<linesub end="11357" start="11234">However, the majority of home computer users do not</linesub>
<linesub end="11424" start="11289">have easy access to any portion of the global DNS namespace within</linesub>
<linesub end="11471" start="11359">which they have the authority to create names.</linesub>
</clause>
<clause id="s3_p1_c4" num="4">
<linesub end="11488" start="11407">This leaves the</linesub>
<linesub end="11553" start="11426">majority of home computers effectively anonymous for practical</linesub>
<linesub end="11513" start="11492">purposes.</linesub>
</clause>
</paragraph>

<paragraph id="s3_p2" importance="must" num="2">
<clause id="s3_p2_c1" num="1">
<linesub end="11794" start="11661">To remedy this problem, this document allows any computer user to</linesub>
<linesub end="11869" start="11730">elect to give their computers link-local Multicast DNS host names of</linesub>
<linesub end="11909" start="11802">the form: "single-dns-label.local.".</linesub>
</clause>
<clause id="s3_p2_c2" num="2">
<linesub end="11941" start="11840">For example, a laptop computer</linesub>
<linesub end="11985" start="11874">may answer to the name "MyComputer.local.".</linesub>
</clause>
<clause id="s3_p2_c3" num="3">
<linesub end="12007" start="11919">Any computer user is</linesub>
<linesub end="12082" start="11943">granted the authority to name their computer this way, provided that</linesub>
<linesub end="12138" start="12015">the chosen host name is not already in use on that link.</linesub>
</clause>
<clause id="s3_p2_c4" num="4">
<linesub end="12146" start="12073">Having</linesub>
<linesub end="12224" start="12083">named their computer this way, the user has the authority to continue</linesub>
<linesub end="12295" start="12156">utilizing that name until such time as a name conflict occurs on the</linesub>
<linesub end="12345" start="12228">link that is not resolved in the user's favor.</linesub>
</clause>
<clause id="s3_p2_c5" importance="must" num="5">
<linesub end="12367" start="12276">If this happens, the</linesub>
<linesub end="12435" start="12300">computer (or its human user) MUST cease using the name, and SHOULD</linesub>
<linesub end="12498" start="12370">attempt to allocate a new unique name for use on that link.</linesub>
<notes>
    <note>Detailed requirements elsewhere:</note>
    <ref target="s9_p6" />
</notes>
</clause>
<clause id="s3_p2_c6" num="6">
<linesub end="12505" start="12431">These</linesub>
<linesub end="12575" start="12440">conflicts are expected to be relatively rare for people who choose</linesub>
<linesub end="12643" start="12510">reasonably imaginative names, but it is still important to have a</linesub>
<linesub end="12684" start="12579">mechanism in place to handle them when they happen.</linesub>
</clause>
</paragraph>

<paragraph id="s3_p3" num="3">
<clause id="s3_p3_c1" num="1">
<linesub end="12774" start="12635">This document specifies that the DNS top-level domain ".local." is a</linesub>
<linesub end="12830" start="12707">special domain with special semantics, namely that any fully</linesub>
<linesub end="12906" start="12771">qualified name ending in ".local." is link-local, and names within</linesub>
<linesub end="12974" start="12841">this domain are meaningful only on the link where they originate.</linesub>
</clause>
<clause id="s3_p3_c2" num="2">
<linesub end="13049" start="12910">This is analogous to IPv4 addresses in the 169.254/16 prefix or IPv6</linesub>
<linesub end="13103" start="12982">addresses in the FE80::/10 prefix, which are link-local and</linesub>
<linesub end="13146" start="13045">meaningful only on the link where they originate.</linesub>
</clause>
</paragraph>

<paragraph id="s3_p4" importance="must" num="4">
<clause id="s3_p4_c1" importance="must" num="1">
<linesub end="13234" start="13099">Any DNS query for a name ending with ".local." MUST be sent to the</linesub>
<linesub end="13298" start="13169">mDNS IPv4 link-local multicast address 224.0.0.251 (or its IPv6</linesub>
<linesub end="13321" start="13236">equivalent FF02::FB).</linesub>
<notes>
    <note type="todo">A high-level resolver encapsulating both DNS and mDNS would be useful.</note>
</notes>
</clause>
<clause id="s3_p4_c2" num="2">
<linesub end="13361" start="13259">The design rationale for using a fixed</linesub>
<linesub end="13432" start="13301">multicast address instead of selecting from a range of multicast</linesub>
<linesub end="13490" start="13369">addresses using a hash function is discussed in Appendix B.</linesub>
</clause>
<clause id="s3_p4_c3" importance="may" num="3">
<linesub end="13571" start="13432">Implementers MAY choose to look up such names concurrently via other</linesub>
<linesub end="13633" start="13504">mechanisms (e.g., Unicast DNS) and coalesce the results in some</linesub>
<linesub end="13647" start="13571">fashion.</linesub>
</clause>
<clause id="s3_p4_c4" num="4">
<linesub end="13704" start="13581">Implementers choosing to do this should be aware of the</linesub>
<linesub end="13779" start="13640">potential for user confusion when a given name can produce different</linesub>
<linesub end="13847" start="13712">results depending on external network conditions (such as, but not</linesub>
<linesub end="13899" start="13782">limited to, which name lookup mechanism responds faster).</linesub>
</clause>
</paragraph>

<paragraph id="s3_p5" num="5">
<clause id="s3_p5_c1" num="1">
<linesub end="13973" start="13844">It is unimportant whether a name ending with ".local." occurred</linesub>
<linesub end="14046" start="13911">because the user explicitly typed in a fully qualified domain name</linesub>
<linesub end="14110" start="13981">ending in ".local.", or because the user entered an unqualified</linesub>
<linesub end="14177" start="14048">domain name and the host software appended the suffix ".local."</linesub>
<linesub end="14241" start="14115">because that suffix appears in the user's search list.</linesub>
</clause>
<clause id="s3_p5_c2" num="2">
<linesub end="14256" start="14171">The ".local."</linesub>
<linesub end="14319" start="14188">suffix could appear in the search list because the user manually</linesub>
<linesub end="14393" start="14256">configured it, or because it was received via DHCP [RFC2132] or via</linesub>
<linesub end="14451" start="14327">any other mechanism for configuring the DNS search list.</linesub>
</clause>
<clause id="s3_p5_c3" num="3">
<linesub end="14460" start="14385">In this</linesub>
<linesub end="14537" start="14396">respect the ".local." suffix is treated no differently from any other</linesub>
<linesub end="14582" start="14469">search domain that might appear in the DNS search list.</linesub>
</clause>
</paragraph>

<paragraph id="s3_p6" importance="may" num="6">
<clause id="s3_p6_c1" importance="may" num="1">
<linesub end="14821" start="14684">DNS queries for names that do not end with ".local." MAY be sent to</linesub>
<linesub end="14890" start="14755">the mDNS multicast address, if no other conventional DNS server is</linesub>
<linesub end="14899" start="14825">available.</linesub>
</clause>
<clause id="s3_p6_c2" num="2">
<linesub end="14950" start="14837">This can allow hosts on the same link to continue</linesub>
<linesub end="15023" start="14890">communicating using each other's globally unique DNS names during</linesub>
<linesub end="15100" start="14959">network outages that disrupt communication with the greater Internet.</linesub>
</clause>
<clause id="s3_p6_c3" num="3">
<linesub end="15163" start="15032">When resolving global names via local multicast, it is even more</linesub>
<linesub end="15239" start="15100">important to use DNS Security Extensions (DNSSEC) [RFC4033] or other</linesub>
<linesub end="15301" start="15172">security mechanisms to ensure that the response is trustworthy.</linesub>
</clause>
<clause id="s3_p6_c4" num="4">
<linesub end="15374" start="15239">Resolving global names via local multicast is a contentious issue,</linesub>
<linesub end="15448" start="15309">and this document does not discuss it further, instead concentrating</linesub>
<linesub end="15516" start="15381">on the issue of resolving local names using DNS messages sent to a</linesub>
<linesub end="15490" start="15451">multicast address.</linesub>
</clause>
</paragraph>

<paragraph id="s3_p7" num="7">
<clause id="s3_p7_c1" num="1">
<linesub end="15611" start="15474">This document recommends a single flat namespace for dot-local host</linesub>
<linesub end="15676" start="15545">names, (i.e., the names of DNS "A" and "AAAA" records, which map</linesub>
<linesub end="15750" start="15613">names to IPv4 and IPv6 addresses), but other DNS record types (such</linesub>
<linesub end="15821" start="15684">as those used by DNS-Based Service Discovery [RFC6763]) may contain</linesub>
<linesub end="15894" start="15755">as many labels as appropriate for the desired usage, up to a maximum</linesub>
<linesub end="15951" start="15827">of 255 bytes, plus a terminating zero byte at the end.</linesub>
</clause>
<clause id="s3_p7_c2" num="2">
<linesub end="15964" start="15883">Name length</linesub>
<linesub end="15987" start="15898">issues are discussed further in Appendix C.</linesub>
</clause>
</paragraph>

<paragraph id="s3_p8" num="8">
<clause id="s3_p8_c1" num="1">
<linesub end="16075" start="15946">Enforcing uniqueness of host names is probably desirable in the</linesub>
<linesub end="16129" start="16013">common case, but this document does not mandate that.</linesub>
</clause>
<clause id="s3_p8_c2" num="2">
<linesub end="16136" start="16068">It is</linesub>
<linesub end="16202" start="16077">permissible for a collection of coordinated hosts to agree to</linesub>
<linesub end="16277" start="16142">maintain multiple DNS address records with the same name, possibly</linesub>
<linesub end="16327" start="16212">for load-balancing or fault-tolerance reasons.</linesub>
</clause>
<clause id="s3_p8_c3" num="3">
<linesub end="16347" start="16260">This document does</linesub>
<linesub end="16398" start="16282">not take a position on whether that is sensible.</linesub>
</clause>
<clause id="s3_p8_c4" num="4">
<linesub end="16415" start="16332">It is important</linesub>
<linesub end="16457" start="16351">that both modes of operation be supported.</linesub>
</clause>
<clause id="s3_p8_c5" num="5">
<linesub end="16476" start="16395">The Multicast DNS</linesub>
<linesub end="16541" start="16416">protocol allows hosts to verify and maintain unique names for</linesub>
<linesub end="16618" start="16481">resource records where that behavior is desired, and it also allows</linesub>
<linesub end="16693" start="16552">hosts to maintain multiple resource records with a single shared name</linesub>
<linesub end="16725" start="16625">where that behavior is desired.</linesub>
</clause>
<clause id="s3_p8_c6" num="6">
<linesub end="16760" start="16658">This consideration applies to all</linesub>
<linesub end="16823" start="16695">resource records, not just address records (host names).</linesub>
</clause>
<clause id="s3_p8_c7" num="7">
<linesub end="16836" start="16753">In summary:</linesub>
<linesub end="16897" start="16768">It is required that the protocol have the ability to detect and</linesub>
<linesub end="16970" start="16835">handle name conflicts, but it is not required that this ability be</linesub>
<linesub end="16952" start="16905">used for every record.</linesub>
</clause>
</paragraph>

</section>

<section id="s4" name="Reverse Address Mapping" num="4">
<paragraph id="s4_p1" num="1">
<clause id="s4_p1_c1" num="1">
<linesub end="17096" start="16961">Like ".local.", the IPv4 and IPv6 reverse mapping domains are also</linesub>
<linesub end="17084" start="17031">defined to be link-local:</linesub>
</clause>
</paragraph>

<paragraph id="s4_p2" importance="must" num="2">
<clause id="s4_p2_c1" importance="must" num="1">
<linesub end="17200" start="17064">Any DNS query for a name ending with "254.169.in-addr.arpa." MUST</linesub>
<linesub end="17272" start="17136">be sent to the mDNS IPv4 link-local multicast address 224.0.0.251</linesub>
<linesub end="17321" start="17208">or the mDNS IPv6 multicast address FF02::FB.</linesub>
<notes>
    <note type="todo">High-level resolver mentioned previously:</note>
    <ref target="s3_p4_c1"/>
</notes>
</clause>
<clause id="s4_p2_c2" num="2">
<linesub end="17340" start="17254">Since names under</linesub>
<linesub end="17416" start="17278">this domain correspond to IPv4 link-local addresses, it is logical</linesub>
<linesub end="17471" start="17351">that the local link is the best place to find information</linesub>
<linesub end="17473" start="17415">pertaining to those names.</linesub>
</clause>
</paragraph>

<paragraph id="s4_p3" importance="must" num="3">
<clause id="s4_p3_c1" importance="must" num="1">
<linesub end="17729" start="17601">Likewise, any DNS query for a name within the reverse mapping</linesub>
<linesub end="17789" start="17669">domains for IPv6 link-local addresses ("8.e.f.ip6.arpa.",</linesub>
<linesub end="17869" start="17733">"9.e.f.ip6.arpa.", "a.e.f.ip6.arpa.", and "b.e.f.ip6.arpa.") MUST</linesub>
<linesub end="17941" start="17805">be sent to the mDNS IPv6 link-local multicast address FF02::FB or</linesub>
<linesub end="17993" start="17877">the mDNS IPv4 link-local multicast address 224.0.0.251.</linesub>
<notes>
    <note type="todo">High-level resolver mentioned previously:</note>
    <ref target="s3_p4_c1"/>
</notes>
</clause>
</paragraph>

</section>

<section id="s5" name="Querying" num="5">
<paragraph id="s5_p1" num="1">
<clause id="s5_p1_c1" num="1">
<linesub end="18092" start="17951">There are two kinds of Multicast DNS queries: one-shot queries of the</linesub>
<linesub end="18163" start="18024">kind made by legacy DNS resolvers, and continuous, ongoing Multicast</linesub>
<linesub end="18229" start="18096">DNS queries made by fully compliant Multicast DNS queriers, which</linesub>
<linesub end="18306" start="18165">support asynchronous operations including DNS-Based Service Discovery</linesub>
<linesub end="18261" start="18238">[RFC6763].</linesub>
</clause>
</paragraph>

<paragraph id="s5_p2" importance="must" num="2">
<clause id="s5_p2_c1" importance="must" num="1">
<linesub end="18376" start="18253">Except in the rare case of a Multicast DNS responder that is</linesub>
<linesub end="18450" start="18317">advertising only shared resource records and no unique records, a</linesub>
<linesub end="18523" start="18386">Multicast DNS responder MUST also implement a Multicast DNS querier</linesub>
<linesub end="18598" start="18457">so that it can first verify the uniqueness of those records before it</linesub>
<linesub end="18601" start="18530">begins answering queries for them.</linesub>
<notes>
    <coderef type="impl" repo="dns" path="lwt/mdns_responder.ml" name="probe_forever" line="344" />
    <note>Detailed requirements elsewhere:</note>
    <ref type="section" target="s8.1" />
</notes>
</clause>
</paragraph>

</section>

<section id="s5.1" name="One-Shot Multicast DNS Queries" num="5.1">
<paragraph id="s5.1_p1" importance="must" num="1">
<clause id="s5.1_p1_c1" num="1">
<linesub end="18746" start="18607">The most basic kind of Multicast DNS client may simply send standard</linesub>
<linesub end="18812" start="18679">DNS queries blindly to 224.0.0.251:5353, without necessarily even</linesub>
<linesub end="18854" start="18748">being aware of what a multicast address is.</linesub>
</clause>
<clause id="s5.1_p1_c2" num="2">
<linesub end="18871" start="18793">This change can</linesub>
<linesub end="18953" start="18812">typically be implemented with just a few lines of code in an existing</linesub>
<linesub end="18975" start="18885">DNS resolver library.</linesub>
</clause>
<clause id="s5.1_p1_c3" num="3">
<linesub end="19020" start="18908">If a name being queried falls within one of</linesub>
<linesub end="19086" start="18955">the reserved Multicast DNS domains (see Sections 3 and 4), then,</linesub>
<linesub end="19154" start="19023">rather than using the configured Unicast DNS server address, the</linesub>
<linesub end="19224" start="19091">query is instead sent to 224.0.0.251:5353 (or its IPv6 equivalent</linesub>
<linesub end="19248" start="19160">[FF02::FB]:5353).</linesub>
</clause>
<clause id="s5.1_p1_c4" num="4">
<linesub end="19299" start="19179">Typically, the timeout would also be shortened to</linesub>
<linesub end="19324" start="19232">two or three seconds.</linesub>
</clause>
<clause id="s5.1_p1_c5" num="5">
<linesub end="19371" start="19255">It's possible to make a minimal Multicast DNS</linesub>
<linesub end="19416" start="19304">resolver with only these simple changes.</linesub>
</clause>
<clause id="s5.1_p1_c6" importance="must" num="6">
<linesub end="19445" start="19346">These queries are typically</linesub>
<linesub end="19516" start="19377">done using a high-numbered ephemeral UDP source port, but regardless</linesub>
<linesub end="19584" start="19449">of whether they are sent from a dynamic port or from a fixed port,</linesub>
<linesub end="19650" start="19519">these queries MUST NOT be sent using UDP source port 5353, since</linesub>
<linesub end="19726" start="19587">using UDP source port 5353 signals the presence of a fully compliant</linesub>
<linesub end="19746" start="19659">Multicast DNS querier, as described below.</linesub>
<notes>
    <note>A legacy mDNS resolver is not needed now that we have a real resolver.</note>
</notes>
</clause>
</paragraph>

<paragraph id="s5.1_p2" num="2">
<clause id="s5.1_p2_c1" num="1">
<linesub end="19841" start="19706">A simple DNS resolver like this will typically just take the first</linesub>
<linesub end="19860" start="19776">response it receives.</linesub>
</clause>
<clause id="s5.1_p2_c2" num="2">
<linesub end="19899" start="19799">It will not listen for additional UDP</linesub>
<linesub end="19977" start="19840">responses, but in many instances this may not be a serious problem.</linesub>
</clause>
<clause id="s5.1_p2_c3" num="3">
<linesub end="20052" start="19911">If a user types "http://MyPrinter.local." into their web browser, and</linesub>
<linesub end="20123" start="19984">their simple DNS resolver just takes the first response it receives,</linesub>
<linesub end="20191" start="20056">and the user gets to see the status and configuration web page for</linesub>
<linesub end="20259" start="20126">their printer, then the protocol has met the user's needs in this</linesub>
<linesub end="20208" start="20195">case.</linesub>
</clause>
</paragraph>

<paragraph id="s5.1_p3" num="3">
<clause id="s5.1_p3_c1" num="1">
<linesub end="20497" start="20358">While a basic DNS resolver like this may be adequate for simple host</linesub>
<linesub end="20549" start="20430">name lookup, it may not get ideal behavior in other cases.</linesub>
</clause>
<clause id="s5.1_p3_c2" num="2">
<linesub end="20623" start="20492">Additional refinements to create a fully compliant Multicast DNS</linesub>
<linesub end="20619" start="20560">querier are described below.</linesub>
</clause>
</paragraph>

</section>

<section id="s5.2" name="Continuous Multicast DNS Querying" num="5.2">
<paragraph id="s5.2_p1" num="1">
<clause id="s5.2_p1_c1" num="1">
<linesub end="20753" start="20634">In one-shot queries, the underlying assumption is that the</linesub>
<linesub end="20837" start="20696">transaction begins when the application issues a query, and ends when</linesub>
<linesub end="20866" start="20769">the first response is received.</linesub>
</clause>
<clause id="s5.2_p1_c2" num="2">
<linesub end="20898" start="20802">There is another type of query</linesub>
<linesub end="20969" start="20836">operation that is more asynchronous, in which having received one</linesub>
<linesub end="21044" start="20905">response is not necessarily an indication that there will be no more</linesub>
<linesub end="21110" start="20977">relevant responses, and the querying operation continues until no</linesub>
<linesub end="21140" start="21046">further responses are required.</linesub>
</clause>
<clause id="s5.2_p1_c3" num="3">
<linesub end="21169" start="21079">Determining when no further</linesub>
<linesub end="21235" start="21110">responses are required depends on the type of operation being</linesub>
<linesub end="21248" start="21175">performed.</linesub>
</clause>
<clause id="s5.2_p1_c4" num="4">
<linesub end="21298" start="21187">If the operation is looking up the IPv4 and IPv6</linesub>
<linesub end="21372" start="21239">addresses of another host, then no further responses are required</linesub>
<linesub end="21443" start="21308">once a successful connection has been made to one of those IPv4 or</linesub>
<linesub end="21461" start="21378">IPv6 addresses.</linesub>
</clause>
<clause id="s5.2_p1_c5" num="5">
<linesub end="21511" start="21395">If the operation is browsing to present the user</linesub>
<linesub end="21584" start="21447">with a list of DNS-SD services found on the network [RFC6763], then</linesub>
<linesub end="21659" start="21518">no further responses are required once the user indicates this to the</linesub>
<linesub end="21732" start="21591">user-interface software, e.g., by closing the network browsing window</linesub>
<linesub end="21771" start="21664">that was displaying the list of discovered services.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p2" num="2">
<clause id="s5.2_p2_c1" num="1">
<linesub end="21852" start="21721">Imagine some hypothetical software that allows users to discover</linesub>
<linesub end="21875" start="21789">network printers.</linesub>
</clause>
<clause id="s5.2_p2_c2" num="2">
<linesub end="21924" start="21808">The user wishes to discover all printers on the</linesub>
<linesub end="21990" start="21859">local network, not only the printer that is quickest to respond.</linesub>
</clause>
<clause id="s5.2_p2_c3" num="3">
<linesub end="22066" start="21927">When the user is actively looking for a network printer to use, they</linesub>
<linesub end="22136" start="21999">open a network browsing window that displays the list of discovered</linesub>
<linesub end="22150" start="22070">printers.</linesub>
</clause>
<clause id="s5.2_p2_c4" num="4">
<linesub end="22209" start="22081">It would be convenient for the user if they could rely on</linesub>
<linesub end="22281" start="22142">this list of network printers to stay up to date as network printers</linesub>
<linesub end="22349" start="22214">come and go, rather than displaying out-of-date stale information,</linesub>
<linesub end="22417" start="22284">and requiring the user explicitly to click a "refresh" button any</linesub>
<linesub end="22494" start="22353">time they want to see accurate information (which, from the moment it</linesub>
<linesub end="22563" start="22426">is displayed, is itself already beginning to become out-of-date and</linesub>
<linesub end="22574" start="22497">stale).</linesub>
</clause>
<clause id="s5.2_p2_c5" num="5">
<linesub end="22634" start="22506">If we are to display a continuously updated live list like</linesub>
<linesub end="22709" start="22568">this, we need to be able to do it efficiently, without naive constant</linesub>
<linesub end="22775" start="22641">polling, which would be an unreasonable burden on the network.</linesub>
</clause>
<clause id="s5.2_p2_c6" num="6">
<linesub end="22782" start="22705">It is</linesub>
<linesub end="22855" start="22714">not expected that all users will be browsing to discover new printers</linesub>
<linesub end="22912" start="22787">all the time, but when a user is browsing to discover service</linesub>
<linesub end="22991" start="22852">instances for an extended period, we want to be able to support that</linesub>
<linesub end="22971" start="22924">operation efficiently.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p3" importance="must" num="3">
<clause id="s5.2_p3_c1" importance="must" num="1">
<linesub end="23084" start="22951">Therefore, when retransmitting Multicast DNS queries to implement</linesub>
<linesub end="23155" start="23020">this kind of continuous monitoring, the interval between the first</linesub>
<linesub end="23217" start="23090">two queries MUST be at least one second, the intervals between</linesub>
<linesub end="23297" start="23156">successive queries MUST increase by at least a factor of two, and the</linesub>
<linesub end="23366" start="23229">querier MUST implement Known-Answer Suppression, as described below</linesub>
<linesub end="23532" start="23453">in Section 7.1.</linesub>
<notes>
    <note type="todo">Continuous mDNS queries may be useful in future.</note>
</notes>
</clause>
<clause id="s5.2_p3_c2" num="2">
<linesub end="23578" start="23470">The Known-Answer Suppression mechanism tells</linesub>
<linesub end="23653" start="23518">responders which answers are already known to the querier, thereby</linesub>
<linesub end="23727" start="23588">allowing responders to avoid wasting network capacity with pointless</linesub>
<linesub end="23768" start="23660">repeated transmission of those answers.</linesub>
</clause>
<clause id="s5.2_p3_c3" num="3">
<linesub end="23795" start="23701">A querier retransmits its</linesub>
<linesub end="23869" start="23730">question because it wishes to receive answers it may have missed the</linesub>
<linesub end="23931" start="23802">first time, not because it wants additional duplicate copies of</linesub>
<linesub end="23963" start="23869">answers it already received.</linesub>
</clause>
<clause id="s5.2_p3_c4" num="4">
<linesub end="23998" start="23899">Failure to implement Known-Answer</linesub>
<linesub end="24069" start="23936">Suppression can result in unacceptable levels of network traffic.</linesub>
</clause>
<clause id="s5.2_p3_c5" importance="may" num="5">
<linesub end="24140" start="24005">When the interval between queries reaches or exceeds 60 minutes, a</linesub>
<linesub end="24214" start="24075">querier MAY cap the interval to a maximum of 60 minutes, and perform</linesub>
<linesub end="24282" start="24147">subsequent queries at a steady-state rate of one query per hour.</linesub>
</clause>
<clause id="s5.2_p3_c6" importance="should" num="6">
<linesub end="24286" start="24213">To</linesub>
<linesub end="24350" start="24219">avoid accidental synchronization when, for some reason, multiple</linesub>
<linesub end="24424" start="24287">clients begin querying at exactly the same moment (e.g., because of</linesub>
<linesub end="24495" start="24358">some common external trigger event), a Multicast DNS querier SHOULD</linesub>
<linesub end="24568" start="24429">also delay the first query of the series by a randomly chosen amount</linesub>
<linesub end="24550" start="24501">in the range 20-120 ms.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p4" importance="should" num="4">
<clause id="s5.2_p4_c1" num="1">
<linesub end="24668" start="24529">When a Multicast DNS querier receives an answer, the answer contains</linesub>
<linesub end="24742" start="24601">a TTL value that indicates for how many seconds this answer is valid.</linesub>
</clause>
<clause id="s5.2_p4_c2" importance="should" num="2">
<linesub end="24809" start="24674">After this interval has passed, the answer will no longer be valid</linesub>
<linesub end="24852" start="24744">and SHOULD be deleted from the cache.</linesub>
</clause>
<clause id="s5.2_p4_c3" importance="should" num="3">
<linesub end="24883" start="24783">Before the record expiry time</linesub>
<linesub end="24951" start="24816">is reached, a Multicast DNS querier that has local clients with an</linesub>
<linesub end="25027" start="24886">active interest in the state of that record (e.g., a network browsing</linesub>
<linesub end="25096" start="24959">window displaying a list of discovered services to the user) SHOULD</linesub>
<linesub end="25163" start="25030">reissue its query to determine whether the record is still valid.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p5" num="5">
<clause id="s5.2_p5_c1" num="1">
<linesub end="25233" start="25100">To perform this cache maintenance, a Multicast DNS querier should</linesub>
<linesub end="25294" start="25169">plan to retransmit its query after at least 50% of the record</linesub>
<linesub end="25319" start="25234">lifetime has elapsed.</linesub>
</clause>
<clause id="s5.2_p5_c2" num="2">
<linesub end="25359" start="25257">This document recommends the following</linesub>
<linesub end="25338" start="25299">specific strategy.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p6" importance="must" num="6">
<clause id="s5.2_p6_c1" num="1">
<linesub end="25447" start="25322">The querier should plan to issue a query at 80% of the record</linesub>
<linesub end="25522" start="25387">lifetime, and then if no answer is received, at 85%, 90%, and 95%.</linesub>
</clause>
<clause id="s5.2_p6_c2" num="2">
<linesub end="25588" start="25457">If an answer is received, then the remaining TTL is reset to the</linesub>
<linesub end="25660" start="25525">value given in the answer, and this process repeats for as long as</linesub>
<linesub end="25730" start="25595">the Multicast DNS querier has an ongoing interest in the record.</linesub>
</clause>
<clause id="s5.2_p6_c3" num="3">
<linesub end="25734" start="25661">If</linesub>
<linesub end="25806" start="25667">no answer is received after four queries, the record is deleted when</linesub>
<linesub end="25840" start="25739">it reaches 100% of its lifetime.</linesub>
</clause>
<clause id="s5.2_p6_c4" importance="must" num="4">
<linesub end="25874" start="25773">A Multicast DNS querier MUST NOT</linesub>
<linesub end="25948" start="25809">perform this cache maintenance for records for which it has no local</linesub>
<linesub end="25979" start="25881">clients with an active interest.</linesub>
<notes>
    <note type="todo">Continuous querying mentioned previously:</note>
    <ref target="s5.2_p3"/>
</notes>
</clause>
<clause id="s5.2_p6_c5" num="5">
<linesub end="26010" start="25915">If the expiry of a particular</linesub>
<linesub end="26081" start="25948">record from the cache would result in no net effect to any client</linesub>
<linesub end="26156" start="26017">software running on the querier device, and no visible effect to the</linesub>
<linesub end="26228" start="26089">human user, then there is no reason for the Multicast DNS querier to</linesub>
<linesub end="26294" start="26161">waste network capacity checking whether the record remains valid.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p7" num="7">
<clause id="s5.2_p7_c1" num="1">
<linesub end="26526" start="26387">To avoid the case where multiple Multicast DNS queriers on a network</linesub>
<linesub end="26596" start="26459">all issue their queries simultaneously, a random variation of 2% of</linesub>
<linesub end="26667" start="26530">the record TTL should be added, so that queries are scheduled to be</linesub>
<linesub end="26732" start="26601">performed at 80-82%, 85-87%, 90-92%, and then 95-97% of the TTL.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p8" importance="should" num="8">
<clause id="s5.2_p8_c1" importance="should" num="1">
<linesub end="26801" start="26670">An additional efficiency optimization SHOULD be performed when a</linesub>
<linesub end="26871" start="26738">Multicast DNS response is received containing a unique answer (as</linesub>
<linesub end="26938" start="26807">indicated by the cache-flush bit being set, described in Section</linesub>
<linesub end="26997" start="26875">10.2, "Announcements to Flush Outdated Cache Entries").</linesub>
</clause>
<clause id="s5.2_p8_c2" num="2">
<linesub end="27006" start="26932">In this</linesub>
<linesub end="27080" start="26943">case, there is no need for the querier to continue issuing a stream</linesub>
<linesub end="27155" start="27014">of queries with exponentially increasing intervals, since the receipt</linesub>
<linesub end="27228" start="27087">of a unique answer is a good indication that no other answers will be</linesub>
<linesub end="27243" start="27160">forthcoming.</linesub>
</clause>
<clause id="s5.2_p8_c3" importance="should" num="3">
<linesub end="27299" start="27174">In this case, the Multicast DNS querier SHOULD plan to</linesub>
<linesub end="27369" start="27232">issue its next query for this record at 80-82% of the record's TTL,</linesub>
<linesub end="27344" start="27303">as described above.</linesub>
</clause>
</paragraph>

<paragraph id="s5.2_p9" importance="must" num="9">
<clause id="s5.2_p9_c1" importance="must" num="1">
<linesub end="27452" start="27327">A compliant Multicast DNS querier, which implements the rules</linesub>
<linesub end="27531" start="27392">specified in this document, MUST send its Multicast DNS queries from</linesub>
<linesub end="27605" start="27464">UDP source port 5353 (the well-known port assigned to mDNS), and MUST</linesub>
<linesub end="27678" start="27537">listen for Multicast DNS replies sent to UDP destination port 5353 at</linesub>
<linesub end="27745" start="27610">the mDNS link-local multicast address (224.0.0.251 and/or its IPv6</linesub>
<linesub end="27725" start="27680">equivalent FF02::FB).</linesub>
<notes>
    <coderef type="impl" repo="dns" path="mirage/mdns_resolver_mirage.ml" name="connect_to_resolver" line="89" />
    <note>Mirage implicitly listens on all IP addresses.</note>
</notes>
</clause>
</paragraph>

</section>

<section id="s5.3" name="Multiple Questions per Query" num="5.3">
<paragraph id="s5.3_p1" num="1">
<clause id="s5.3_p1_c1" num="1">
<linesub end="27875" start="27742">Multicast DNS allows a querier to place multiple questions in the</linesub>
<linesub end="27928" start="27811">Question Section of a single Multicast DNS query message.</linesub>
</clause>
</paragraph>

<paragraph id="s5.3_p2" num="2">
<clause id="s5.3_p2_c1" num="1">
<linesub end="28008" start="27873">The semantics of a Multicast DNS query message containing multiple</linesub>
<linesub end="28080" start="27943">questions is identical to a series of individual DNS query messages</linesub>
<linesub end="28112" start="28014">containing one question each.</linesub>
</clause>
<clause id="s5.3_p2_c2" num="2">
<linesub end="28149" start="28045">Combining multiple questions into a</linesub>
<linesub end="28223" start="28084">single message is purely an efficiency optimization and has no other</linesub>
<linesub end="28203" start="28156">semantic significance.</linesub>
</clause>
</paragraph>

</section>

<section id="s5.4" name="Questions Requesting Unicast Responses" num="5.4">
<paragraph id="s5.4_p1" num="1">
<clause id="s5.4_p1_c1" num="1">
<linesub end="28364" start="28229">Sending Multicast DNS responses via multicast has the benefit that</linesub>
<linesub end="28426" start="28299">all the other hosts on the network get to see those responses,</linesub>
<linesub end="28504" start="28365">enabling them to keep their caches up to date and detect conflicting</linesub>
<linesub end="28460" start="28437">responses.</linesub>
</clause>
</paragraph>

<paragraph id="s5.4_p2" num="2">
<clause id="s5.4_p2_c1" num="1">
<linesub end="28579" start="28452">However, there are situations where all the other hosts on the</linesub>
<linesub end="28631" start="28518">network don't need to see every response.</linesub>
</clause>
<clause id="s5.4_p2_c2" num="2">
<linesub end="28659" start="28561">Some examples are a laptop</linesub>
<linesub end="28728" start="28591">computer waking from sleep, the Ethernet cable being connected to a</linesub>
<linesub end="28799" start="28662">running machine, or a previously inactive interface being activated</linesub>
<linesub end="28833" start="28733">through a configuration change.</linesub>
</clause>
<clause id="s5.4_p2_c3" num="3">
<linesub end="28868" start="28766">At the instant of wake-up or link</linesub>
<linesub end="28942" start="28803">activation, the machine is a brand new participant on a new network.</linesub>
</clause>
<clause id="s5.4_p2_c4" num="4">
<linesub end="29010" start="28875">Its Multicast DNS cache for that interface is empty, and it has no</linesub>
<linesub end="29200" start="29098">knowledge of its peers on that link.</linesub>
</clause>
<clause id="s5.4_p2_c5" num="5">
<linesub end="29227" start="29136">It may have a significant</linesub>
<linesub end="29300" start="29165">number of questions that it wants answered right away, to discover</linesub>
<linesub end="29372" start="29235">information about its new surroundings and present that information</linesub>
<linesub end="29386" start="29306">to the user.</linesub>
</clause>
<clause id="s5.4_p2_c6" num="6">
<linesub end="29439" start="29320">As a new participant on the network, it has no idea</linesub>
<linesub end="29508" start="29375">whether the exact same questions may have been asked and answered</linesub>
<linesub end="29531" start="29444">just seconds ago.</linesub>
</clause>
<clause id="s5.4_p2_c7" num="7">
<linesub end="29581" start="29463">In this case, triggering a large sudden flood of</linesub>
<linesub end="29656" start="29515">multicast responses may impose an unreasonable burden on the network.</linesub>
</clause>
</paragraph>

<paragraph id="s5.4_p3" importance="should" num="3">
<clause id="s5.4_p3_c1" num="1">
<linesub end="29726" start="29589">To avoid large floods of potentially unnecessary responses in these</linesub>
<linesub end="29799" start="29660">cases, Multicast DNS defines the top bit in the class field of a DNS</linesub>
<linesub end="29836" start="29732">question as the unicast-response bit.</linesub>
</clause>
<clause id="s5.4_p3_c2" num="2">
<linesub end="29863" start="29771">When this bit is set in a</linesub>
<linesub end="29939" start="29800">question, it indicates that the querier is willing to accept unicast</linesub>
<linesub end="30003" start="29872">replies in response to this specific query, as well as the usual</linesub>
<linesub end="30029" start="29940">multicast responses.</linesub>
</clause>
<clause id="s5.4_p3_c3" num="3">
<linesub end="30075" start="29962">These questions requesting unicast responses</linesub>
<linesub end="30149" start="30010">are referred to as "QU" questions, to distinguish them from the more</linesub>
<linesub end="30216" start="30082">usual questions requesting multicast responses ("QM" questions).</linesub>
</clause>
<clause id="s5.4_p3_c4" importance="should" num="4">
<linesub end="30219" start="30148">A</linesub>
<linesub end="30276" start="30153">Multicast DNS querier sending its initial batch of questions</linesub>
<linesub end="30358" start="30217">immediately on wake from sleep or interface activation SHOULD set the</linesub>
<linesub end="30373" start="30290">unicast-response bit in those questions.</linesub>
</clause>
</paragraph>

<paragraph id="s5.4_p4" importance="should" num="4">
<clause id="s5.4_p4_c1" importance="should" num="1">
<linesub end="30472" start="30335">When a question is retransmitted (as described in Section 5.2), the</linesub>
<linesub end="30545" start="30406">unicast-response bit SHOULD NOT be set in subsequent retransmissions</linesub>
<linesub end="30564" start="30478">of that question.</linesub>
</clause>
<clause id="s5.4_p4_c2" importance="should" num="2">
<linesub end="30613" start="30497">Subsequent retransmissions SHOULD be usual "QM"</linesub>
<linesub end="30629" start="30548">questions.</linesub>
</clause>
<clause id="s5.4_p4_c3" num="3">
<linesub end="30687" start="30560">After the first question has received its responses, the</linesub>
<linesub end="30757" start="30620">querier should have a large Known-Answer list (Section 7.1) so that</linesub>
<linesub end="30822" start="30691">subsequent queries should elicit few, if any, further responses.</linesub>
</clause>
<clause id="s5.4_p4_c4" num="4">
<linesub end="30892" start="30759">Reverting to multicast responses as soon as possible is important</linesub>
<linesub end="30953" start="30828">because of the benefits that multicast responses provide (see</linesub>
<linesub end="30973" start="30893">Appendix D).</linesub>
</clause>
<clause id="s5.4_p4_c5" importance="should" num="5">
<linesub end="31026" start="30907">In addition, the unicast-response bit SHOULD be set</linesub>
<linesub end="31103" start="30962">only for questions that are active and ready to be sent the moment of</linesub>
<linesub end="31144" start="31035">wake from sleep or interface activation.</linesub>
</clause>
<clause id="s5.4_p4_c6" importance="should" num="6">
<linesub end="31170" start="31077">New questions created by</linesub>
<linesub end="31242" start="31105">local clients afterwards should be treated as normal "QM" questions</linesub>
<linesub end="31301" start="31176">and SHOULD NOT have the unicast-response bit set on the first</linesub>
<linesub end="31290" start="31241">question of the series.</linesub>
</clause>
</paragraph>

<paragraph id="s5.4_p5" importance="should" num="5">
<clause id="s5.4_p5_c1" importance="should" num="1">
<linesub end="31396" start="31269">When receiving a question with the unicast-response bit set, a</linesub>
<linesub end="31474" start="31335">responder SHOULD usually respond with a unicast packet directed back</linesub>
<linesub end="31490" start="31407">to the querier.</linesub>
</clause>
<clause id="s5.4_p5_c2" importance="should" num="2">
<linesub end="31540" start="31424">However, if the responder has not multicast that</linesub>
<linesub end="31613" start="31476">record recently (within one quarter of its TTL), then the responder</linesub>
<linesub end="31678" start="31547">SHOULD instead multicast the response so as to keep all the peer</linesub>
<linesub end="31746" start="31615">caches up to date, and to permit passive conflict detection.</linesub>
</clause>
<clause id="s5.4_p5_c3" num="3">
<linesub end="31754" start="31677">In the</linesub>
<linesub end="31822" start="31687">case of answering a probe question (Section 8.1) with the unicast-</linesub>
<linesub end="31896" start="31757">response bit set, the responder should always generate the requested</linesub>
<linesub end="31964" start="31829">unicast response, but it may also send a multicast announcement if</linesub>
<linesub end="32040" start="31899">the time since the last multicast announcement of that record is more</linesub>
<linesub end="32027" start="31972">than a quarter of its TTL.</linesub>
</clause>
</paragraph>

<paragraph id="s5.4_p6" num="6">
<clause id="s5.4_p6_c1" num="1">
<linesub end="32294" start="32157">Unicast replies are subject to all the same packet generation rules</linesub>
<linesub end="32363" start="32228">as multicast replies, including the cache-flush bit (Section 10.2)</linesub>
<linesub end="32439" start="32298">and (except when defending a unique name against a probe from another</linesub>
<linesub end="32504" start="32371">host) randomized delays to reduce network collisions (Section 6).</linesub>
</clause>
</paragraph>

</section>

<section id="s5.5" name="Direct Unicast Queries to Port 5353" num="5.5">
<paragraph id="s5.5_p1" importance="should" num="1">
<clause id="s5.5_p1_c1" num="1">
<linesub end="32617" start="32484">In specialized applications there may be rare situations where it</linesub>
<linesub end="32694" start="32553">makes sense for a Multicast DNS querier to send its query via unicast</linesub>
<linesub end="32716" start="32626">to a specific machine.</linesub>
</clause>
<clause id="s5.5_p1_c2" importance="should" num="2">
<linesub end="32759" start="32650">When a Multicast DNS responder receives a</linesub>
<linesub end="32826" start="32695">query via direct unicast, it SHOULD respond as it would for "QU"</linesub>
<linesub end="32878" start="32763">questions, as described above in Section 5.4.</linesub>
</clause>
<clause id="s5.5_p1_c3" importance="should" num="3">
<linesub end="32900" start="32810">Since it is possible</linesub>
<linesub end="32971" start="32834">for a unicast query to be received from a machine outside the local</linesub>
<linesub end="33040" start="32905">link, responders SHOULD check that the source address in the query</linesub>
<linesub end="33108" start="32975">packet matches the local subnet for that link (or, in the case of</linesub>
<linesub end="33181" start="33044">IPv6, the source address has an on-link prefix) and silently ignore</linesub>
<linesub end="33154" start="33115">the packet if not.</linesub>
</clause>
</paragraph>

<paragraph id="s5.5_p2" num="2">
<clause id="s5.5_p2_c1" num="1">
<linesub end="33265" start="33138">There may be specialized situations, outside the scope of this</linesub>
<linesub end="33339" start="33204">document, where it is intended and desirable to create a responder</linesub>
<linesub end="33405" start="33274">that does answer queries originating outside the local link.</linesub>
</clause>
<clause id="s5.5_p2_c2" num="2">
<linesub end="33413" start="33336">Such a</linesub>
<linesub end="33475" start="33346">responder would need to ensure that these non-local queries are</linesub>
<linesub end="33554" start="33413">always answered via unicast back to the querier, since an answer sent</linesub>
<linesub end="33625" start="33486">via link-local multicast would not reach a querier outside the local</linesub>
<linesub end="33571" start="33558">link.</linesub>
</clause>
</paragraph>

</section>

<section id="s6" name="Responding" num="6">
<paragraph id="s6_p1" importance="must" num="1">
<clause id="s6_p1_c1" num="1">
<linesub end="33721" start="33584">When a Multicast DNS responder constructs and sends a Multicast DNS</linesub>
<linesub end="33792" start="33655">response message, the Resource Record Sections of that message must</linesub>
<linesub end="33847" start="33726">contain only records for which that responder is explicitly</linesub>
<linesub end="33871" start="33789">authoritative.</linesub>
</clause>
<clause id="s6_p1_c2" num="2">
<linesub end="33922" start="33805">These answers may be generated because the record</linesub>
<linesub end="33995" start="33858">answers a question received in a Multicast DNS query message, or at</linesub>
<linesub end="34070" start="33929">certain other times that the responder determines than an unsolicited</linesub>
<linesub end="34099" start="34002">announcement is warranted.</linesub>
</clause>
<clause id="s6_p1_c3" importance="must" num="3">
<linesub end="34141" start="34030">A Multicast DNS responder MUST NOT place</linesub>
<linesub end="34215" start="34074">records from its cache, which have been learned from other responders</linesub>
<linesub end="34286" start="34147">on the network, in the Resource Record Sections of outgoing response</linesub>
<linesub end="34300" start="34219">messages.</linesub>
<notes>
    <note type="todo">This requirement will be relevant later if caching is implemented.</note>
</notes>
</clause>
<clause id="s6_p1_c4" num="4">
<linesub end="34360" start="34230">Only an authoritative source for a given record is allowed</linesub>
<linesub end="34379" start="34292">to issue responses containing that record.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p2" importance="must" num="2">
<clause id="s6_p2_c1" num="1">
<linesub end="34478" start="34339">The determination of whether a given record answers a given question</linesub>
<linesub end="34550" start="34411">is made using the standard DNS rules: the record name must match the</linesub>
<linesub end="34624" start="34483">question name, the record rrtype must match the question qtype unless</linesub>
<linesub end="34697" start="34556">the qtype is "ANY" (255) or the rrtype is "CNAME" (5), and the record</linesub>
<linesub end="34762" start="34629">rrclass must match the question qclass unless the qclass is "ANY"</linesub>
<linesub end="34775" start="34698">(255).</linesub>
</clause>
<clause id="s6_p2_c2" importance="must" num="2">
<linesub end="34837" start="34706">As with Unicast DNS, generally only DNS class 1 ("Internet")</linesub>
<linesub end="34903" start="34770">is used, but should client software use classes other than 1, the</linesub>
<linesub end="34930" start="34839">matching rules described above MUST be used.</linesub>
<notes>
    <note type="todo">It seems that Dns.Query ignores q_class, which is incorrect.</note>
    <coderef type="impl" repo="dns" path="lib/query.ml" name="lookup_multiple" line="452" />
</notes>
</clause>
</paragraph>

<paragraph id="s6_p3" importance="must" num="3">
<clause id="s6_p3_c1" importance="must" num="1">
<linesub end="35177" start="35040">A Multicast DNS responder MUST only respond when it has a positive,</linesub>
<linesub end="35236" start="35111">non-null response to send, or it authoritatively knows that a</linesub>
<linesub end="35281" start="35176">particular record does not exist.</linesub>
<notes>
    <note>No answer is added to the response when NXDomain. No response is sent when no answers are available:</note>
    <coderef type="impl" repo="dns" path="lib/query.ml" name="process_query" line="517" />
    <note type="todo">Tested only indirectly by unit tests.</note>
</notes>
</clause>
<clause id="s6_p3_c2" importance="must" num="2">
<linesub end="35317" start="35211">For unique records, where the host</linesub>
<linesub end="35384" start="35249">has already established sole ownership of the name, it MUST return</linesub>
<linesub end="35456" start="35319">negative answers to queries for records that it knows not to exist.</linesub>
<notes>
    <note type="todo">Negative answers not yet implemented (no knowledge of absence of AAAA records).
</notes>
</clause>
<clause id="s6_p3_c3" importance="must" num="3">
<linesub end="35519" start="35390">For example, a host with no IPv6 address, that has claimed sole</linesub>
<linesub end="35596" start="35457">ownership of the name "host.local." for all rrtypes, MUST respond to</linesub>
<linesub end="35650" start="35529">AAAA queries for "host.local." by sending a negative answer</linesub>
<linesub end="35712" start="35592">indicating that no AAAA records exist for that name.</linesub>
<notes>
    <note type="todo">Negative answers not yet implemented (no knowledge of absence of AAAA records).
</notes>
</clause>
<clause id="s6_p3_c4" num="4">
<linesub end="35725" start="35646">See Section</linesub>
<linesub end="35759" start="35661">6.1, "Negative Responses".</linesub>
</clause>
<clause id="s6_p3_c5" num="5">
<linesub end="35802" start="35689">For shared records, which are owned by no</linesub>
<linesub end="35875" start="35734">single host, the nonexistence of a given record is ascertained by the</linesub>
<linesub end="35946" start="35807">failure of any machine to respond to the Multicast DNS query, not by</linesub>
<linesub end="35978" start="35879">any explicit negative response.</linesub>
</clause>
<clause id="s6_p3_c6" importance="must" num="6">
<linesub end="36012" start="35912">For shared records, NXDOMAIN and</linesub>
<linesub end="36029" start="35948">other error responses MUST NOT be sent.</linesub>
<notes>
    <note>See description of NXDomain behaviour above.</note>
    <ref target="s6_p3_c1"/>
</notes>
</clause>
</paragraph>

<paragraph id="s6_p4" importance="must" num="4">
<clause id="s6_p4_c1" importance="must" num="1">
<linesub end="36117" start="35992">Multicast DNS responses MUST NOT contain any questions in the</linesub>
<linesub end="36138" start="36057">Question Section.</linesub>
<notes>
    <coderef type="impl" repo="dns" path="lib/query.ml" name="response_of_answer" line="55" />
    <coderef type="test" repo="dns" path="lib_test/ounit/test_query.ml" name="answer-mdns-A" line="137" />
    <coderef type="test" repo="dns" path="lib_test/ounit/test_mdns_responder.ml" name="q-A-AAAA" line="73" />
</notes>
</clause>
<clause id="s6_p4_c2" importance="must" num="2">
<linesub end="36182" start="36076">Any questions in the Question Section of a</linesub>
<linesub end="36250" start="36122">received Multicast DNS response MUST be silently ignored.</linesub>
<notes>
    <coderef type="impl" repo="dns" path="lwt/mdns_responder.ml" name="process_response" line="586" />
    <coderef type="impl" repo="dns" path="mirage/mdns_resolver_mirage.ml" name="packet_matches" line="39" />
    <note type="todo">Untested</note>
</notes>
</clause>
<clause id="s6_p4_c3" num="3">
<linesub end="36261" start="36181">Multicast</linesub>
<linesub end="36323" start="36194">DNS queriers receiving Multicast DNS responses do not care what</linesub>
<linesub end="36398" start="36261">question elicited the response; they care only that the information</linesub>
<linesub end="36409" start="36332">in the response is true and accurate.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p5" importance="should" num="5">
<clause id="s6_p5_c1" importance="should" num="1">
<linesub end="36515" start="36374">A Multicast DNS responder on Ethernet [IEEE.802.3] and similar shared</linesub>
<linesub end="36584" start="36447">multiple access networks SHOULD have the capability of delaying its</linesub>
<linesub end="36613" start="36518">responses by up to 500 ms, as described below.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p6" num="6">
<clause id="s6_p6_c1" num="1">
<linesub end="36702" start="36569">If a large number of Multicast DNS responders were all to respond</linesub>
<linesub end="36771" start="36638">immediately to a particular query, a collision would be virtually</linesub>
<linesub end="36781" start="36707">guaranteed.</linesub>
</clause>
<clause id="s6_p6_c2" num="2">
<linesub end="36830" start="36720">By imposing a small random delay, the number of</linesub>
<linesub end="36876" start="36771">collisions is dramatically reduced.</linesub>
</clause>
<clause id="s6_p6_c3" num="3">
<linesub end="36908" start="36808">On a full-sized Ethernet using</linesub>
<linesub end="36983" start="36842">the maximum cable lengths allowed and the maximum number of repeaters</linesub>
<linesub end="37048" start="36915">allowed, an Ethernet frame is vulnerable to collisions during the</linesub>
<linesub end="37084" start="36984">transmission of its first 256 bits.</linesub>
</clause>
<clause id="s6_p6_c4" num="4">
<linesub end="37111" start="37021">On 10 Mb/s Ethernet, this</linesub>
<linesub end="37179" start="37050">equates to a vulnerable time window of 25.6 microseconds.</linesub>
</clause>
<clause id="s6_p6_c5" num="5">
<linesub end="37191" start="37109">On higher-</linesub>
<linesub end="37258" start="37123">speed variants of Ethernet, the vulnerable time window is shorter.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p7" importance="should" num="7">
<clause id="s6_p7_c1" importance="should" num="1">
<linesub end="37321" start="37194">In the case where a Multicast DNS responder has good reason to</linesub>
<linesub end="37401" start="37260">believe that it will be the only responder on the link that will send</linesub>
<linesub end="37472" start="37333">a response (i.e., because it is able to answer every question in the</linesub>
<linesub end="37544" start="37405">query message, and for all of those answer records it has previously</linesub>
<linesub end="37616" start="37477">verified that the name, rrtype, and rrclass are unique on the link),</linesub>
<linesub end="37686" start="37549">it SHOULD NOT impose any random delay before responding, and SHOULD</linesub>
<linesub end="37743" start="37620">normally generate its response within at most 10 ms.</linesub>
</clause>
<clause id="s6_p7_c2" num="2">
<linesub end="37759" start="37674">In particular,</linesub>
<linesub end="37833" start="37692">this applies to responding to probe queries with the unicast-response</linesub>
<linesub end="37845" start="37765">bit set.</linesub>
</clause>
<clause id="s6_p7_c3" num="3">
<linesub end="37906" start="37775">Since receiving a probe query gives a clear indication that</linesub>
<linesub end="37979" start="37838">some other responder is planning to start using this name in the very</linesub>
<linesub end="38048" start="37911">near future, answering such probe queries to defend a unique record</linesub>
<linesub end="38108" start="37982">is a high priority and needs to be done without delay.</linesub>
</clause>
<clause id="s6_p7_c4" num="4">
<linesub end="38123" start="38038">A probe query</linesub>
<linesub end="38341" start="38208">can be distinguished from a normal query by the fact that a probe</linesub>
<linesub end="38404" start="38277">query contains a proposed record in the Authority Section that</linesub>
<linesub end="38480" start="38343">answers the question in the Question Section (for more details, see</linesub>
<linesub end="38511" start="38414">Section 8.2, "Simultaneous Probe Tiebreaking").</linesub>
</clause>
</paragraph>

<paragraph id="s6_p8" num="8">
<clause id="s6_p8_c1" num="1">
<linesub end="38605" start="38466">Responding without delay is appropriate for records like the address</linesub>
<linesub end="38665" start="38538">record for a particular host name, when the host name has been</linesub>
<linesub end="38696" start="38604">previously verified unique.</linesub>
</clause>
<clause id="s6_p8_c2" num="2">
<linesub end="38731" start="38633">Responding without delay is *not*</linesub>
<linesub end="38811" start="38670">appropriate for things like looking up PTR records used for DNS-Based</linesub>
<linesub end="38884" start="38743">Service Discovery [RFC6763], where a large number of responses may be</linesub>
<linesub end="38843" start="38816">anticipated.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p9" importance="should" num="9">
<clause id="s6_p9_c1" importance="should" num="1">
<linesub end="38968" start="38833">In any case where there may be multiple responses, such as queries</linesub>
<linesub end="39038" start="38903">where the answer is a member of a shared resource record set, each</linesub>
<linesub end="39100" start="38973">responder SHOULD delay its response by a random amount of time</linesub>
<linesub end="39172" start="39039">selected with uniform random distribution in the range 20-120 ms.</linesub>
</clause>
<clause id="s6_p9_c2" num="2">
<linesub end="39237" start="39108">The reason for requiring that the delay be at least 20 ms is to</linesub>
<linesub end="39310" start="39175">accommodate the situation where two or more query packets are sent</linesub>
<linesub end="39382" start="39245">back-to-back, because in that case we want a responder with answers</linesub>
<linesub end="39439" start="39316">to more than one of those queries to have the opportunity to</linesub>
<linesub end="39503" start="39380">aggregate all of its answers into a single response message.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p10" importance="should" num="10">
<clause id="s6_p10_c1" importance="should" num="1">
<linesub end="39566" start="39445">In the case where the query has the TC (truncated) bit set,</linesub>
<linesub end="39631" start="39508">indicating that subsequent Known-Answer packets will follow,</linesub>
<linesub end="39707" start="39572">responders SHOULD delay their responses by a random amount of time</linesub>
<linesub end="39783" start="39642">selected with uniform random distribution in the range 400-500 ms, to</linesub>
<linesub end="39846" start="39715">allow enough time for all the Known-Answer packets to arrive, as</linesub>
<linesub end="39916" start="39783">described in Section 7.2, "Multipacket Known-Answer Suppression".</linesub>
</clause>
</paragraph>

<paragraph id="s6_p11" importance="must" num="11">
<clause id="s6_p11_c1" importance="must" num="1">
<linesub end="39992" start="39853">The source UDP port in all Multicast DNS responses MUST be 5353 (the</linesub>
<linesub end="40027" start="39925">well-known port assigned to mDNS).</linesub>
</clause>
<clause id="s6_p11_c2" importance="must" num="2">
<linesub end="40058" start="39961">Multicast DNS implementations</linesub>
<linesub end="40131" start="39994">MUST silently ignore any Multicast DNS responses they receive where</linesub>
<linesub end="40132" start="40065">the source UDP port is not 5353.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p12" importance="must" num="12">
<clause id="s6_p12_c1" importance="must" num="1">
<linesub end="40243" start="40102">The destination UDP port in all Multicast DNS responses MUST be 5353,</linesub>
<linesub end="40298" start="40175">and the destination address MUST be the mDNS IPv4 link-local</linesub>
<linesub end="40380" start="40239">multicast address 224.0.0.251 or its IPv6 equivalent FF02::FB, except</linesub>
<linesub end="40439" start="40312">when generating a reply to a query that explicitly requested a</linesub>
<linesub end="40415" start="40378">unicast response:</linesub>
</clause>
</paragraph>

<paragraph id="s6_p13" num="13">
<clause id="s6_p13_c1" num="1">
<linesub end="40471" start="40403">* via the unicast-response bit,</linesub>
<linesub end="40553" start="40441">* by virtue of being a legacy query (Section 6.7), or</linesub>
<linesub end="40595" start="40501">* by virtue of being a direct unicast query.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p14" importance="must" num="14">
<clause id="s6_p14_c1" importance="must" num="1">
<linesub end="40691" start="40550">Except for these three specific cases, responses MUST NOT be sent via</linesub>
<linesub end="40744" start="40623">unicast, because then the "Passive Observation of Failures"</linesub>
<linesub end="40820" start="40686">mechanisms described in Section 10.5 would not work correctly.</linesub>
</clause>
<clause id="s6_p14_c2" num="2">
<linesub end="40827" start="40750">Other</linesub>
<linesub end="41054" start="40913">benefits of sending responses via multicast are discussed in Appendix</linesub>
<linesub end="41056" start="40986">D.</linesub>
</clause>
<clause id="s6_p14_c3" importance="must" num="3">
<linesub end="41119" start="40990">A Multicast DNS querier MUST only accept unicast responses if</linesub>
<linesub end="41188" start="41055">they answer a recently sent query (e.g., sent within the last two</linesub>
<linesub end="41246" start="41124">seconds) that explicitly requested unicast responses.</linesub>
</clause>
<clause id="s6_p14_c4" importance="must" num="4">
<linesub end="41259" start="41179">A Multicast</linesub>
<linesub end="41319" start="41194">DNS querier MUST silently ignore all other unicast responses.</linesub>
</clause>
</paragraph>

<paragraph id="s6_p15" importance="must" num="15">
<clause id="s6_p15_c1" importance="must" num="1">
<linesub end="41389" start="41260">To protect the network against excessive packet flooding due to</linesub>
<linesub end="41468" start="41327">software bugs or malicious attack, a Multicast DNS responder MUST NOT</linesub>
<linesub end="41541" start="41400">(except in the one special case of answering probe queries) multicast</linesub>
<linesub end="41610" start="41473">a record on a given interface until at least one second has elapsed</linesub>
<linesub end="41675" start="41544">since the last time that record was multicast on that particular</linesub>
<linesub end="41693" start="41612">interface.</linesub>
</clause>
<clause id="s6_p15_c2" num="2">
<linesub end="41751" start="41624">A legitimate querier on the network should have seen the</linesub>
<linesub end="41791" start="41684">previous transmission and cached it.</linesub>
</clause>
<clause id="s6_p15_c3" num="3">
<linesub end="41823" start="41722">A querier that did not receive</linesub>
<linesub end="41883" start="41756">and cache the previous transmission will retry its request and</linesub>
<linesub end="41919" start="41822">receive a subsequent response.</linesub>
</clause>
<clause id="s6_p15_c4" importance="must" num="4">
<linesub end="41953" start="41854">In the special case of answering</linesub>
<linesub end="42025" start="41890">probe queries, because of the limited time before the probing host</linesub>
<linesub end="42087" start="41960">will make its decision about whether or not to use the name, a</linesub>
<linesub end="42141" start="42026">Multicast DNS responder MUST respond quickly.</linesub>
</clause>
<clause id="s6_p15_c5" num="5">
<linesub end="42163" start="42073">In this special case</linesub>
<linesub end="42226" start="42097">only, when responding via multicast to a probe, a Multicast DNS</linesub>
<linesub end="42303" start="42164">responder is only required to delay its transmission as necessary to</linesub>
<linesub end="42375" start="42236">ensure an interval of at least 250 ms since the last time the record</linesub>
<linesub end="42375" start="42308">was multicast on that interface.</linesub>
</clause>
</paragraph>

</section>

<section id="s6.1" name="Negative Responses" num="6.1">
<paragraph id="s6.1_p1" num="1">
<clause id="s6.1_p1_c1" num="1">
<linesub end="42504" start="42371">In the early design of Multicast DNS it was assumed that explicit</linesub>
<linesub end="42548" start="42440">negative responses would never be needed.</linesub>
</clause>
<clause id="s6.1_p1_c2" num="2">
<linesub end="42571" start="42483">A host can assert the</linesub>
<linesub end="42639" start="42508">existence of the set of records that it claims to exist, and the</linesub>
<linesub end="42715" start="42576">union of all such sets on a link is the set of Multicast DNS records</linesub>
<linesub end="42743" start="42648">that exist on that link.</linesub>
</clause>
<clause id="s6.1_p1_c3" num="3">
<linesub end="42787" start="42674">Asserting the nonexistence of every record</linesub>
<linesub end="42853" start="42720">in the complement of that set -- i.e., all possible Multicast DNS</linesub>
<linesub end="42924" start="42789">records that could exist on this link but do not at this moment --</linesub>
<linesub end="42971" start="42859">was felt to be impractical and unnecessary.</linesub>
</clause>
<clause id="s6.1_p1_c4" num="4">
<linesub end="42994" start="42904">The nonexistence of a</linesub>
<linesub end="43068" start="42929">record would be ascertained by a querier querying for it and failing</linesub>
<linesub end="43142" start="43001">to receive a response from any of the hosts currently attached to the</linesub>
<linesub end="43087" start="43074">link.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p2" num="2">
<clause id="s6.1_p2_c1" num="1">
<linesub end="43209" start="43084">However, operational experience showed that explicit negative</linesub>
<linesub end="43252" start="43149">responses can sometimes be valuable.</linesub>
</clause>
<clause id="s6.1_p2_c2" num="2">
<linesub end="43280" start="43187">One such example is when a</linesub>
<linesub end="43356" start="43217">querier is querying for a AAAA record, and the host name in question</linesub>
<linesub end="43393" start="43289">has no associated IPv6 addresses.</linesub>
</clause>
<clause id="s6.1_p2_c3" num="3">
<linesub end="43428" start="43324">In this case, the responding host</linesub>
<linesub end="43502" start="43361">knows it currently has exclusive ownership of that name, and it knows</linesub>
<linesub end="43569" start="43434">that it currently does not have any IPv6 addresses, so an explicit</linesub>
<linesub end="43641" start="43504">negative response is preferable to the querier having to retransmit</linesub>
<linesub end="43706" start="43575">its query multiple times, and eventually give up with a timeout,</linesub>
<linesub end="43772" start="43643">before it can conclude that a given AAAA record does not exist.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p3" importance="must" num="3">
<clause id="s6.1_p3_c1" importance="must" num="1">
<linesub end="43998" start="43865">Any time a responder receives a query for a name for which it has</linesub>
<linesub end="44071" start="43934">verified exclusive ownership, for a type for which that name has no</linesub>
<linesub end="44144" start="44005">records, the responder MUST (except as allowed in (a) below) respond</linesub>
<linesub end="44210" start="44077">asserting the nonexistence of that record using a DNS NSEC record</linesub>
<linesub end="44228" start="44146">[RFC4034].</linesub>
</clause>
<clause id="s6.1_p3_c2" num="2">
<linesub end="44287" start="44158">In the case of Multicast DNS the NSEC record is not being</linesub>
<linesub end="44356" start="44219">used for its usual DNSSEC [RFC4033] security properties, but simply</linesub>
<linesub end="44429" start="44290">as a way of expressing which records do or do not exist with a given</linesub>
<linesub end="44375" start="44362">name.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p4" importance="may" num="4">
<clause id="s6.1_p4_c1" importance="may" num="1">
<linesub end="44511" start="44372">On receipt of a question for a particular name, rrtype, and rrclass,</linesub>
<linesub end="44573" start="44444">for which a responder does have one or more unique answers, the</linesub>
<linesub end="44646" start="44511">responder MAY also include an NSEC record in the Additional Record</linesub>
<linesub end="44716" start="44581">Section indicating the nonexistence of other rrtypes for that name</linesub>
<linesub end="44678" start="44651">and rrclass.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p5" importance="must" num="5">
<clause id="s6.1_p5_c1" importance="may" num="1">
<linesub end="44799" start="44668">Implementers working with devices with sufficient memory and CPU</linesub>
<linesub end="44875" start="44736">resources MAY choose to implement code to handle the full generality</linesub>
<linesub end="44949" start="44808">of the DNS NSEC record [RFC4034], including bitmaps up to 65,536 bits</linesub>
<linesub end="44952" start="44881">long.</linesub>
</clause>
<clause id="s6.1_p5_c2" importance="must" num="2">
<linesub end="45010" start="44888">To facilitate use by devices with limited memory and CPU</linesub>
<linesub end="45081" start="44948">resources, Multicast DNS queriers are only REQUIRED to be able to</linesub>
<linesub end="45129" start="45017">parse a restricted form of the DNS NSEC record.</linesub>
</clause>
<clause id="s6.1_p5_c3" importance="must" num="3">
<linesub end="45144" start="45066">All compliant</linesub>
<linesub end="45218" start="45083">Multicast DNS implementations MUST at least correctly generate and</linesub>
<linesub end="45276" start="45153">parse the restricted DNS NSEC record format described below:</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p6" num="6">
<clause id="s6.1_p6_c1" num="1">
<linesub end="45351" start="45221">o The 'Next Domain Name' field contains the record's own name.</linesub>
</clause>
<clause id="s6.1_p6_c2" num="2">
<linesub end="45416" start="45292">When used with name compression, this means that the 'Next</linesub>
<linesub end="45479" start="45359">Domain Name' field always takes exactly two bytes in the</linesub>
<linesub end="45448" start="45424">message.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p7" num="7">
<clause id="s6.1_p7_c1" num="1">
<linesub end="45520" start="45440">o The Type Bit Map block number is 0.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p8" num="8">
<clause id="s6.1_p8_c1" num="1">
<linesub end="45623" start="45485">o The Type Bit Map block length byte is a value in the range 1-32.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p9" num="9">
<clause id="s6.1_p9_c1" num="1">
<linesub end="45687" start="45559">o The Type Bit Map data is 1-32 bytes, as indicated by length</linesub>
<linesub end="45647" start="45629">byte.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p10" importance="must" num="10">
<clause id="s6.1_p10_c1" num="1">
<linesub end="45772" start="45639">Because this restricted form of the DNS NSEC record is limited to</linesub>
<linesub end="45843" start="45708">Type Bit Map block number zero, it cannot express the existence of</linesub>
<linesub end="45866" start="45778">rrtypes above 255.</linesub>
</clause>
<clause id="s6.1_p10_c2" importance="must" num="2">
<linesub end="45915" start="45798">Consequently, if a Multicast DNS responder were</linesub>
<linesub end="45984" start="45849">to have records with rrtypes above 255, it MUST NOT generate these</linesub>
<linesub end="46054" start="45919">restricted-form NSEC records for those names, since to do so would</linesub>
<linesub end="46120" start="45989">imply that the name has no records with rrtypes above 255, which</linesub>
<linesub end="46143" start="46057">would be false.</linesub>
</clause>
<clause id="s6.1_p10_c3" importance="must" num="3">
<linesub end="46196" start="46074">In such cases a Multicast DNS responder MUST either</linesub>
<linesub end="46270" start="46129">(a) emit no NSEC record for that name, or (b) emit a full NSEC record</linesub>
<linesub end="46335" start="46202">containing the appropriate Type Bit Map block(s) with the correct</linesub>
<linesub end="46385" start="46271">bits set for all the record types that exist.</linesub>
</clause>
<clause id="s6.1_p10_c4" num="4">
<linesub end="46406" start="46318">In practice this is</linesub>
<linesub end="46466" start="46341">not a significant limitation, since rrtypes above 255 are not</linesub>
<linesub end="46465" start="46406">currently in widespread use.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p11" importance="must" num="11">
<clause id="s6.1_p11_c1" importance="should" num="1">
<linesub end="46728" start="46591">If a Multicast DNS implementation receives an NSEC record where the</linesub>
<linesub end="46791" start="46662">'Next Domain Name' field is not the record's own name, then the</linesub>
<linesub end="46870" start="46729">implementation SHOULD ignore the 'Next Domain Name' field and process</linesub>
<linesub end="46911" start="46802">the remainder of the NSEC record as usual.</linesub>
</clause>
<clause id="s6.1_p11_c2" importance="must" num="2">
<linesub end="46933" start="46846">In Multicast DNS the</linesub>
<linesub end="47009" start="46870">'Next Domain Name' field is not currently used, but it could be used</linesub>
<linesub end="47077" start="46942">in a future version of this protocol, which is why a Multicast DNS</linesub>
<linesub end="47149" start="47012">implementation MUST NOT reject or ignore an NSEC record it receives</linesub>
<linesub end="47220" start="47083">just because it finds an unexpected value in the 'Next Domain Name'</linesub>
<linesub end="47169" start="47154">field.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p12" importance="must" num="12">
<clause id="s6.1_p12_c1" importance="may" num="1">
<linesub end="47304" start="47165">If a Multicast DNS implementation receives an NSEC record containing</linesub>
<linesub end="47378" start="47237">more than one Type Bit Map, or where the Type Bit Map block number is</linesub>
<linesub end="47445" start="47310">not zero, or where the block length is not in the range 1-32, then</linesub>
<linesub end="47519" start="47380">the Multicast DNS implementation MAY silently ignore the entire NSEC</linesub>
<linesub end="47527" start="47452">record.</linesub>
</clause>
<clause id="s6.1_p12_c2" importance="must" num="2">
<linesub end="47585" start="47461">A Multicast DNS implementation MUST NOT ignore an entire</linesub>
<linesub end="47662" start="47521">message just because that message contains one or more NSEC record(s)</linesub>
<linesub end="47715" start="47594">that the Multicast DNS implementation cannot parse.</linesub>
</clause>
<clause id="s6.1_p12_c3" num="3">
<linesub end="47731" start="47647">This provision</linesub>
<linesub end="47806" start="47665">is to allow future enhancements to the protocol to be introduced in a</linesub>
<linesub end="47879" start="47738">backwards-compatible way that does not break compatibility with older</linesub>
<linesub end="47874" start="47811">Multicast DNS implementations.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p13" importance="must" num="13">
<clause id="s6.1_p13_c1" importance="must" num="1">
<linesub end="47975" start="47846">To help differentiate these synthesized NSEC records (generated</linesub>
<linesub end="48042" start="47913">programmatically on-the-fly) from conventional Unicast DNS NSEC</linesub>
<linesub end="48119" start="47980">records (which actually exist in a signed DNS zone), the synthesized</linesub>
<linesub end="48193" start="48052">Multicast DNS NSEC records MUST NOT have the NSEC bit set in the Type</linesub>
<linesub end="48260" start="48125">Bit Map, whereas conventional Unicast DNS NSEC records do have the</linesub>
<linesub end="48224" start="48195">NSEC bit set.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p14" importance="should" num="14">
<clause id="s6.1_p14_c1" num="1">
<linesub end="48346" start="48213">The TTL of the NSEC record indicates the intended lifetime of the</linesub>
<linesub end="48373" start="48282">negative cache entry.</linesub>
</clause>
<clause id="s6.1_p14_c2" importance="should" num="2">
<linesub end="48419" start="48305">In general, the TTL given for an NSEC record</linesub>
<linesub end="48492" start="48353">SHOULD be the same as the TTL that the record would have had, had it</linesub>
<linesub end="48503" start="48425">existed.</linesub>
</clause>
<clause id="s6.1_p14_c3" num="3">
<linesub end="48562" start="48435">For example, the TTL for address records in Multicast DNS</linesub>
<linesub end="48627" start="48496">is typically 120 seconds (see Section 10), so the negative cache</linesub>
<linesub end="48705" start="48564">lifetime for an address record that does not exist should also be 120</linesub>
<linesub end="48656" start="48637">seconds.</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p15" importance="must" num="15">
<clause id="s6.1_p15_c1" importance="must" num="1">
<linesub end="48781" start="48650">A responder MUST only generate negative responses to queries for</linesub>
<linesub end="48859" start="48718">which it has legitimate ownership of the name, rrtype, and rrclass in</linesub>
<linesub end="48930" start="48791">question, and can legitimately assert that no record with that name,</linesub>
<linesub end="48961" start="48863">rrtype, and rrclass exists.</linesub>
</clause>
<clause id="s6.1_p15_c2" num="2">
<linesub end="49002" start="48892">A responder can assert that a specified</linesub>
<linesub end="49074" start="48935">rrtype does not exist for one of its names if it knows a priori that</linesub>
<linesub end="49136" start="49007">it has exclusive ownership of that name (e.g., names of reverse</linesub>
<linesub end="49207" start="49074">address mapping PTR records, which are derived from IP addresses,</linesub>
<linesub end="49284" start="49143">which should be unique on the local link) or if it previously claimed</linesub>
<linesub end="49353" start="49216">unique ownership of that name using probe queries for rrtype "ANY".</linesub>
</clause>
<clause id="s6.1_p15_c3" num="3">
<linesub end="49428" start="49287">(If it were to use probe queries for a specific rrtype, then it would</linesub>
<linesub end="49495" start="49360">only own the name for that rrtype, and could not assert that other</linesub>
<linesub end="49477" start="49430">rrtypes do not exist.)</linesub>
</clause>
</paragraph>

<paragraph id="s6.1_p16" num="16">
<clause id="s6.1_p16_c1" num="1">
<linesub end="49734" start="49609">The design rationale for this mechanism for encoding negative</linesub>
<linesub end="49767" start="49674">responses is discussed further in Appendix E.</linesub>
</clause>
</paragraph>

</section>

<section id="s6.2" name="Responding to Address Queries" num="6.2">
<paragraph id="s6.2_p1" importance="must" num="1">
<clause id="s6.2_p1_c1" importance="must" num="1">
<linesub end="49902" start="49761">When a Multicast DNS responder sends a Multicast DNS response message</linesub>
<linesub end="49967" start="49834">containing its own address records, it MUST include all addresses</linesub>
<linesub end="50040" start="49903">that are valid on the interface on which it is sending the message,</linesub>
<linesub end="50111" start="49974">and MUST NOT include addresses that are not valid on that interface</linesub>
<linesub end="50170" start="50045">(such as addresses that may be configured on the host's other</linesub>
<linesub end="50190" start="50110">interfaces).</linesub>
</clause>
<clause id="s6.2_p1_c2" num="2">
<linesub end="50243" start="50124">For example, if an interface has both an IPv6 link-</linesub>
<linesub end="50314" start="50179">local and an IPv6 routable address, both should be included in the</linesub>
<linesub end="50390" start="50249">response message so that queriers receive both and can make their own</linesub>
<linesub end="50417" start="50322">choice about which to use.</linesub>
</clause>
<clause id="s6.2_p1_c3" num="3">
<linesub end="50457" start="50350">This allows a querier that only has an</linesub>
<linesub end="50529" start="50392">IPv6 link-local address to connect to the link-local address, and a</linesub>
<linesub end="50604" start="50463">different querier that has an IPv6 routable address to connect to the</linesub>
<linesub end="50599" start="50536">IPv6 routable address instead.</linesub>
</clause>
</paragraph>

<paragraph id="s6.2_p2" importance="should" num="2">
<clause id="s6.2_p2_c1" importance="should" num="1">
<linesub end="50710" start="50571">When a Multicast DNS responder places an IPv4 or IPv6 address record</linesub>
<linesub end="50782" start="50643">(rrtype "A" or "AAAA") into a response message, it SHOULD also place</linesub>
<linesub end="50848" start="50715">any records of the other address type with the same name into the</linesub>
<linesub end="50905" start="50784">additional section, if there is space in the message.</linesub>
</clause>
<clause id="s6.2_p2_c2" num="2">
<linesub end="50917" start="50839">This is to</linesub>
<linesub end="50992" start="50853">provide fate sharing, so that all a device's addresses are delivered</linesub>
<linesub end="51062" start="50925">atomically in a single message, to reduce the risk that packet loss</linesub>
<linesub end="51135" start="50996">could cause a querier to receive only the IPv4 addresses and not the</linesub>
<linesub end="51131" start="51068">IPv6 addresses, or vice versa.</linesub>
</clause>
</paragraph>

<paragraph id="s6.2_p3" importance="should" num="3">
<clause id="s6.2_p3_c1" importance="should" num="1">
<linesub end="51230" start="51103">In the event that a device has only IPv4 addresses but no IPv6</linesub>
<linesub end="51308" start="51169">addresses, or vice versa, then the appropriate NSEC record SHOULD be</linesub>
<linesub end="51376" start="51241">placed into the additional section, so that queriers can know with</linesub>
<linesub end="51426" start="51311">certainty that the device has no addresses of that kind.</linesub>
</clause>
</paragraph>

<paragraph id="s6.2_p4" importance="must" num="4">
<clause id="s6.2_p4_c1" num="1">
<linesub end="51507" start="51372">Some Multicast DNS responders treat a physical interface with both</linesub>
<linesub end="51571" start="51442">IPv4 and IPv6 address as a single interface with two addresses.</linesub>
</clause>
<clause id="s6.2_p4_c2" importance="must" num="2">
<linesub end="51646" start="51509">Other Multicast DNS responders may treat this case as logically two</linesub>
<linesub end="51717" start="51580">interfaces (one with one or more IPv4 addresses, and the other with</linesub>
<linesub end="51784" start="51651">one or more IPv6 addresses), but responders that operate this way</linesub>
<linesub end="51861" start="51720">MUST NOT put the corresponding automatic NSEC records in replies they</linesub>
<linesub end="51932" start="51793">send (i.e., a negative IPv4 assertion in their IPv6 responses, and a</linesub>
<linesub end="52002" start="51865">negative IPv6 assertion in their IPv4 responses) because this would</linesub>
<linesub end="52075" start="51936">cause incorrect operation in responders on the network that work the</linesub>
<linesub end="52033" start="52008">former way.</linesub>
</clause>
</paragraph>

</section>

<section id="s6.3" name="Responding to Multiquestion Queries" num="6.3">
<paragraph id="s6.3_p1" importance="must" num="1">
<clause id="s6.3_p1_c1" importance="must" num="1">
<linesub end="52200" start="52067">Multicast DNS responders MUST correctly handle DNS query messages</linesub>
<linesub end="52269" start="52136">containing more than one question, by answering any or all of the</linesub>
<linesub end="52306" start="52205">questions to which they have answers.</linesub>
</clause>
<clause id="s6.3_p1_c2" importance="should" num="2">
<linesub end="52330" start="52244">Unlike single-question</linesub>
<linesub end="52556" start="52423">queries, where responding without delay is allowed in appropriate</linesub>
<linesub end="52623" start="52492">cases, for query messages containing more than one question, all</linesub>
<linesub end="52689" start="52560">(non-defensive) answers SHOULD be randomly delayed in the range</linesub>
<linesub end="52755" start="52627">20-120 ms, or 400-500 ms if the TC (truncated) bit is set.</linesub>
</clause>
<clause id="s6.3_p1_c3" num="3">
<linesub end="52764" start="52687">This is</linesub>
<linesub end="52827" start="52698">because when a query message contains more than one question, a</linesub>
<linesub end="52892" start="52765">Multicast DNS responder cannot generally be certain that other</linesub>
<linesub end="52962" start="52831">responders will not also be simultaneously generating answers to</linesub>
<linesub end="53009" start="52899">other questions in that query message.</linesub>
</clause>
<clause id="s6.3_p1_c4" num="4">
<linesub end="53040" start="52939">(Answers defending a name, in</linesub>
<linesub end="53113" start="52972">response to a probe for that name, are not subject to this delay rule</linesub>
<linesub end="53112" start="53045">and are still sent immediately.)</linesub>
</clause>
</paragraph>

</section>

<section id="s6.4" name="Response Aggregation" num="6.4">
<paragraph id="s6.4_p1" importance="should" num="1">
<clause id="s6.4_p1_c1" importance="should" num="1">
<linesub end="53229" start="53110">When possible, a responder SHOULD, for the sake of network</linesub>
<linesub end="53305" start="53172">efficiency, aggregate as many responses as possible into a single</linesub>
<linesub end="53341" start="53241">Multicast DNS response message.</linesub>
</clause>
<clause id="s6.4_p1_c2" importance="should" num="2">
<linesub end="53376" start="53274">For example, when a responder has</linesub>
<linesub end="53440" start="53311">several responses it plans to send, each delayed by a different</linesub>
<linesub end="53505" start="53378">interval, then earlier responses SHOULD be delayed by up to an</linesub>
<linesub end="53575" start="53444">additional 500 ms if that will permit them to be aggregated with</linesub>
<linesub end="53617" start="53512">other responses scheduled to go out a little later.</linesub>
</clause>
</paragraph>

</section>

<section id="s6.5" name="Wildcard Queries (qtype &quot;ANY&quot; and qclass &quot;ANY&quot;)" num="6.5">
<paragraph id="s6.5_p1" importance="must" num="1">
<clause id="s6.5_p1_c1" importance="must" num="1">
<linesub end="53754" start="53623">When responding to queries using qtype "ANY" (255) and/or qclass</linesub>
<linesub end="53832" start="53691">"ANY" (255), a Multicast DNS responder MUST respond with *ALL* of its</linesub>
<linesub end="53860" start="53764">records that match the query.</linesub>
</clause>
<clause id="s6.5_p1_c2" num="2">
<linesub end="53895" start="53795">This is subtly different from how</linesub>
<linesub end="53933" start="53832">qtype "ANY" and qclass "ANY" work in Unicast DNS.</linesub>
</clause>
</paragraph>

<paragraph id="s6.5_p2" num="2">
<clause id="s6.5_p2_c1" num="1">
<linesub end="54021" start="53886">A common misconception is that a Unicast DNS query for qtype "ANY"</linesub>
<linesub end="54078" start="53956">will elicit a response containing all matching records.</linesub>
</clause>
<clause id="s6.5_p2_c2" num="2">
<linesub end="54087" start="54013">This is</linesub>
<linesub end="54099" start="54024">incorrect.</linesub>
</clause>
<clause id="s6.5_p2_c3" num="3">
<linesub end="54151" start="54036">If there are any records that match the query, the</linesub>
<linesub end="54217" start="54090">response is required only to contain at least one of them, not</linesub>
<linesub end="54207" start="54156">necessarily all of them.</linesub>
</clause>
</paragraph>

<paragraph id="s6.5_p3" num="3">
<clause id="s6.5_p3_c1" num="1">
<linesub end="54314" start="54185">This somewhat surprising behavior is commonly seen with caching</linesub>
<linesub end="54353" start="54252">(i.e., "recursive") name servers.</linesub>
</clause>
<clause id="s6.5_p3_c2" num="2">
<linesub end="54385" start="54287">If a caching server receives a</linesub>
<linesub end="54458" start="54321">qtype "ANY" query for which it has at least one valid answer, it is</linesub>
<linesub end="54523" start="54392">allowed to return only those matching answers it happens to have</linesub>
<linesub end="54585" start="54460">already in its cache, and it is not required to reconsult the</linesub>
<linesub end="54666" start="54525">authoritative name server to check if there are any more records that</linesub>
<linesub end="54667" start="54598">also match the qtype "ANY" query.</linesub>
</clause>
</paragraph>

<paragraph id="s6.5_p4" num="4">
<clause id="s6.5_p4_c1" num="1">
<linesub end="54775" start="54636">For example, one might imagine that a query for qtype "ANY" for name</linesub>
<linesub end="54849" start="54708">"host.example.com" would return both the IPv4 (A) and the IPv6 (AAAA)</linesub>
<linesub end="54881" start="54781">address records for that host.</linesub>
</clause>
<clause id="s6.5_p4_c2" num="2">
<linesub end="54918" start="54813">In reality, what happens is that it</linesub>
<linesub end="54991" start="54852">depends on the history of what queries have been previously received</linesub>
<linesub end="55025" start="54924">by intervening caching servers.</linesub>
</clause>
<clause id="s6.5_p4_c3" num="3">
<linesub end="55061" start="54957">If a caching server has no records</linesub>
<linesub end="55134" start="54995">for "host.example.com", then it will consult another server (usually</linesub>
<linesub end="55361" start="55220">the authoritative name server for the name in question), and, in that</linesub>
<linesub end="55426" start="55293">case, it will typically return all IPv4 and IPv6 address records.</linesub>
</clause>
<clause id="s6.5_p4_c4" num="4">
<linesub end="55499" start="55362">However, if some other host has recently done a query for qtype "A"</linesub>
<linesub end="55570" start="55433">for name "host.example.com", so that the caching server already has</linesub>
<linesub end="55643" start="55504">IPv4 address records for "host.example.com" in its cache but no IPv6</linesub>
<linesub end="55717" start="55576">address records, then it will return only the IPv4 address records it</linesub>
<linesub end="55748" start="55649">already has cached, and no IPv6 address records.</linesub>
</clause>
</paragraph>

<paragraph id="s6.5_p5" importance="must" num="5">
<clause id="s6.5_p5_c1" num="1">
<linesub end="55831" start="55702">Multicast DNS does not share this property that qtype "ANY" and</linesub>
<linesub end="55902" start="55769">qclass "ANY" queries return some undefined subset of the matching</linesub>
<linesub end="55916" start="55838">records.</linesub>
</clause>
<clause id="s6.5_p5_c2" importance="must" num="2">
<linesub end="55975" start="55848">When responding to queries using qtype "ANY" (255) and/or</linesub>
<linesub end="56050" start="55909">qclass "ANY" (255), a Multicast DNS responder MUST respond with *ALL*</linesub>
<linesub end="56057" start="55982">of its records that match the query.</linesub>
</clause>
</paragraph>

</section>

<section id="s6.6" name="Cooperating Multicast DNS Responders" num="6.6">
<paragraph id="s6.6_p1" num="1">
<clause id="s6.6_p1_c1" num="1">
<linesub end="56206" start="56067">If a Multicast DNS responder ("A") observes some other Multicast DNS</linesub>
<linesub end="56274" start="56139">responder ("B") send a Multicast DNS response message containing a</linesub>
<linesub end="56350" start="56209">resource record with the same name, rrtype, and rrclass as one of A's</linesub>
<linesub end="56377" start="56282">resource records, but *different* rdata, then:</linesub>
</clause>
</paragraph>

<paragraph id="s6.6_p2" num="2">
<clause id="s6.6_p2_c1" num="1">
<linesub end="56462" start="56336">o If A's resource record is intended to be a shared resource</linesub>
<linesub end="56533" start="56405">record, then this is no conflict, and no action is required.</linesub>
</clause>
</paragraph>

<paragraph id="s6.6_p3" importance="must" num="3">
<clause id="s6.6_p3_c1" importance="must" num="1">
<linesub end="56605" start="56473">o If A's resource record is intended to be a member of a unique</linesub>
<linesub end="56681" start="56545">resource record set owned solely by that responder, then this is</linesub>
<linesub end="56740" start="56618">a conflict and MUST be handled as described in Section 9,</linesub>
<linesub end="56736" start="56684">"Conflict Resolution".</linesub>
</clause>
</paragraph>

<paragraph id="s6.6_p4" num="4">
<clause id="s6.6_p4_c1" num="1">
<linesub end="56850" start="56711">If a Multicast DNS responder ("A") observes some other Multicast DNS</linesub>
<linesub end="56918" start="56783">responder ("B") send a Multicast DNS response message containing a</linesub>
<linesub end="56994" start="56853">resource record with the same name, rrtype, and rrclass as one of A's</linesub>
<linesub end="57021" start="56926">resource records, and *identical* rdata, then:</linesub>
</clause>
</paragraph>

<paragraph id="s6.6_p5" num="5">
<clause id="s6.6_p5_c1" num="1">
<linesub end="57110" start="56980">o If the TTL of B's resource record given in the message is at</linesub>
<linesub end="57183" start="57051">least half the true TTL from A's point of view, then no action</linesub>
<linesub end="57154" start="57122">is required.</linesub>
</clause>
</paragraph>

<paragraph id="s6.6_p6" importance="must" num="6">
<clause id="s6.6_p6_c1" importance="must" num="1">
<linesub end="57276" start="57142">o If the TTL of B's resource record given in the message is less</linesub>
<linesub end="57349" start="57215">than half the true TTL from A's point of view, then A MUST mark</linesub>
<linesub end="57397" start="57287">its record to be announced via multicast.</linesub>
</clause>
<clause id="s6.6_p6_c2" num="2">
<linesub end="57417" start="57330">Queriers receiving</linesub>
<linesub end="57489" start="57357">the record from B would use the TTL given by B and, hence, may</linesub>
<linesub end="57536" start="57428">delete the record sooner than A expects.</linesub>
</clause>
<clause id="s6.6_p6_c3" num="3">
<linesub end="57556" start="57470">By sending its own</linesub>
<linesub end="57633" start="57497">multicast response correcting the TTL, A ensures that the record</linesub>
<linesub end="57654" start="57570">will be retained for the desired time.</linesub>
</clause>
</paragraph>

<paragraph id="s6.6_p7" num="7">
<clause id="s6.6_p7_c1" num="1">
<linesub end="57909" start="57768">These rules allow multiple Multicast DNS responders to offer the same</linesub>
<linesub end="57974" start="57841">data on the network (perhaps for fault-tolerance reasons) without</linesub>
<linesub end="57969" start="57910">conflicting with each other.</linesub>
</clause>
</paragraph>

</section>

<section id="s6.7" name="Legacy Unicast Responses" num="6.7">
<paragraph id="s6.7_p1" importance="must" num="1">
<clause id="s6.7_p1_c1" num="1">
<linesub end="58114" start="57975">If the source UDP port in a received Multicast DNS query is not port</linesub>
<linesub end="58178" start="58047">5353, this indicates that the querier originating the query is a</linesub>
<linesub end="58256" start="58115">simple resolver such as described in Section 5.1, "One-Shot Multicast</linesub>
<linesub end="58323" start="58188">DNS Queries", which does not fully implement all of Multicast DNS.</linesub>
</clause>
<clause id="s6.7_p1_c2" importance="must" num="2">
<linesub end="58393" start="58258">In this case, the Multicast DNS responder MUST send a UDP response</linesub>
<linesub end="58459" start="58328">directly back to the querier, via unicast, to the query packet's</linesub>
<linesub end="58486" start="58396">source IP address and port.</linesub>
</clause>
<clause id="s6.7_p1_c3" importance="must" num="3">
<linesub end="58519" start="58425">This unicast response MUST be a</linesub>
<linesub end="58601" start="58460">conventional unicast response as would be generated by a conventional</linesub>
<linesub end="58672" start="58533">Unicast DNS server; for example, it MUST repeat the query ID and the</linesub>
<linesub end="58710" start="58605">question given in the query message.</linesub>
</clause>
<clause id="s6.7_p1_c4" importance="must" num="4">
<linesub end="58740" start="58643">In addition, the cache-flush</linesub>
<linesub end="58816" start="58675">bit described in Section 10.2, "Announcements to Flush Outdated Cache</linesub>
<linesub end="58859" start="58748">Entries", MUST NOT be set in legacy unicast responses.</linesub>
</clause>
</paragraph>

<paragraph id="s6.7_p2" importance="should" num="2">
<clause id="s6.7_p2_c1" importance="should" num="1">
<linesub end="58948" start="58807">The resource record TTL given in a legacy unicast response SHOULD NOT</linesub>
<linesub end="59015" start="58880">be greater than ten seconds, even if the true TTL of the Multicast</linesub>
<linesub end="59044" start="58950">DNS resource record is higher.</linesub>
</clause>
<clause id="s6.7_p2_c2" num="2">
<linesub end="59075" start="58982">This is because Multicast DNS</linesub>
<linesub end="59144" start="59015">responders that fully participate in the protocol use the cache</linesub>
<linesub end="59217" start="59082">coherency mechanisms described in Section 10, "Resource Record TTL</linesub>
<linesub end="59285" start="59152">Values and Cache Coherency", to update and invalidate stale data.</linesub>
</clause>
<clause id="s6.7_p2_c3" num="3">
<linesub end="59360" start="59221">Were unicast responses sent to legacy resolvers to use the same high</linesub>
<linesub end="59424" start="59293">TTLs, these legacy resolvers, which do not implement these cache</linesub>
<linesub end="59500" start="59361">coherency mechanisms, could retain stale cached resource record data</linesub>
<linesub end="59502" start="59433">long after it is no longer valid.</linesub>
</clause>
</paragraph>

</section>

<section id="s7" name="Traffic Reduction" num="7">
<paragraph id="s7_p1" num="1">
<clause id="s7_p1_c1" num="1">
<linesub end="59631" start="59494">A variety of techniques are used to reduce the amount of traffic on</linesub>
<linesub end="59592" start="59565">the network.</linesub>
</clause>
</paragraph>

</section>

<section id="s7.1" name="Known-Answer Suppression" num="7.1">
<paragraph id="s7.1_p1" num="1">
<clause id="s7.1_p1_c1" num="1">
<linesub end="59753" start="59614">When a Multicast DNS querier sends a query to which it already knows</linesub>
<linesub end="59813" start="59686">some answers, it populates the Answer Section of the DNS query</linesub>
<linesub end="59809" start="59752">message with those answers.</linesub>
</clause>
</paragraph>

<paragraph id="s7.1_p2" num="2">
<clause id="s7.1_p2_c1" num="1">
<linesub end="59921" start="59784">Generally, this applies only to Shared records, not Unique records,</linesub>
<linesub end="59986" start="59855">since if a Multicast DNS querier already has at least one Unique</linesub>
<linesub end="60064" start="59923">record in its cache then it should not be expecting further different</linesub>
<linesub end="60133" start="59996">answers to this question, since the Unique record(s) it already has</linesub>
<linesub end="60204" start="60067">comprise the complete answer, so it has no reason to be sending the</linesub>
<linesub end="60221" start="60138">query at all.</linesub>
</clause>
<clause id="s7.1_p2_c2" num="2">
<linesub end="60275" start="60153">In contrast, having some Shared records in its cache</linesub>
<linesub end="60340" start="60209">does not necessarily imply that a Multicast DNS querier will not</linesub>
<linesub end="60571" start="60430">receive further answers to this query, and it is in this case that it</linesub>
<linesub end="60632" start="60503">is beneficial to use the Known-Answer list to suppress repeated</linesub>
<linesub end="60693" start="60570">sending of redundant answers that the querier already knows.</linesub>
</clause>
</paragraph>

<paragraph id="s7.1_p3" importance="must" num="3">
<clause id="s7.1_p3_c1" importance="must" num="1">
<linesub end="60770" start="60635">A Multicast DNS responder MUST NOT answer a Multicast DNS query if</linesub>
<linesub end="60840" start="60705">the answer it would give is already included in the Answer Section</linesub>
<linesub end="60894" start="60775">with an RR TTL at least half the correct value.</linesub>
</clause>
<clause id="s7.1_p3_c2" importance="must" num="2">
<linesub end="60916" start="60824">If the RR TTL of the</linesub>
<linesub end="60985" start="60848">answer as given in the Answer Section is less than half of the true</linesub>
<linesub end="61054" start="60919">RR TTL as known by the Multicast DNS responder, the responder MUST</linesub>
<linesub end="61128" start="60989">send an answer so as to update the querier's cache before the record</linesub>
<linesub end="61128" start="61061">becomes in danger of expiration.</linesub>
</clause>
</paragraph>

<paragraph id="s7.1_p4" importance="should" num="4">
<clause id="s7.1_p4_c1" num="1">
<linesub end="61235" start="61098">Because a Multicast DNS responder will respond if the remaining TTL</linesub>
<linesub end="61308" start="61169">given in the Known-Answer list is less than half the true TTL, it is</linesub>
<linesub end="61374" start="61241">superfluous for the querier to include such records in the Known-</linesub>
<linesub end="61392" start="61310">Answer list.</linesub>
</clause>
<clause id="s7.1_p4_c2" importance="should" num="2">
<linesub end="61447" start="61324">Therefore, a Multicast DNS querier SHOULD NOT include</linesub>
<linesub end="61514" start="61381">records in the Known-Answer list whose remaining TTL is less than</linesub>
<linesub end="61547" start="61450">half of their original TTL.</linesub>
</clause>
<clause id="s7.1_p4_c3" num="3">
<linesub end="61587" start="61479">Doing so would simply consume space in</linesub>
<linesub end="61658" start="61521">the message without achieving the goal of suppressing responses and</linesub>
<linesub end="61713" start="61592">would, therefore, be a pointless waste of network capacity.</linesub>
</clause>
</paragraph>

<paragraph id="s7.1_p5" importance="must" num="5">
<clause id="s7.1_p5_c1" importance="must" num="1">
<linesub end="61793" start="61656">A Multicast DNS querier MUST NOT cache resource records observed in</linesub>
<linesub end="61854" start="61727">the Known-Answer Section of other Multicast DNS queries.</linesub>
</clause>
<clause id="s7.1_p5_c2" num="2">
<linesub end="61866" start="61785">The Answer</linesub>
<linesub end="61922" start="61799">Section of Multicast DNS queries is not authoritative.</linesub>
</clause>
<clause id="s7.1_p5_c3" num="3">
<linesub end="61934" start="61855">By placing</linesub>
<linesub end="61998" start="61869">information in the Answer Section of a Multicast DNS query, the</linesub>
<linesub end="62073" start="61936">querier is stating that it *believes* the information to be true.</linesub>
</clause>
<clause id="s7.1_p5_c4" num="4">
<linesub end="62077" start="62003">It</linesub>
<linesub end="62123" start="62009">is not asserting that the information *is* true.</linesub>
</clause>
<clause id="s7.1_p5_c5" num="5">
<linesub end="62138" start="62059">Some of those</linesub>
<linesub end="62207" start="62076">records may have come from other hosts that are no longer on the</linesub>
<linesub end="62222" start="62144">network.</linesub>
</clause>
<clause id="s7.1_p5_c6" num="6">
<linesub end="62281" start="62154">Propagating that stale information to other Multicast DNS</linesub>
<linesub end="62308" start="62215">queriers on the network would not be helpful.</linesub>
</clause>
</paragraph>

</section>

<section id="s7.2" name="Multipacket Known-Answer Suppression" num="7.2">
<paragraph id="s7.2_p1" importance="must" num="1">
<clause id="s7.2_p1_c1" num="1">
<linesub end="62448" start="62309">Sometimes a Multicast DNS querier will already have too many answers</linesub>
<linesub end="62505" start="62381">to fit in the Known-Answer Section of its query packets.</linesub>
</clause>
<clause id="s7.2_p1_c2" num="2">
<linesub end="62514" start="62439">In this</linesub>
<linesub end="62591" start="62450">case, it should issue a Multicast DNS query containing a question and</linesub>
<linesub end="62633" start="62523">as many Known-Answer records as will fit.</linesub>
</clause>
<clause id="s7.2_p1_c3" importance="must" num="3">
<linesub end="62658" start="62566">It MUST then set the TC</linesub>
<linesub end="62715" start="62593">(Truncated) bit in the header before sending the query.</linesub>
</clause>
<clause id="s7.2_p1_c4" importance="must" num="4">
<linesub end="62724" start="62650">It MUST</linesub>
<linesub end="62802" start="62661">immediately follow the packet with another query packet containing no</linesub>
<linesub end="62861" start="62734">questions and as many more Known-Answer records as will fit.</linesub>
</clause>
<clause id="s7.2_p1_c5" num="5">
<linesub end="62865" start="62796">If</linesub>
<linesub end="62939" start="62802">there are still too many records remaining to fit in the packet, it</linesub>
<linesub end="63000" start="62873">again sets the TC bit and continues until all the Known-Answer</linesub>
<linesub end="62988" start="62939">records have been sent.</linesub>
</clause>
</paragraph>

<paragraph id="s7.2_p2" importance="must" num="2">
<clause id="s7.2_p2_c1" num="1">
<linesub end="63102" start="62967">A Multicast DNS responder seeing a Multicast DNS query with the TC</linesub>
<linesub end="63172" start="63037">bit set defers its response for a time period randomly selected in</linesub>
<linesub end="63201" start="63107">the interval 400-500 ms.</linesub>
</clause>
<clause id="s7.2_p2_c2" num="2">
<linesub end="63244" start="63133">This gives the Multicast DNS querier time</linesub>
<linesub end="63301" start="63178">to send additional Known-Answer packets before the responder</linesub>
<linesub end="63472" start="63395">responds.</linesub>
</clause>
<clause id="s7.2_p2_c3" importance="must" num="3">
<linesub end="63528" start="63406">If the responder sees any of its answers listed in the</linesub>
<linesub end="63601" start="63464">Known-Answer lists of subsequent packets from the querying host, it</linesub>
<linesub end="63670" start="63535">MUST delete that answer from the list of answers it is planning to</linesub>
<linesub end="63740" start="63605">give (provided that no other host on the network has also issued a</linesub>
<linesub end="63796" start="63675">query for that record and is waiting to receive an answer).</linesub>
</clause>
</paragraph>

<paragraph id="s7.2_p3" importance="should" num="3">
<clause id="s7.2_p3_c1" importance="should" num="1">
<linesub end="63880" start="63739">If the responder receives additional Known-Answer packets with the TC</linesub>
<linesub end="63953" start="63812">bit set, it SHOULD extend the delay as necessary to ensure a pause of</linesub>
<linesub end="64018" start="63885">400-500 ms after the last such packet before it sends its answer.</linesub>
</clause>
<clause id="s7.2_p3_c2" num="2">
<linesub end="64085" start="63954">This opens the potential risk that a continuous stream of Known-</linesub>
<linesub end="64147" start="64022">Answer packets could, theoretically, prevent a responder from</linesub>
<linesub end="64177" start="64087">answering indefinitely.</linesub>
</clause>
<clause id="s7.2_p3_c3" num="3">
<linesub end="64218" start="64112">In practice, answers are never actually</linesub>
<linesub end="64296" start="64155">delayed significantly, and should a situation arise where significant</linesub>
<linesub end="64365" start="64228">delays did happen, that would be a scenario where the network is so</linesub>
<linesub end="64438" start="64299">overloaded that it would be desirable to err on the side of caution.</linesub>
</clause>
<clause id="s7.2_p3_c4" num="4">
<linesub end="64504" start="64371">The consequence of delaying an answer may be that it takes a user</linesub>
<linesub end="64579" start="64440">longer than usual to discover all the services on the local network;</linesub>
<linesub end="64651" start="64512">in contrast, the consequence of incorrectly answering before all the</linesub>
<linesub end="64715" start="64584">Known-Answer packets have been received would be wasted capacity</linesub>
<linesub end="64781" start="64652">sending unnecessary answers on an already overloaded network.</linesub>
</clause>
<clause id="s7.2_p3_c5" num="5">
<linesub end="64785" start="64715">In</linesub>
<linesub end="64862" start="64721">this (rare) situation, sacrificing speed to preserve reliable network</linesub>
<linesub end="64863" start="64794">operation is the right trade-off.</linesub>
</clause>
</paragraph>

</section>

<section id="s7.3" name="Duplicate Question Suppression" num="7.3">
<paragraph id="s7.3_p1" importance="should" num="1">
<clause id="s7.3_p1_c1" importance="should" num="1">
<linesub end="65003" start="64870">If a host is planning to transmit (or retransmit) a query, and it</linesub>
<linesub end="65072" start="64939">sees another host on the network send a query containing the same</linesub>
<linesub end="65143" start="65008">"QM" question, and the Known-Answer Section of that query does not</linesub>
<linesub end="65209" start="65078">contain any records that this host would not also put in its own</linesub>
<linesub end="65281" start="65146">Known-Answer Section, then this host SHOULD treat its own query as</linesub>
<linesub end="65305" start="65216">having been sent.</linesub>
</clause>
<clause id="s7.3_p1_c2" num="2">
<linesub end="65357" start="65235">When multiple queriers on the network are querying</linesub>
<linesub end="65424" start="65289">for the same resource records, there is no need for them to all be</linesub>
<linesub end="65434" start="65359">repeatedly asking the same question.</linesub>
</clause>
</paragraph>

</section>

<section id="s7.4" name="Duplicate Answer Suppression" num="7.4">
<paragraph id="s7.4_p1" importance="should" num="1">
<clause id="s7.4_p1_c1" importance="should" num="1">
<linesub end="65575" start="65436">If a host is planning to send an answer, and it sees another host on</linesub>
<linesub end="65635" start="65508">the network send a response message containing the same answer</linesub>
<linesub end="65715" start="65574">record, and the TTL in that record is not less than the TTL this host</linesub>
<linesub end="65776" start="65647">would have given, then this host SHOULD treat its own answer as</linesub>
<linesub end="65849" start="65714">having been sent, and not also send an identical answer itself.</linesub>
</clause>
<clause id="s7.4_p1_c2" num="2">
<linesub end="65855" start="65779">When</linesub>
<linesub end="65922" start="65787">multiple responders on the network have the same data, there is no</linesub>
<linesub end="65924" start="65857">need for all of them to respond.</linesub>
</clause>
</paragraph>

<paragraph id="s7.4_p2" num="2">
<clause id="s7.4_p2_c1" num="1">
<linesub end="66188" start="66051">The opportunity for duplicate answer suppression occurs when a host</linesub>
<linesub end="66259" start="66122">has received a query, and is delaying its response for some pseudo-</linesub>
<linesub end="66316" start="66193">random interval up to 500 ms, as described elsewhere in this</linesub>
<linesub end="66396" start="66257">document, and then, before the host sends its response, it sees some</linesub>
<linesub end="66470" start="66329">other host on the network send a response message containing the same</linesub>
<linesub end="66433" start="66402">answer record.</linesub>
</clause>
</paragraph>

<paragraph id="s7.4_p3" num="3">
<clause id="s7.4_p3_c1" num="1">
<linesub end="66560" start="66421">This feature is particularly useful when Multicast DNS Proxy Servers</linesub>
<linesub end="66630" start="66493">are in use, where there could be more than one proxy on the network</linesub>
<linesub end="66695" start="66564">giving Multicast DNS answers on behalf of some other host (e.g.,</linesub>
<linesub end="66757" start="66632">because that other host is currently asleep and is not itself</linesub>
<linesub end="66746" start="66697">responding to queries).</linesub>
</clause>
</paragraph>

</section>

<section id="s8" name="Probing and Announcing on Startup" num="8">
<paragraph id="s8_p1" num="1">
<clause id="s8_p1_c1" num="1">
<linesub end="66901" start="66764">Typically a Multicast DNS responder should have, at the very least,</linesub>
<linesub end="66950" start="66835">address records for all of its active interfaces.</linesub>
</clause>
<clause id="s8_p1_c2" num="2">
<linesub end="66964" start="66886">Creating and</linesub>
<linesub end="67039" start="66902">advertising an HINFO record on each interface as well can be useful</linesub>
<linesub end="67028" start="66973">to network administrators.</linesub>
</clause>
</paragraph>

<paragraph id="s8_p2" importance="must" num="2">
<clause id="s8_p2_c1" importance="must" num="1">
<linesub end="67139" start="67004">Whenever a Multicast DNS responder starts up, wakes up from sleep,</linesub>
<linesub end="67215" start="67074">receives an indication of a network interface "Link Change" event, or</linesub>
<linesub end="67280" start="67147">has any other reason to believe that its network connectivity may</linesub>
<linesub end="67351" start="67216">have changed in some relevant way, it MUST perform the two startup</linesub>
<linesub end="67417" start="67286">steps below: Probing (Section 8.1) and Announcing (Section 8.3).</linesub>
</clause>
</paragraph>

</section>

<section id="s8.1" name="Probing" num="8.1">
<paragraph id="s8.1_p1" importance="must" num="1">
<clause id="s8.1_p1_c1" importance="must" num="1">
<linesub end="67511" start="67370">The first startup step is that, for all those resource records that a</linesub>
<linesub end="67578" start="67443">Multicast DNS responder desires to be unique on the local link, it</linesub>
<linesub end="67654" start="67513">MUST send a Multicast DNS query asking for those resource records, to</linesub>
<linesub end="67694" start="67586">see if any of them are already in use.</linesub>
</clause>
<clause id="s8.1_p1_c2" num="2">
<linesub end="67723" start="67626">The primary example of this</linesub>
<linesub end="67792" start="67657">is a host's address records, which map its unique host name to its</linesub>
<linesub end="67832" start="67727">unique IPv4 and/or IPv6 addresses.</linesub>
</clause>
<clause id="s8.1_p1_c3" importance="should" num="3">
<linesub end="67866" start="67763">All probe queries SHOULD be done</linesub>
<linesub end="67934" start="67799">using the desired resource record name and class (usually class 1,</linesub>
<linesub end="68004" start="67869">"Internet"), and query type "ANY" (255), to elicit answers for all</linesub>
<linesub end="68043" start="67939">types of records with that name.</linesub>
</clause>
<clause id="s8.1_p1_c4" num="4">
<linesub end="68080" start="67973">This allows a single question to be</linesub>
<linesub end="68147" start="68012">used in place of several questions, which is more efficient on the</linesub>
<linesub end="68159" start="68082">network.</linesub>
</clause>
<clause id="s8.1_p1_c5" num="5">
<linesub end="68217" start="68092">It also allows a host to verify exclusive ownership of a</linesub>
<linesub end="68278" start="68152">name for all rrtypes, which is desirable in most cases.</linesub>
</clause>
<clause id="s8.1_p1_c6" num="6">
<linesub end="68291" start="68209">It would be</linesub>
<linesub end="68347" start="68224">confusing, for example, if one host owned the "A" record for</linesub>
<linesub end="68421" start="68288">"myhost.local.", but a different host owned the "AAAA" record for</linesub>
<linesub end="68380" start="68357">that name.</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p2" num="2">
<clause id="s8.1_p2_c1" num="1">
<linesub end="68668" start="68529">The ability to place more than one question in a Multicast DNS query</linesub>
<linesub end="68738" start="68601">is useful here, because it can allow a host to use a single message</linesub>
<linesub end="68797" start="68672">to probe for all of its resource records instead of needing a</linesub>
<linesub end="68832" start="68737">separate message for each.</linesub>
</clause>
<clause id="s8.1_p2_c2" num="2">
<linesub end="68872" start="68765">For example, a host can simultaneously</linesub>
<linesub end="68934" start="68807">probe for uniqueness of its "A" record and all its SRV records</linesub>
<linesub end="68948" start="68873">[RFC6763] in the same query message.</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p3" num="3">
<clause id="s8.1_p3_c1" num="1">
<linesub end="69053" start="68914">When ready to send its Multicast DNS probe packet(s) the host should</linesub>
<linesub end="69121" start="68986">first wait for a short random delay time, uniformly distributed in</linesub>
<linesub end="69145" start="69056">the range 0-250 ms.</linesub>
</clause>
<clause id="s8.1_p3_c2" num="2">
<linesub end="69193" start="69077">This random delay is to guard against the case</linesub>
<linesub end="69256" start="69127">where several devices are powered on simultaneously, or several</linesub>
<linesub end="69331" start="69194">devices are connected to an Ethernet hub, which is then powered on,</linesub>
<linesub end="69396" start="69265">or some other external event happens that might cause a group of</linesub>
<linesub end="69412" start="69333">hosts to all send synchronized probes.</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p4" num="4">
<clause id="s8.1_p4_c1" num="1">
<linesub end="69511" start="69376">250 ms after the first query, the host should send a second; then,</linesub>
<linesub end="69544" start="69446">250 ms after that, a third.</linesub>
</clause>
<clause id="s8.1_p4_c2" num="2">
<linesub end="69585" start="69475">If, by 250 ms after the third probe, no</linesub>
<linesub end="69657" start="69518">conflicting Multicast DNS responses have been received, the host may</linesub>
<linesub end="69692" start="69590">move to the next step, announcing.</linesub>
</clause>
<clause id="s8.1_p4_c3" num="3">
<linesub end="69723" start="69626">(Note that probing is the one</linesub>
<linesub end="69790" start="69659">exception from the normal rule that there should be at least one</linesub>
<linesub end="69860" start="69727">second between repetitions of the same question, and the interval</linesub>
<linesub end="69909" start="69796">between subsequent repetitions should at least double.)</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p5" importance="must" num="5">
<clause id="s8.1_p5_c1" importance="must" num="1">
<linesub end="69989" start="69856">When sending probe queries, a host MUST NOT consult its cache for</linesub>
<linesub end="70015" start="69925">potential answers.</linesub>
</clause>
<clause id="s8.1_p5_c2" num="2">
<linesub end="70066" start="69945">Only conflicting Multicast DNS responses received</linesub>
<linesub end="70129" start="69998">"live" from the network are considered valid for the purposes of</linesub>
<linesub end="70173" start="70066">determining whether probing has succeeded or failed.</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p6" importance="should" num="6">
<clause id="s8.1_p6_c1" num="1">
<linesub end="70248" start="70123">In order to allow services to announce their presence without</linesub>
<linesub end="70327" start="70188">unreasonable delay, the time window for probing is intentionally set</linesub>
<linesub end="70339" start="70260">quite short.</linesub>
</clause>
<clause id="s8.1_p6_c2" num="2">
<linesub end="70391" start="70274">As a result of this, from the time the first probe</linesub>
<linesub end="70461" start="70328">packet is sent, another device on the network using that name has</linesub>
<linesub end="70506" start="70397">just 750 ms to respond to defend its name.</linesub>
</clause>
<clause id="s8.1_p6_c3" num="3">
<linesub end="70528" start="70441">On networks that are</linesub>
<linesub end="70596" start="70465">slow, or busy, or both, it is possible for round-trip latency to</linesub>
<linesub end="70670" start="70533">account for a few hundred milliseconds, and software delays in slow</linesub>
<linesub end="70709" start="70604">devices can add additional delay.</linesub>
</clause>
<clause id="s8.1_p6_c4" importance="should" num="4">
<linesub end="70745" start="70639">Hence, it is important that when a</linesub>
<linesub end="70816" start="70677">device receives a probe query for a name that it is currently using,</linesub>
<linesub end="70886" start="70749">it SHOULD generate its response to defend that name immediately and</linesub>
<linesub end="70922" start="70820">send it as quickly as possible.</linesub>
</clause>
<clause id="s8.1_p6_c5" num="5">
<linesub end="70959" start="70853">The usual rules about random delays</linesub>
<linesub end="71025" start="70892">before responding, to avoid sudden bursts of simultaneous answers</linesub>
<linesub end="71096" start="70961">from different hosts, do not apply here since normally at most one</linesub>
<linesub end="71149" start="71031">host should ever respond to a given probe question.</linesub>
</clause>
<clause id="s8.1_p6_c6" num="6">
<linesub end="71162" start="71084">Even when a</linesub>
<linesub end="71238" start="71099">single DNS query message contains multiple probe questions, it would</linesub>
<linesub end="71310" start="71171">be unusual for that message to elicit a defensive response from more</linesub>
<linesub end="71331" start="71243">than one other host.</linesub>
</clause>
<clause id="s8.1_p6_c7" importance="should" num="7">
<linesub end="71376" start="71265">Because of the mDNS multicast rate-limiting</linesub>
<linesub end="71607" start="71468">rules, the probes SHOULD be sent as "QU" questions with the unicast-</linesub>
<linesub end="71675" start="71540">response bit set, to allow a defending host to respond immediately</linesub>
<linesub end="71745" start="71610">via unicast, instead of potentially having to wait before replying</linesub>
<linesub end="71711" start="71680">via multicast.</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p7" importance="must" num="7">
<clause id="s8.1_p7_c1" importance="must" num="1">
<linesub end="71834" start="71699">During probing, from the time the first probe packet is sent until</linesub>
<linesub end="71896" start="71769">250 ms after the third probe, if any conflicting Multicast DNS</linesub>
<linesub end="71960" start="71835">response is received, then the probing host MUST defer to the</linesub>
<linesub end="72033" start="71900">existing host, and SHOULD choose new names for some or all of its</linesub>
<linesub end="72070" start="71969">resource records as appropriate.</linesub>
</clause>
<clause id="s8.1_p7_c2" importance="must" num="2">
<linesub end="72104" start="72003">Apparently conflicting Multicast</linesub>
<linesub end="72176" start="72039">DNS responses received *before* the first probe packet is sent MUST</linesub>
<linesub end="72251" start="72110">be silently ignored (see discussion of stale probe packets in Section</linesub>
<linesub end="72301" start="72183">8.2, "Simultaneous Probe Tiebreaking", below).</linesub>
</clause>
<clause id="s8.1_p7_c3" importance="must" num="3">
<linesub end="72324" start="72231">In the case of a host</linesub>
<linesub end="72385" start="72256">probing using query type "ANY" as recommended above, any answer</linesub>
<linesub end="72464" start="72323">containing a record with that name, of any type, MUST be considered a</linesub>
<linesub end="72489" start="72396">conflicting response and handled accordingly.</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p8" importance="must" num="8">
<clause id="s8.1_p8_c1" importance="must" num="1">
<linesub end="72579" start="72446">If fifteen conflicts occur within any ten-second period, then the</linesub>
<linesub end="72636" start="72515">host MUST wait at least five seconds before each successive</linesub>
<linesub end="72674" start="72578">additional probe attempt.</linesub>
</clause>
<clause id="s8.1_p8_c2" num="2">
<linesub end="72717" start="72605">This is to help ensure that, in the event</linesub>
<linesub end="72791" start="72650">of software bugs or other unanticipated problems, errant hosts do not</linesub>
<linesub end="72859" start="72723">flood the network with a continuous stream of multicast traffic.</linesub>
</clause>
<clause id="s8.1_p8_c3" num="3">
<linesub end="72864" start="72789">For</linesub>
<linesub end="72933" start="72796">very simple devices, a valid way to comply with this requirement is</linesub>
<linesub end="73000" start="72867">to always wait five seconds after any failed probe attempt before</linesub>
<linesub end="72965" start="72936">trying again.</linesub>
</clause>
</paragraph>

<paragraph id="s8.1_p9" importance="should" num="9">
<clause id="s8.1_p9_c1" importance="should" num="1">
<linesub end="73091" start="72954">If a responder knows by other means that its unique resource record</linesub>
<linesub end="73162" start="73025">set name, rrtype, and rrclass cannot already be in use by any other</linesub>
<linesub end="73231" start="73096">responder on the network, then it SHOULD skip the probing step for</linesub>
<linesub end="73259" start="73166">that resource record set.</linesub>
</clause>
<clause id="s8.1_p9_c2" num="2">
<linesub end="73299" start="73193">For example, when creating the reverse</linesub>
<linesub end="73372" start="73235">address mapping PTR records, the host can reasonably assume that no</linesub>
<linesub end="73439" start="73306">other host will be trying to create those same PTR records, since</linesub>
<linesub end="73510" start="73375">that would imply that the two hosts were trying to use the same IP</linesub>
<linesub end="73584" start="73445">address, and if that were the case, the two hosts would be suffering</linesub>
<linesub end="73648" start="73517">communication problems beyond the scope of what Multicast DNS is</linesub>
<linesub end="73673" start="73585">designed to solve.</linesub>
</clause>
<clause id="s8.1_p9_c3" importance="should" num="3">
<linesub end="73722" start="73605">Similarly, if a responder is acting as a proxy,</linesub>
<linesub end="73789" start="73656">taking over from another Multicast DNS responder that has already</linesub>
<linesub end="73856" start="73725">verified the uniqueness of the record, then the proxy SHOULD NOT</linesub>
<linesub end="73880" start="73793">repeat the probing step for those records.</linesub>
</clause>
</paragraph>

</section>

<section id="s8.2" name="Simultaneous Probe Tiebreaking" num="8.2">
<paragraph id="s8.2_p1" num="1">
<clause id="s8.2_p1_c1" num="1">
<linesub end="74003" start="73878">The astute reader will observe that there is a race condition</linesub>
<linesub end="74050" start="73943">inherent in the previous description.</linesub>
</clause>
<clause id="s8.2_p1_c2" num="2">
<linesub end="74080" start="73982">If two hosts are probing for</linesub>
<linesub end="74149" start="74014">the same name simultaneously, neither will receive any response to</linesub>
<linesub end="74217" start="74084">the probe, and the hosts could incorrectly conclude that they may</linesub>
<linesub end="74249" start="74153">both proceed to use the name.</linesub>
</clause>
<clause id="s8.2_p1_c3" num="3">
<linesub end="74284" start="74184">To break this symmetry, each host</linesub>
<linesub end="74356" start="74221">populates the query message's Authority Section with the record or</linesub>
<linesub end="74583" start="74444">records with the rdata that it would be proposing to use, should its</linesub>
<linesub end="74610" start="74516">probing be successful.</linesub>
</clause>
<clause id="s8.2_p1_c4" num="4">
<linesub end="74657" start="74540">The Authority Section is being used here in a</linesub>
<linesub end="74728" start="74589">way analogous to the way it is used as the "Update Section" in a DNS</linesub>
<linesub end="74734" start="74661">Update message [RFC2136] [RFC3007].</linesub>
</clause>
</paragraph>

<paragraph id="s8.2_p2" num="2">
<clause id="s8.2_p2_c1" num="1">
<linesub end="74838" start="74701">When a host is probing for a group of related records with the same</linesub>
<linesub end="74913" start="74772">name (e.g., the SRV and TXT record describing a DNS-SD service), only</linesub>
<linesub end="74986" start="74845">a single question need be placed in the Question Section, since query</linesub>
<linesub end="75055" start="74918">type "ANY" (255) is used, which will elicit answers for all records</linesub>
<linesub end="75073" start="74989">with that name.</linesub>
</clause>
<clause id="s8.2_p2_c2" num="2">
<linesub end="75124" start="75006">However, for tiebreaking to work correctly in all</linesub>
<linesub end="75188" start="75059">cases, the Authority Section must contain *all* the records and</linesub>
<linesub end="75215" start="75126">proposed rdata being probed for uniqueness.</linesub>
</clause>
</paragraph>

<paragraph id="s8.2_p3" num="3">
<clause id="s8.2_p3_c1" num="1">
<linesub end="75309" start="75174">When a host that is probing for a record sees another host issue a</linesub>
<linesub end="75383" start="75244">query for the same record, it consults the Authority Section of that</linesub>
<linesub end="75391" start="75316">query.</linesub>
</clause>
<clause id="s8.2_p3_c2" num="2">
<linesub end="75451" start="75324">If it finds any resource record(s) there which answers the</linesub>
<linesub end="75523" start="75386">query, then it compares the data of that (those) resource record(s)</linesub>
<linesub end="75556" start="75457">with its own tentative data.</linesub>
</clause>
<clause id="s8.2_p3_c3" num="3">
<linesub end="75596" start="75487">We consider first the simple case of a</linesub>
<linesub end="75670" start="75529">host probing for a single record, receiving a simultaneous probe from</linesub>
<linesub end="75718" start="75602">another host also probing for a single record.</linesub>
</clause>
<clause id="s8.2_p3_c4" num="4">
<linesub end="75739" start="75650">The two records are</linesub>
<linesub end="75795" start="75673">compared and the lexicographically later data wins.</linesub>
</clause>
<clause id="s8.2_p3_c5" num="5">
<linesub end="75812" start="75726">This means that</linesub>
<linesub end="75880" start="75745">if the host finds that its own data is lexicographically later, it</linesub>
<linesub end="75922" start="75815">simply ignores the other host's probe.</linesub>
</clause>
<clause id="s8.2_p3_c6" num="6">
<linesub end="75950" start="75855">If the host finds that its</linesub>
<linesub end="76024" start="75885">own data is lexicographically earlier, then it defers to the winning</linesub>
<linesub end="76094" start="75957">host by waiting one second, and then begins probing for this record</linesub>
<linesub end="76105" start="76028">again.</linesub>
</clause>
<clause id="s8.2_p3_c7" num="7">
<linesub end="76167" start="76036">The logic for waiting one second and then trying again is to</linesub>
<linesub end="76241" start="76100">guard against stale probe packets on the network (possibly even stale</linesub>
<linesub end="76302" start="76173">probe packets sent moments ago by this host itself, before some</linesub>
<linesub end="76381" start="76240">configuration change, which may be echoed back after a short delay by</linesub>
<linesub end="76432" start="76313">some Ethernet switches and some 802.11 base stations).</linesub>
</clause>
<clause id="s8.2_p3_c8" num="8">
<linesub end="76440" start="76369">If the</linesub>
<linesub end="76520" start="76379">winning simultaneous probe was from a real other host on the network,</linesub>
<linesub end="76587" start="76452">then after one second it will have completed its probing, and will</linesub>
<linesub end="76615" start="76522">answer subsequent probes.</linesub>
</clause>
<clause id="s8.2_p3_c9" num="9">
<linesub end="76655" start="76549">If the apparently winning simultaneous</linesub>
<linesub end="76732" start="76591">probe was in fact just an old stale packet on the network (maybe from</linesub>
<linesub end="76805" start="76664">the host itself), then when it retries its probing in one second, its</linesub>
<linesub end="76874" start="76737">probes will go unanswered, and it will successfully claim the name.</linesub>
</clause>
</paragraph>

<paragraph id="s8.2_p4" num="4">
<clause id="s8.2_p4_c1" num="1">
<linesub end="76948" start="76809">The determination of "lexicographically later" is performed by first</linesub>
<linesub end="77018" start="76881">comparing the record class (excluding the cache-flush bit described</linesub>
<linesub end="77087" start="76952">in Section 10.2), then the record type, then raw comparison of the</linesub>
<linesub end="77161" start="77022">binary content of the rdata without regard for meaning or structure.</linesub>
</clause>
<clause id="s8.2_p4_c2" num="2">
<linesub end="77231" start="77094">If the record classes differ, then the numerically greater class is</linesub>
<linesub end="77274" start="77165">considered "lexicographically later".</linesub>
</clause>
<clause id="s8.2_p4_c3" num="3">
<linesub end="77306" start="77204">Otherwise, if the record types</linesub>
<linesub end="77351" start="77238">differ, then the numerically greater type is considered</linesub>
<linesub end="77391" start="77297">"lexicographically later".</linesub>
</clause>
<clause id="s8.2_p4_c4" num="4">
<linesub end="77430" start="77325">If the rrtype and rrclass both match,</linesub>
<linesub end="77423" start="77366">then the rdata is compared.</linesub>
</clause>
</paragraph>

<paragraph id="s8.2_p5" importance="must" num="5">
<clause id="s8.2_p5_c1" importance="must" num="1">
<linesub end="77689" start="77552">In the case of resource records containing rdata that is subject to</linesub>
<linesub end="77756" start="77623">name compression [RFC1035], the names MUST be uncompressed before</linesub>
<linesub end="77773" start="77692">comparison.</linesub>
</clause>
<clause id="s8.2_p5_c2" num="2">
<linesub end="77829" start="77705">(The details of how a particular name is compressed is</linesub>
<linesub end="77892" start="77763">an artifact of how and where the record is written into the DNS</linesub>
<linesub end="77959" start="77830">message; it is not an intrinsic property of the resource record</linesub>
<linesub end="77916" start="77897">itself.)</linesub>
</clause>
</paragraph>

<paragraph id="s8.2_p6" num="6">
<clause id="s8.2_p6_c1" num="1">
<linesub end="78035" start="77910">The bytes of the raw uncompressed rdata are compared in turn,</linesub>
<linesub end="78114" start="77975">interpreting the bytes as eight-bit UNSIGNED values, until a byte is</linesub>
<linesub end="78184" start="78047">found whose value is greater than that of its counterpart (in which</linesub>
<linesub end="78237" start="78118">case, the rdata whose byte has the greater value is deemed</linesub>
<linesub end="78317" start="78180">lexicographically later) or one of the resource records runs out of</linesub>
<linesub end="78388" start="78251">rdata (in which case, the resource record which still has remaining</linesub>
<linesub end="78438" start="78322">data first is deemed lexicographically later).</linesub>
</clause>
<clause id="s8.2_p6_c2" num="2">
<linesub end="78459" start="78370">The following is an</linesub>
<linesub end="78440" start="78393">example of a conflict:</linesub>
</clause>
</paragraph>

<paragraph id="s8.2_p7" num="7">
<clause id="s8.2_p7_c1" num="1">
<linesub end="78476" start="78422">MyPrinter.local.</linesub>
</clause>
<clause id="s8.2_p7_c2" num="2">
<linesub end="78493" start="78439">A 169.254.99.200</linesub>
<linesub end="78515" start="78461">MyPrinter.local.</linesub>
</clause>
<clause id="s8.2_p7_c3" num="3">
<linesub end="78532" start="78478">A 169.254.200.50</linesub>
<linesub end="78634" start="78499">In this case, 169.254.200.50 is lexicographically later (the third</linesub>
<linesub end="78710" start="78569">byte, with value 200, is greater than its counterpart with value 99),</linesub>
<linesub end="78699" start="78642">so it is deemed the winner.</linesub>
</clause>
</paragraph>

<paragraph id="s8.2_p8" num="8">
<clause id="s8.2_p8_c1" num="1">
<linesub end="78805" start="78674">Note that it is vital that the bytes are interpreted as UNSIGNED</linesub>
<linesub end="78871" start="78742">values in the range 0-255, or the wrong outcome may result.</linesub>
</clause>
<clause id="s8.2_p8_c2" num="2">
<linesub end="78879" start="78803">In the</linesub>
<linesub end="78940" start="78813">example above, if the byte with value 200 had been incorrectly</linesub>
<linesub end="79020" start="78879">interpreted as a signed eight-bit value, then it would be interpreted</linesub>
<linesub end="79079" start="78952">as value -56, and the wrong address record would be deemed the</linesub>
<linesub end="79035" start="79018">winner.</linesub>
</clause>
</paragraph>

</section>

<section id="s8.2.1" name="Simultaneous Probe Tiebreaking for Multiple Records" num="8.2.1">
<paragraph id="s8.2.1_p1" num="1">
<clause id="s8.2.1_p1_c1" num="1">
<linesub end="79230" start="79091">When a host is probing for a set of records with the same name, or a</linesub>
<linesub end="79302" start="79163">message is received containing multiple tiebreaker records answering</linesub>
<linesub end="79370" start="79235">a given probe question in the Question Section, the host's records</linesub>
<linesub end="79436" start="79305">and the tiebreaker records from the message are each sorted into</linesub>
<linesub end="79496" start="79373">order, and then compared pairwise, using the same comparison</linesub>
<linesub end="79550" start="79437">technique described above, until a difference is found.</linesub>
</clause>
</paragraph>

<paragraph id="s8.2.1_p2" num="2">
<clause id="s8.2.1_p2_c1" num="1">
<linesub end="79624" start="79497">The records are sorted using the same lexicographical order as</linesub>
<linesub end="79698" start="79563">described above, that is, if the record classes differ, the record</linesub>
<linesub end="79745" start="79633">with the lower class number comes first.</linesub>
</clause>
<clause id="s8.2.1_p2_c2" num="2">
<linesub end="79774" start="79675">If the classes are the same</linesub>
<linesub end="79847" start="79706">but the rrtypes differ, the record with the lower rrtype number comes</linesub>
<linesub end="79853" start="79779">first.</linesub>
</clause>
<clause id="s8.2.1_p2_c3" num="3">
<linesub end="79912" start="79787">If the class and rrtype match, then the rdata is compared</linesub>
<linesub end="79953" start="79848">bytewise until a difference is found.</linesub>
</clause>
<clause id="s8.2.1_p2_c4" num="4">
<linesub end="79981" start="79887">For example, in the common</linesub>
<linesub end="80048" start="79917">case of advertising DNS-SD services with a TXT record and an SRV</linesub>
<linesub end="80122" start="79985">record, the TXT record comes first (the rrtype value for TXT is 16)</linesub>
<linesub end="80189" start="80056">and the SRV record comes second (the rrtype value for SRV is 33).</linesub>
</clause>
</paragraph>

<paragraph id="s8.2.1_p3" num="3">
<clause id="s8.2.1_p3_c1" num="1">
<linesub end="80411" start="80278">When comparing the records, if the first records match perfectly,</linesub>
<linesub end="80465" start="80347">then the second records are compared, and so on.</linesub>
</clause>
<clause id="s8.2.1_p3_c2" num="2">
<linesub end="80484" start="80397">If either list of</linesub>
<linesub end="80557" start="80418">records runs out of records before any difference is found, then the</linesub>
<linesub end="80623" start="80490">list with records remaining is deemed to have won the tiebreak.</linesub>
</clause>
<clause id="s8.2.1_p3_c3" num="3">
<linesub end="80627" start="80555">If</linesub>
<linesub end="80702" start="80561">both lists run out of records at the same time without any difference</linesub>
<linesub end="80767" start="80634">being found, then this indicates that two devices are advertising</linesub>
<linesub end="80842" start="80703">identical sets of records, as is sometimes done for fault tolerance,</linesub>
<linesub end="80848" start="80775">and there is, in fact, no conflict.</linesub>
</clause>
</paragraph>

</section>

<section id="s8.3" name="Announcing" num="8.3">
<paragraph id="s8.3_p1" importance="must" num="1">
<clause id="s8.3_p1_c1" importance="must" num="1">
<linesub end="80974" start="80833">The second startup step is that the Multicast DNS responder MUST send</linesub>
<linesub end="81035" start="80906">an unsolicited Multicast DNS response containing, in the Answer</linesub>
<linesub end="81108" start="80973">Section, all of its newly registered resource records (both shared</linesub>
<linesub end="81178" start="81043">records, and unique records that have completed the probing step).</linesub>
</clause>
<clause id="s8.3_p1_c2" num="2">
<linesub end="81246" start="81113">If there are too many resource records to fit in a single packet,</linesub>
<linesub end="81249" start="81182">multiple packets should be used.</linesub>
</clause>
</paragraph>

<paragraph id="s8.3_p2" num="2">
<clause id="s8.3_p2_c1" num="1">
<linesub end="81352" start="81219">In the case of shared records (e.g., the PTR records used by DNS-</linesub>
<linesub end="81427" start="81288">Based Service Discovery [RFC6763]), the records are simply placed as</linesub>
<linesub end="81457" start="81360">is into the Answer Section of the DNS response.</linesub>
</clause>
</paragraph>

<paragraph id="s8.3_p3" num="3">
<clause id="s8.3_p3_c1" num="1">
<linesub end="81547" start="81412">In the case of records that have been verified to be unique in the</linesub>
<linesub end="81615" start="81482">previous step, they are placed into the Answer Section of the DNS</linesub>
<linesub end="81684" start="81551">response with the most significant bit of the rrclass set to one.</linesub>
</clause>
<clause id="s8.3_p3_c2" num="2">
<linesub end="81755" start="81620">The most significant bit of the rrclass for a record in the Answer</linesub>
<linesub end="81825" start="81690">Section of a response message is the Multicast DNS cache-flush bit</linesub>
<linesub end="81901" start="81760">and is discussed in more detail below in Section 10.2, "Announcements</linesub>
<linesub end="81902" start="81833">to Flush Outdated Cache Entries".</linesub>
</clause>
</paragraph>

<paragraph id="s8.3_p4" importance="must" num="4">
<clause id="s8.3_p4_c1" importance="must" num="1">
<linesub end="81998" start="81871">The Multicast DNS responder MUST send at least two unsolicited</linesub>
<linesub end="82037" start="81937">responses, one second apart.</linesub>
</clause>
<clause id="s8.3_p4_c2" importance="may" num="2">
<linesub end="82078" start="81967">To provide increased robustness against</linesub>
<linesub end="82149" start="82010">packet loss, a responder MAY send up to eight unsolicited responses,</linesub>
<linesub end="82223" start="82082">provided that the interval between unsolicited responses increases by</linesub>
<linesub end="82258" start="82155">at least a factor of two with every response sent.</linesub>
</clause>
</paragraph>

<paragraph id="s8.3_p5" importance="must" num="5">
<clause id="s8.3_p5_c1" importance="must" num="1">
<linesub end="82349" start="82210">A Multicast DNS responder MUST NOT send announcements in the absence</linesub>
<linesub end="82423" start="82282">of information that its network connectivity may have changed in some</linesub>
<linesub end="82440" start="82355">relevant way.</linesub>
</clause>
<clause id="s8.3_p5_c2" importance="must" num="2">
<linesub end="82496" start="82370">In particular, a Multicast DNS responder MUST NOT send</linesub>
<linesub end="82537" start="82428">regular periodic announcements as a matter of course.</linesub>
</clause>
</paragraph>

<paragraph id="s8.3_p6" importance="must" num="6">
<clause id="s8.3_p6_c1" importance="must" num="1">
<linesub end="82611" start="82486">Whenever a Multicast DNS responder receives any Multicast DNS</linesub>
<linesub end="82688" start="82551">response (solicited or otherwise) containing a conflicting resource</linesub>
<linesub end="82753" start="82622">record, the conflict MUST be resolved as described in Section 9,</linesub>
<linesub end="82737" start="82690">"Conflict Resolution".</linesub>
</clause>
</paragraph>

</section>

<section id="s8.4" name="Updating" num="8.4">
<paragraph id="s8.4_p1" importance="must" num="1">
<clause id="s8.4_p1_c1" importance="must" num="1">
<linesub end="83023" start="82888">At any time, if the rdata of any of a host's Multicast DNS records</linesub>
<linesub end="83097" start="82958">changes, the host MUST repeat the Announcing step described above to</linesub>
<linesub end="83121" start="83030">update neighboring caches.</linesub>
</clause>
<clause id="s8.4_p1_c2" importance="must" num="2">
<linesub end="83157" start="83058">For example, if any of a host's IP</linesub>
<linesub end="83224" start="83096">addresses change, it MUST re-announce those address records.</linesub>
</clause>
<clause id="s8.4_p1_c3" num="3">
<linesub end="83229" start="83158">The</linesub>
<linesub end="83304" start="83165">host does not need to repeat the Probing step because it has already</linesub>
<linesub end="83324" start="83237">established unique ownership of that name.</linesub>
</clause>
</paragraph>

<paragraph id="s8.4_p2" importance="must" num="2">
<clause id="s8.4_p2_c1" importance="must" num="1">
<linesub end="83405" start="83284">In the case of shared records, a host MUST send a "goodbye"</linesub>
<linesub end="83484" start="83347">announcement with RR TTL zero (see Section 10.1, "Goodbye Packets")</linesub>
<linesub end="83559" start="83418">for the old rdata, to cause it to be deleted from peer caches, before</linesub>
<linesub end="83583" start="83491">announcing the new rdata.</linesub>
</clause>
<clause id="s8.4_p2_c2" importance="should" num="2">
<linesub end="83622" start="83518">In the case of unique records, a host</linesub>
<linesub end="83698" start="83559">SHOULD omit the "goodbye" announcement, since the cache-flush bit on</linesub>
<linesub end="83768" start="83631">the newly announced records will cause old rdata to be flushed from</linesub>
<linesub end="83743" start="83702">peer caches anyway.</linesub>
</clause>
</paragraph>

<paragraph id="s8.4_p3" importance="should" num="3">
<clause id="s8.4_p3_c1" importance="should" num="1">
<linesub end="83859" start="83726">A host may update the contents of any of its records at any time,</linesub>
<linesub end="83926" start="83795">though a host SHOULD NOT update records more frequently than ten</linesub>
<linesub end="83947" start="83863">times per minute.</linesub>
</clause>
<clause id="s8.4_p3_c2" num="2">
<linesub end="83994" start="83882">Frequent rapid updates impose a burden on the</linesub>
<linesub end="84011" start="83931">network.</linesub>
</clause>
<clause id="s8.4_p3_c3" num="3">
<linesub end="84072" start="83941">If a host has information to disseminate which changes more</linesub>
<linesub end="84145" start="84004">frequently than ten times per minute, then it may be more appropriate</linesub>
<linesub end="84174" start="84077">to design a protocol for that specific purpose.</linesub>
</clause>
</paragraph>

</section>

<section id="s9" name="Conflict Resolution" num="9">
<paragraph id="s9_p1" num="1">
<clause id="s9_p1_c1" num="1">
<linesub end="84293" start="84154">A conflict occurs when a Multicast DNS responder has a unique record</linesub>
<linesub end="84365" start="84226">for which it is currently authoritative, and it receives a Multicast</linesub>
<linesub end="84435" start="84298">DNS response message containing a record with the same name, rrtype</linesub>
<linesub end="84468" start="84369">and rrclass, but inconsistent rdata.</linesub>
</clause>
<clause id="s9_p1_c2" num="2">
<linesub end="84492" start="84407">What may be considered</linesub>
<linesub end="84572" start="84433">inconsistent is context sensitive, except that resource records with</linesub>
<linesub end="84634" start="84505">identical rdata are never considered inconsistent, even if they</linesub>
<linesub end="84675" start="84572">originate from different hosts.</linesub>
</clause>
<clause id="s9_p1_c3" num="3">
<linesub end="84713" start="84605">This is to permit use of proxies and</linesub>
<linesub end="84770" start="84645">other fault-tolerance mechanisms that may cause more than one</linesub>
<linesub end="84849" start="84710">responder to be capable of issuing identical answers on the network.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p2" num="2">
<clause id="s9_p2_c1" num="1">
<linesub end="84916" start="84783">A common example of a resource record type that is intended to be</linesub>
<linesub end="84989" start="84852">unique, not shared between hosts, is the address record that maps a</linesub>
<linesub end="85022" start="84923">host's name to its IP address.</linesub>
</clause>
<clause id="s9_p2_c2" num="2">
<linesub end="85058" start="84955">Should a host witness another host</linesub>
<linesub end="85124" start="84993">announce an address record with the same name but a different IP</linesub>
<linesub end="85190" start="85061">address, then that is considered inconsistent, and that address</linesub>
<linesub end="85209" start="85128">record is considered to be in conflict.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p3" importance="must" num="3">
<clause id="s9_p3_c1" importance="must" num="1">
<linesub end="85297" start="85172">Whenever a Multicast DNS responder receives any Multicast DNS</linesub>
<linesub end="85374" start="85237">response (solicited or otherwise) containing a conflicting resource</linesub>
<linesub end="85439" start="85308">record in any of the Resource Record Sections, the Multicast DNS</linesub>
<linesub end="85507" start="85376">responder MUST immediately reset its conflicted unique record to</linesub>
<linesub end="85579" start="85444">probing state, and go through the startup steps described above in</linesub>
<linesub end="85786" start="85667">Section 8, "Probing and Announcing on Startup".</linesub>
</clause>
<clause id="s9_p3_c2" importance="must" num="2">
<linesub end="85808" start="85716">The protocol used in</linesub>
<linesub end="85879" start="85740">the Probing phase will determine a winner and a loser, and the loser</linesub>
<linesub end="85901" start="85812">MUST cease using the name, and reconfigure.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p4" importance="must" num="4">
<clause id="s9_p4_c1" importance="must" num="1">
<linesub end="85997" start="85860">It is very important that any host receiving a resource record that</linesub>
<linesub end="86066" start="85931">conflicts with one of its own MUST take action as described above.</linesub>
</clause>
<clause id="s9_p4_c2" num="2">
<linesub end="86142" start="86001">In the case of two hosts using the same host name, where one has been</linesub>
<linesub end="86211" start="86074">configured to require a unique host name and the other has not, the</linesub>
<linesub end="86282" start="86145">one that has not been configured to require a unique host name will</linesub>
<linesub end="86335" start="86216">not perceive any conflict, and will not take any action.</linesub>
</clause>
<clause id="s9_p4_c3" num="3">
<linesub end="86339" start="86274">By</linesub>
<linesub end="86419" start="86280">reverting to Probing state, the host that desires a unique host name</linesub>
<linesub end="86493" start="86352">will go through the necessary steps to ensure that a unique host name</linesub>
<linesub end="86452" start="86425">is obtained.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p5" num="5">
<clause id="s9_p5_c1" num="1">
<linesub end="86573" start="86442">The recommended course of action after probing and failing is as</linesub>
<linesub end="86529" start="86510">follows:</linesub>
</clause>
</paragraph>

<paragraph id="s9_p6" num="6">
<clause id="s9_p6_c1" num="1">
<linesub end="86662" start="86526">1. Programmatically change the resource record name in an attempt</linesub>
<linesub end="86701" start="86601">to find a new name that is unique.</linesub>
</clause>
<clause id="s9_p6_c2" num="2">
<linesub end="86724" start="86637">This could be done by</linesub>
<linesub end="86797" start="86668">adding some further identifying information (e.g., the model</linesub>
<linesub end="86873" start="86738">name of the hardware) if it is not already present in the name,</linesub>
<linesub end="86934" start="86811">or appending the digit "2" to the name, or incrementing a</linesub>
<linesub end="86999" start="86878">number at the end of the name if one is already present.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p7" num="7">
<clause id="s9_p7_c1" num="1">
<linesub end="87072" start="86942">2. Probe again, and repeat as necessary until a unique name is</linesub>
<linesub end="87035" start="87014">found.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p8" num="8">
<clause id="s9_p8_c1" num="1">
<linesub end="87162" start="87028">3. Once an available unique name has been determined, by probing</linesub>
<linesub end="87233" start="87102">without receiving any conflicting response, record this newly</linesub>
<linesub end="87304" start="87173">chosen name in persistent storage so that the device will use</linesub>
<linesub end="87347" start="87244">the same name the next time it is power-cycled.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p9" num="9">
<clause id="s9_p9_c1" num="1">
<linesub end="87437" start="87299">4. Display a message to the user or operator informing them of the</linesub>
<linesub end="87422" start="87375">name change.</linesub>
</clause>
<clause id="s9_p9_c2" num="2">
<linesub end="87436" start="87389">For example:</linesub>
</clause>
</paragraph>

<paragraph id="s9_p10" num="10">
<clause id="s9_p10_c1" num="1">
<linesub end="87545" start="87415">The name "Bob's Music" is in use by another music server on</linesub>
<linesub end="87566" start="87487">the network.</linesub>
</clause>
<clause id="s9_p10_c2" num="2">
<linesub end="87609" start="87501">Your music collection has been renamed to</linesub>
<linesub end="87641" start="87555">"Bob's Music (2)".</linesub>
</clause>
<clause id="s9_p10_c3" num="3">
<linesub end="87679" start="87575">If you want to change this name, use</linesub>
<linesub end="87754" start="87624">[describe appropriate menu item or preference dialog here].</linesub>
</clause>
</paragraph>

<paragraph id="s9_p11" num="11">
<clause id="s9_p11_c1" num="1">
<linesub end="87827" start="87694">The details of how the user or operator is informed of the new</linesub>
<linesub end="87857" start="87766">name depends on context.</linesub>
</clause>
<clause id="s9_p11_c2" num="2">
<linesub end="87891" start="87792">A desktop computer with a screen</linesub>
<linesub end="87932" start="87834">might put up a dialog box.</linesub>
</clause>
<clause id="s9_p11_c3" num="3">
<linesub end="87969" start="87862">A headless server in the closet may</linesub>
<linesub end="88028" start="87907">write a message to a log file, or use whatever mechanism</linesub>
<linesub end="88069" start="87973">(email, SNMP trap, etc.)</linesub>
</clause>
<clause id="s9_p11_c4" num="4">
<linesub end="88108" start="87998">it uses to inform the administrator of</linesub>
<linesub end="88134" start="88046">error conditions.</linesub>
</clause>
<clause id="s9_p11_c5" num="5">
<linesub end="88179" start="88065">On the other hand, a headless server in the</linesub>
<linesub end="88245" start="88118">closet may not inform the user at all -- if the user cares,</linesub>
<linesub end="88464" start="88341">they will notice the name has changed, and connect to the</linesub>
<linesub end="88541" start="88408">server in the usual way (e.g., via web browser) to configure a</linesub>
<linesub end="88507" start="88480">new name.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p12" num="12">
<clause id="s9_p12_c1" num="1">
<linesub end="88635" start="88497">5. After one minute of probing, if the Multicast DNS responder has</linesub>
<linesub end="88700" start="88573">been unable to find any unused name, it should log an error</linesub>
<linesub end="88761" start="88642">message to inform the user or operator of this fact.</linesub>
</clause>
<clause id="s9_p12_c2" num="2">
<linesub end="88767" start="88696">This</linesub>
<linesub end="88827" start="88710">situation should never occur in normal operation.</linesub>
</clause>
<clause id="s9_p12_c3" num="3">
<linesub end="88837" start="88761">The only</linesub>
<linesub end="88908" start="88779">situations that would cause this to happen would be either a</linesub>
<linesub end="88972" start="88849">deliberate denial-of-service attack, or some kind of very</linesub>
<linesub end="89045" start="88916">obscure hardware or software bug that acts like a deliberate</linesub>
<linesub end="89045" start="88986">denial-of-service attack.</linesub>
</clause>
</paragraph>

<paragraph id="s9_p13" num="13">
<clause id="s9_p13_c1" num="1">
<linesub end="89155" start="89016">These considerations apply to address records (i.e., host names) and</linesub>
<linesub end="89219" start="89088">to all resource records where uniqueness (or maintenance of some</linesub>
<linesub end="89233" start="89156">other defined constraint) is desired.</linesub>
</clause>
</paragraph>

</section>

<section id="s10" name="Resource Record TTL Values and Cache Coherency" num="10">
<paragraph id="s10_p1" importance="should" num="1">
<clause id="s10_p1_c1" importance="should" num="1">
<linesub end="89378" start="89251">As a general rule, the recommended TTL value for Multicast DNS</linesub>
<linesub end="89446" start="89317">resource records with a host name as the resource record's name</linesub>
<linesub end="89521" start="89384">(e.g., A, AAAA, HINFO) or a host name contained within the resource</linesub>
<linesub end="89594" start="89455">record's rdata (e.g., SRV, reverse mapping PTR record) SHOULD be 120</linesub>
<linesub end="89546" start="89527">seconds.</linesub>
</clause>
</paragraph>

<paragraph id="s10_p2" num="2">
<clause id="s10_p2_c1" num="1">
<linesub end="89681" start="89540">The recommended TTL value for other Multicast DNS resource records is</linesub>
<linesub end="89638" start="89613">75 minutes.</linesub>
</clause>
</paragraph>

<paragraph id="s10_p3" num="3">
<clause id="s10_p3_c1" num="1">
<linesub end="89770" start="89629">A querier with an active outstanding query will issue a query message</linesub>
<linesub end="89841" start="89702">when one or more of the resource records in its cache are 80% of the</linesub>
<linesub end="89854" start="89774">way to expiry.</linesub>
</clause>
<clause id="s10_p3_c2" num="2">
<linesub end="89903" start="89790">If the TTL on those records is 75 minutes, this</linesub>
<linesub end="89982" start="89841">ongoing cache maintenance process yields a steady-state query rate of</linesub>
<linesub end="89971" start="89914">one query every 60 minutes.</linesub>
</clause>
</paragraph>

<paragraph id="s10_p4" num="4">
<clause id="s10_p4_c1" num="1">
<linesub end="90073" start="89946">Any distributed cache needs a cache coherency protocol.</linesub>
</clause>
<clause id="s10_p4_c2" num="2">
<linesub end="90087" start="90003">If Multicast</linesub>
<linesub end="90156" start="90019">DNS resource records follow the recommendation and have a TTL of 75</linesub>
<linesub end="90231" start="90090">minutes, that means that stale data could persist in the system for a</linesub>
<linesub end="90253" start="90163">little over an hour.</linesub>
</clause>
<clause id="s10_p4_c3" num="3">
<linesub end="90300" start="90185">Making the default RR TTL significantly lower</linesub>
<linesub end="90371" start="90234">would reduce the lifetime of stale data, but would produce too much</linesub>
<linesub end="90403" start="90305">extra traffic on the network.</linesub>
</clause>
<clause id="s10_p4_c4" num="4">
<linesub end="90440" start="90336">Various techniques are available to</linesub>
<linesub end="90498" start="90375">minimize the impact of such stale data, outlined in the five</linesub>
<linesub end="90478" start="90439">subsections below.</linesub>
</clause>
</paragraph>

</section>

<section id="s10.1" name="Goodbye Packets" num="10.1">
<paragraph id="s10.1_p1" importance="should" num="1">
<clause id="s10.1_p1_c1" importance="should" num="1">
<linesub end="90623" start="90486">In the case where a host knows that certain resource record data is</linesub>
<linesub end="90694" start="90557">about to become invalid (for example, when the host is undergoing a</linesub>
<linesub end="90763" start="90628">clean shutdown), the host SHOULD send an unsolicited Multicast DNS</linesub>
<linesub end="90978" start="90851">response packet, giving the same resource record name, rrtype,</linesub>
<linesub end="91028" start="90917">rrclass, and rdata, but an RR TTL of zero.</linesub>
</clause>
<clause id="s10.1_p1_c2" num="2">
<linesub end="91052" start="90961">This has the effect of</linesub>
<linesub end="91126" start="90987">updating the TTL stored in neighboring hosts' cache entries to zero,</linesub>
<linesub end="91158" start="91059">causing that cache entry to be promptly deleted.</linesub>
</clause>
</paragraph>

<paragraph id="s10.1_p2" importance="should" num="2">
<clause id="s10.1_p2_c1" importance="should" num="1">
<linesub end="91253" start="91112">Queriers receiving a Multicast DNS response with a TTL of zero SHOULD</linesub>
<linesub end="91324" start="91185">NOT immediately delete the record from the cache, but instead record</linesub>
<linesub end="91383" start="91257">a TTL of 1 and then delete the record one second later.</linesub>
</clause>
<clause id="s10.1_p2_c2" num="2">
<linesub end="91396" start="91314">In the case</linesub>
<linesub end="91460" start="91329">of multiple Multicast DNS responders on the network described in</linesub>
<linesub end="91516" start="91397">Section 6.6 above, if one of the responders shuts down and</linesub>
<linesub end="91600" start="91459">incorrectly sends goodbye packets for its records, it gives the other</linesub>
<linesub end="91669" start="91532">cooperating responders one second to send out their own response to</linesub>
<linesub end="91718" start="91603">"rescue" the records before they expire and are deleted.</linesub>
</clause>
</paragraph>

</section>

<section id="s10.2" name="Announcements to Flush Outdated Cache Entries" num="10.2">
<paragraph id="s10.2_p1" importance="must" num="1">
<clause id="s10.2_p1_c1" num="1">
<linesub end="91851" start="91718">Whenever a host has a resource record with new data, or with what</linesub>
<linesub end="91920" start="91787">might potentially be new data (e.g., after rebooting, waking from</linesub>
<linesub end="91997" start="91856">sleep, connecting to a new network link, or changing IP address), the</linesub>
<linesub end="92045" start="91929">host needs to inform peers of that new data.</linesub>
</clause>
<clause id="s10.2_p1_c2" importance="must" num="2">
<linesub end="92070" start="91975">In cases where the host</linesub>
<linesub end="92141" start="92002">has not been continuously connected and participating on the network</linesub>
<linesub end="92203" start="92074">link, it MUST first probe to re-verify uniqueness of its unique</linesub>
<linesub end="92252" start="92141">records, as described above in Section 8.1, "Probing".</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p2" importance="must" num="2">
<clause id="s10.2_p2_c1" importance="must" num="1">
<linesub end="92337" start="92200">Having completed the Probing step, if necessary, the host MUST then</linesub>
<linesub end="92412" start="92271">send a series of unsolicited announcements to update cache entries in</linesub>
<linesub end="92429" start="92344">its neighbor hosts.</linesub>
</clause>
<clause id="s10.2_p2_c2" num="2">
<linesub end="92473" start="92365">In these unsolicited announcements, if the</linesub>
<linesub end="92548" start="92411">record is one that has been verified unique, the host sets the most</linesub>
<linesub end="92611" start="92482">significant bit of the rrclass field of the resource record.</linesub>
</clause>
<clause id="s10.2_p2_c3" num="3">
<linesub end="92617" start="92544">This</linesub>
<linesub end="92691" start="92552">bit, the cache-flush bit, tells neighboring hosts that this is not a</linesub>
<linesub end="92712" start="92624">shared record type.</linesub>
</clause>
<clause id="s10.2_p2_c4" num="4">
<linesub end="92759" start="92645">Instead of merging this new record additively</linesub>
<linesub end="92825" start="92694">into the cache in addition to any previous records with the same</linesub>
<linesub end="92897" start="92762">name, rrtype, and rrclass, all old records with that name, rrtype,</linesub>
<linesub end="92971" start="92832">and rrclass that were received more than one second ago are declared</linesub>
<linesub end="93025" start="92904">invalid, and marked to expire from the cache in one second.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p3" num="3">
<clause id="s10.2_p3_c1" num="1">
<linesub end="93107" start="92968">The semantics of the cache-flush bit are as follows: normally when a</linesub>
<linesub end="93169" start="93040">resource record appears in a Resource Record Section of the DNS</linesub>
<linesub end="93240" start="93107">response it means, "This is an assertion that this information is</linesub>
<linesub end="93252" start="93176">true".</linesub>
</clause>
<clause id="s10.2_p3_c2" num="2">
<linesub end="93313" start="93184">When a resource record appears in a Resource Record Section</linesub>
<linesub end="93386" start="93247">of the DNS response with the cache-flush bit set, it means, "This is</linesub>
<linesub end="93458" start="93319">an assertion that this information is the truth and the whole truth,</linesub>
<linesub end="93522" start="93391">and anything you may have heard more than a second ago regarding</linesub>
<linesub end="93572" start="93459">records of this name/rrtype/rrclass is no longer true".</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p4" num="4">
<clause id="s10.2_p4_c1" num="1">
<linesub end="93646" start="93519">To accommodate the case where the set of records from one host</linesub>
<linesub end="93720" start="93585">constituting a single unique RRSet is too large to fit in a single</linesub>
<linesub end="93786" start="93655">packet, only cache records that are more than one second old are</linesub>
<linesub end="93954" start="93876">flushed.</linesub>
</clause>
<clause id="s10.2_p4_c2" num="2">
<linesub end="94013" start="93886">This allows the announcing host to generate a quick burst</linesub>
<linesub end="94088" start="93947">of packets back-to-back on the wire containing all the members of the</linesub>
<linesub end="94093" start="94020">RRSet.</linesub>
</clause>
<clause id="s10.2_p4_c3" num="3">
<linesub end="94151" start="94028">When receiving records with the cache-flush bit set, all</linesub>
<linesub end="94227" start="94088">records older than one second are marked to be deleted one second in</linesub>
<linesub end="94243" start="94160">the future.</linesub>
</clause>
<clause id="s10.2_p4_c4" num="4">
<linesub end="94301" start="94173">One second after the end of the little packet burst, any</linesub>
<linesub end="94374" start="94233">records not represented within that packet burst will then be expired</linesub>
<linesub end="94351" start="94306">from all peer caches.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p5" importance="must" num="5">
<clause id="s10.2_p5_c1" importance="must" num="1">
<linesub end="94471" start="94332">Any time a host sends a response packet containing some members of a</linesub>
<linesub end="94541" start="94404">unique RRSet, it MUST send the entire RRSet, preferably in a single</linesub>
<linesub end="94614" start="94475">packet, or if the entire RRSet will not fit in a single packet, in a</linesub>
<linesub end="94676" start="94547">quick burst of packets sent as close together as possible.</linesub>
</clause>
<clause id="s10.2_p5_c2" importance="must" num="2">
<linesub end="94686" start="94607">The host</linesub>
<linesub end="94750" start="94619">MUST set the cache-flush bit on all members of the unique RRSet.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p6" num="6">
<clause id="s10.2_p6_c1" num="1">
<linesub end="94825" start="94688">Another reason for waiting one second before deleting stale records</linesub>
<linesub end="94878" start="94759">from the cache is to accommodate bridged networks.</linesub>
</clause>
<clause id="s10.2_p6_c2" num="2">
<linesub end="94894" start="94811">For example, a</linesub>
<linesub end="94962" start="94829">host's address record announcement on a wireless interface may be</linesub>
<linesub end="95039" start="94898">bridged onto a wired Ethernet and may cause that same host's Ethernet</linesub>
<linesub end="95090" start="94971">address records to be flushed from peer caches.</linesub>
</clause>
<clause id="s10.2_p6_c3" num="3">
<linesub end="95112" start="95020">The one-second delay</linesub>
<linesub end="95181" start="95044">gives the host the chance to see its own announcement arrive on the</linesub>
<linesub end="95254" start="95115">wired Ethernet, and immediately re-announce its Ethernet interface's</linesub>
<linesub end="95316" start="95187">address records so that both sets remain valid and live in peer</linesub>
<linesub end="95271" start="95254">caches.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p7" num="7">
<clause id="s10.2_p7_c1" num="1">
<linesub end="95405" start="95266">These rules, about when to set the cache-flush bit and about sending</linesub>
<linesub end="95475" start="95338">the entire rrset, apply regardless of *why* the response message is</linesub>
<linesub end="95497" start="95409">being generated.</linesub>
</clause>
<clause id="s10.2_p7_c2" num="2">
<linesub end="95550" start="95427">They apply to startup announcements as described in</linesub>
<linesub end="95621" start="95482">Section 8.3, "Announcing", and to responses generated as a result of</linesub>
<linesub end="95607" start="95554">receiving query messages.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p8" num="8">
<clause id="s10.2_p8_c1" num="1">
<linesub end="95717" start="95584">The cache-flush bit is only set in records in the Resource Record</linesub>
<linesub end="95772" start="95653">Sections of Multicast DNS responses sent to UDP port 5353.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p9" importance="must" num="9">
<clause id="s10.2_p9_c1" importance="must" num="1">
<linesub end="95847" start="95716">The cache-flush bit MUST NOT be set in any resource records in a</linesub>
<linesub end="95923" start="95784">response message sent in legacy unicast responses to UDP ports other</linesub>
<linesub end="95879" start="95856">than 5353.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p10" importance="must" num="10">
<clause id="s10.2_p10_c1" importance="must" num="1">
<linesub end="96006" start="95871">The cache-flush bit MUST NOT be set in any resource records in the</linesub>
<linesub end="96022" start="95941">Known-Answer list of any query message.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p11" importance="must" num="11">
<clause id="s10.2_p11_c1" importance="must" num="1">
<linesub end="96114" start="95985">The cache-flush bit MUST NOT ever be set in any shared resource</linesub>
<linesub end="96129" start="96052">record.</linesub>
</clause>
<clause id="s10.2_p11_c2" num="2">
<linesub end="96189" start="96061">To do so would cause all the other shared versions of this</linesub>
<linesub end="96262" start="96123">resource record with different rdata from different responders to be</linesub>
<linesub end="96308" start="96195">immediately deleted from all the caches on the network.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p12" num="12">
<clause id="s10.2_p12_c1" num="1">
<linesub end="96540" start="96411">The cache-flush bit does *not* apply to questions listed in the</linesub>
<linesub end="96589" start="96478">Question Section of a Multicast DNS message.</linesub>
</clause>
<clause id="s10.2_p12_c2" num="2">
<linesub end="96609" start="96524">The top bit of the</linesub>
<linesub end="96685" start="96546">rrclass field in questions is used for an entirely different purpose</linesub>
<linesub end="96741" start="96618">(see Section 5.4, "Questions Requesting Unicast Responses").</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p13" num="13">
<clause id="s10.2_p13_c1" num="1">
<linesub end="96814" start="96683">Note that the cache-flush bit is NOT part of the resource record</linesub>
<linesub end="96829" start="96751">class.</linesub>
</clause>
<clause id="s10.2_p13_c2" num="2">
<linesub end="96892" start="96759">The cache-flush bit is the most significant bit of the second</linesub>
<linesub end="96959" start="96824">16-bit word of a resource record in a Resource Record Section of a</linesub>
<linesub end="97029" start="96894">Multicast DNS message (the field conventionally referred to as the</linesub>
<linesub end="97097" start="96964">rrclass field), and the actual resource record class is the least</linesub>
<linesub end="97141" start="97033">significant fifteen bits of this field.</linesub>
</clause>
<clause id="s10.2_p13_c3" num="3">
<linesub end="97168" start="97074">There is no Multicast DNS</linesub>
<linesub end="97203" start="97103">resource record class 0x8001.</linesub>
</clause>
<clause id="s10.2_p13_c4" num="4">
<linesub end="97242" start="97134">The value 0x8001 in the rrclass field</linesub>
<linesub end="97314" start="97175">of a resource record in a Multicast DNS response message indicates a</linesub>
<linesub end="97374" start="97247">resource record with class 1, with the cache-flush bit set.</linesub>
</clause>
<clause id="s10.2_p13_c5" num="5">
<linesub end="97380" start="97308">When</linesub>
<linesub end="97433" start="97316">receiving a resource record with the cache-flush bit set,</linesub>
<linesub end="97516" start="97377">implementations should take care to mask off that bit before storing</linesub>
<linesub end="97586" start="97449">the resource record in memory, or otherwise ensure that it is given</linesub>
<linesub end="97595" start="97520">the correct semantic interpretation.</linesub>
</clause>
</paragraph>

<paragraph id="s10.2_p14" num="14">
<clause id="s10.2_p14_c1" num="1">
<linesub end="97686" start="97561">The reuse of the top bit of the rrclass field only applies to</linesub>
<linesub end="97763" start="97626">conventional resource record types that are subject to caching, not</linesub>
<linesub end="97830" start="97697">to pseudo-RRs like OPT [RFC2671], TSIG [RFC2845], TKEY [RFC2930],</linesub>
<linesub end="97899" start="97766">SIG0 [RFC2931], etc., that pertain only to a particular transport</linesub>
<linesub end="97946" start="97835">level message and not to any actual DNS data.</linesub>
</clause>
<clause id="s10.2_p14_c2" num="2">
<linesub end="97964" start="97882">Since pseudo-RRs</linesub>
<linesub end="98043" start="97902">should never go into the Multicast DNS cache, the concept of a cache-</linesub>
<linesub end="98086" start="97975">flush bit for these types is not applicable.</linesub>
</clause>
<clause id="s10.2_p14_c3" num="3">
<linesub end="98106" start="98021">In particular, the</linesub>
<linesub end="98184" start="98043">rrclass field of an OPT record encodes the sender's UDP payload size,</linesub>
<linesub end="98255" start="98116">and should be interpreted as a sixteen-bit length value in the range</linesub>
<linesub end="98297" start="98188">0-65535, not a one-bit flag and a fifteen-bit length.</linesub>
</clause>
</paragraph>

</section>

<section id="s10.3" name="Cache Flush on Topology change" num="10.3">
<paragraph id="s10.3_p1" num="1">
<clause id="s10.3_p1_c1" num="1">
<linesub end="98424" start="98285">If the hardware on a given host is able to indicate physical changes</linesub>
<linesub end="98496" start="98357">of connectivity, then when the hardware indicates such a change, the</linesub>
<linesub end="98566" start="98429">host should take this information into account in its Multicast DNS</linesub>
<linesub end="98590" start="98500">cache management strategy.</linesub>
</clause>
<clause id="s10.3_p1_c2" num="2">
<linesub end="98625" start="98528">For example, a host may choose to</linesub>
<linesub end="98688" start="98565">immediately flush all cache records received on a particular</linesub>
<linesub end="98743" start="98629">interface when that cable is disconnected.</linesub>
</clause>
<clause id="s10.3_p1_c3" num="3">
<linesub end="98770" start="98673">Alternatively, a host may</linesub>
<linesub end="98833" start="98702">choose to adjust the remaining TTL on all those records to a few</linesub>
<linesub end="98897" start="98770">seconds so that if the cable is not reconnected quickly, those</linesub>
<linesub end="98909" start="98836">records will expire from the cache.</linesub>
</clause>
</paragraph>

<paragraph id="s10.3_p2" num="2">
<clause id="s10.3_p2_c1" num="1">
<linesub end="99011" start="98876">Likewise, when a host reboots, wakes from sleep, or undergoes some</linesub>
<linesub end="99073" start="98946">other similar discontinuous state change, the cache management</linesub>
<linesub end="99117" start="99012">strategy should take that information into account.</linesub>
</clause>
</paragraph>

</section>

<section id="s10.4" name="Cache Flush on Failure Indication" num="10.4">
<paragraph id="s10.4_p1" num="1">
<clause id="s10.4_p1_c1" num="1">
<linesub end="99404" start="99265">Sometimes a cache record can be determined to be stale when a client</linesub>
<linesub end="99468" start="99337">attempts to use the rdata it contains, and the client finds that</linesub>
<linesub end="99452" start="99405">rdata to be incorrect.</linesub>
</clause>
</paragraph>

<paragraph id="s10.4_p2" num="2">
<clause id="s10.4_p2_c1" num="1">
<linesub end="99569" start="99432">For example, the rdata in an address record can be determined to be</linesub>
<linesub end="99642" start="99503">incorrect if attempts to contact that host fail, either because (for</linesub>
<linesub end="99712" start="99575">an IPv4 address on a local subnet) ARP requests for that address go</linesub>
<linesub end="99783" start="99646">unanswered, because (for an IPv6 address with an on-link prefix) ND</linesub>
<linesub end="99854" start="99717">requests for that address go unanswered, or because (for an address</linesub>
<linesub end="99919" start="99788">on a remote network) a router returns an ICMP "Host Unreachable"</linesub>
<linesub end="99871" start="99856">error.</linesub>
</clause>
</paragraph>

<paragraph id="s10.4_p3" num="3">
<clause id="s10.4_p3_c1" num="1">
<linesub end="99996" start="99867">The rdata in an SRV record can be determined to be incorrect if</linesub>
<linesub end="100069" start="99934">attempts to communicate with the indicated service at the host and</linesub>
<linesub end="100089" start="100004">port number indicated are not successful.</linesub>
</clause>
</paragraph>

<paragraph id="s10.4_p4" num="4">
<clause id="s10.4_p4_c1" num="1">
<linesub end="100191" start="100050">The rdata in a DNS-SD PTR record can be determined to be incorrect if</linesub>
<linesub end="100262" start="100123">attempts to look up the SRV record it references are not successful.</linesub>
</clause>
</paragraph>

<paragraph id="s10.4_p5" num="5">
<clause id="s10.4_p5_c1" num="1">
<linesub end="100329" start="100196">The software implementing the Multicast DNS resource record cache</linesub>
<linesub end="100404" start="100265">should provide a mechanism so that clients detecting stale rdata can</linesub>
<linesub end="100374" start="100337">inform the cache.</linesub>
</clause>
</paragraph>

<paragraph id="s10.4_p6" importance="must" num="6">
<clause id="s10.4_p6_c1" importance="must" num="1">
<linesub end="100488" start="100359">When the cache receives this hint that it should reconfirm some</linesub>
<linesub end="100565" start="100426">record, it MUST issue two or more queries for the resource record in</linesub>
<linesub end="100576" start="100498">dispute.</linesub>
</clause>
<clause id="s10.4_p6_c2" importance="should" num="2">
<linesub end="100635" start="100508">If no response is received within ten seconds, then, even</linesub>
<linesub end="100704" start="100569">though its TTL may indicate that it is not yet due to expire, that</linesub>
<linesub end="100740" start="100639">record SHOULD be promptly flushed from the cache.</linesub>
</clause>
</paragraph>

<paragraph id="s10.4_p7" num="7">
<clause id="s10.4_p7_c1" num="1">
<linesub end="100828" start="100693">The end result of this is that if a printer suffers a sudden power</linesub>
<linesub end="100902" start="100763">failure or other abrupt disconnection from the network, its name may</linesub>
<linesub end="100962" start="100835">continue to appear in DNS-SD browser lists displayed on users'</linesub>
<linesub end="100971" start="100901">screens.</linesub>
</clause>
<clause id="s10.4_p7_c2" num="2">
<linesub end="101022" start="100911">Eventually, that entry will expire from the cache</linesub>
<linesub end="101095" start="100964">naturally, but if a user tries to access the printer before that</linesub>
<linesub end="101173" start="101032">happens, the failure to successfully contact the printer will trigger</linesub>
<linesub end="101214" start="101105">the more hasty demise of its cache entries.</linesub>
</clause>
<clause id="s10.4_p7_c3" num="3">
<linesub end="101234" start="101150">This is a sensible</linesub>
<linesub end="101309" start="101172">trade-off between good user experience and good network efficiency.</linesub>
</clause>
<clause id="s10.4_p7_c4" num="4">
<linesub end="101382" start="101243">If we were to insist that printers should disappear from the printer</linesub>
<linesub end="101444" start="101315">list within 30 seconds of becoming unavailable, for all failure</linesub>
<linesub end="101519" start="101382">modes, the only way to achieve this would be for the client to poll</linesub>
<linesub end="101594" start="101453">the printer at least every 30 seconds, or for the printer to announce</linesub>
<linesub end="101659" start="101526">its presence at least every 30 seconds, both of which would be an</linesub>
<linesub end="101672" start="101595">unreasonable burden on most networks.</linesub>
</clause>
</paragraph>

</section>

<section id="s10.5" name="Passive Observation Of Failures (POOF)" num="10.5">
<paragraph id="s10.5_p1" num="1">
<clause id="s10.5_p1_c1" num="1">
<linesub end="101974" start="101839">A host observes the multicast queries issued by the other hosts on</linesub>
<linesub end="101989" start="101909">the network.</linesub>
</clause>
<clause id="s10.5_p1_c2" num="2">
<linesub end="102042" start="101923">One of the major benefits of also sending responses</linesub>
<linesub end="102117" start="101978">using multicast is that it allows all hosts to see the responses (or</linesub>
<linesub end="102115" start="102050">lack thereof) to those queries.</linesub>
</clause>
</paragraph>

<paragraph id="s10.5_p2" num="2">
<clause id="s10.5_p2_c1" num="1">
<linesub end="102217" start="102086">If a host sees queries, for which a record in its cache would be</linesub>
<linesub end="102287" start="102154">expected to be given as an answer in a multicast response, but no</linesub>
<linesub end="102356" start="102223">such answer is seen, then the host may take this as an indication</linesub>
<linesub end="102373" start="102292">that the record may no longer be valid.</linesub>
</clause>
</paragraph>

<paragraph id="s10.5_p3" importance="should" num="3">
<clause id="s10.5_p3_c1" importance="should" num="1">
<linesub end="102471" start="102336">After seeing two or more of these queries, and seeing no multicast</linesub>
<linesub end="102547" start="102406">response containing the expected answer within ten seconds, then even</linesub>
<linesub end="102614" start="102479">though its TTL may indicate that it is not yet due to expire, that</linesub>
<linesub end="102661" start="102549">record SHOULD be flushed from the cache.</linesub>
</clause>
<clause id="s10.5_p3_c2" importance="should" num="2">
<linesub end="102690" start="102591">The host SHOULD NOT perform</linesub>
<linesub end="102753" start="102622">its own queries to reconfirm that the record is truly gone.</linesub>
</clause>
<clause id="s10.5_p3_c3" num="3">
<linesub end="102763" start="102683">If every</linesub>
<linesub end="102826" start="102695">host on a large network were to do this, it would cause a lot of</linesub>
<linesub end="102861" start="102763">unnecessary multicast traffic.</linesub>
</clause>
<clause id="s10.5_p3_c4" num="4">
<linesub end="102896" start="102795">If host A sends multicast queries</linesub>
<linesub end="102971" start="102832">that remain unanswered, then there is no reason to suppose that host</linesub>
<linesub end="103019" start="102904">B or any other host is likely to be any more successful.</linesub>
</clause>
</paragraph>

<paragraph id="s10.5_p4" num="4">
<clause id="s10.5_p4_c1" num="1">
<linesub end="103104" start="102965">The previous section, "Cache Flush on Failure Indication", describes</linesub>
<linesub end="103174" start="103037">a situation where a user trying to print discovers that the printer</linesub>
<linesub end="103198" start="103108">is no longer available.</linesub>
</clause>
<clause id="s10.5_p4_c2" num="2">
<linesub end="103239" start="103133">By implementing the passive observation</linesub>
<linesub end="103317" start="103176">described here, when one user fails to contact the printer, all hosts</linesub>
<linesub end="103370" start="103249">on the network observe that failure and update their caches</linesub>
<linesub end="103339" start="103312">accordingly.</linesub>
</clause>
</paragraph>

</section>

<section id="s11" name="Source Address Check" num="11">
<paragraph id="s11_p1" importance="should" num="1">
<clause id="s11_p1_c1" importance="should" num="1">
<linesub end="103491" start="103356">All Multicast DNS responses (including responses sent via unicast)</linesub>
<linesub end="103529" start="103426">SHOULD be sent with IP TTL set to 255.</linesub>
</clause>
<clause id="s11_p1_c2" num="2">
<linesub end="103553" start="103466">This is recommended to</linesub>
<linesub end="103625" start="103492">provide backwards-compatibility with older Multicast DNS queriers</linesub>
<linesub end="103696" start="103561">(implementing a draft version of this document, posted in February</linesub>
<linesub end="103764" start="103631">2004) that check the IP TTL on reception to determine whether the</linesub>
<linesub end="103805" start="103700">packet originated on the local link.</linesub>
</clause>
<clause id="s11_p1_c3" num="3">
<linesub end="103835" start="103738">These older queriers discard</linesub>
<linesub end="103847" start="103770">all packets with TTLs other than 255.</linesub>
</clause>
</paragraph>

<paragraph id="s11_p2" importance="must" num="2">
<clause id="s11_p2_c1" importance="must" num="1">
<linesub end="103943" start="103812">A host sending Multicast DNS queries to a link-local destination</linesub>
<linesub end="104019" start="103880">address (including the 224.0.0.251 and FF02::FB link-local multicast</linesub>
<linesub end="104087" start="103952">addresses) MUST only accept responses to that query that originate</linesub>
<linesub end="104163" start="104022">from the local link, and silently discard any other response packets.</linesub>
</clause>
<clause id="s11_p2_c2" num="2">
<linesub end="104230" start="104095">Without this check, it could be possible for remote rogue hosts to</linesub>
<linesub end="104306" start="104165">send spoof answer packets (perhaps unicast to the victim host), which</linesub>
<linesub end="104377" start="104238">the receiving machine could misinterpret as having originated on the</linesub>
<linesub end="104335" start="104310">local link.</linesub>
</clause>
</paragraph>

<paragraph id="s11_p3" num="3">
<clause id="s11_p3_c1" num="1">
<linesub end="104618" start="104479">The test for whether a response originated on the local link is done</linesub>
<linesub end="104578" start="104551">in two ways:</linesub>
</clause>
</paragraph>

<paragraph id="s11_p4" num="4">
<clause id="s11_p4_c1" num="1">
<linesub end="104699" start="104571">* All responses received with a destination address in the IP</linesub>
<linesub end="104763" start="104641">header that is the mDNS IPv4 link-local multicast address</linesub>
<linesub end="104829" start="104707">224.0.0.251 or the mDNS IPv6 link-local multicast address</linesub>
<linesub end="104907" start="104773">FF02::FB are necessarily deemed to have originated on the local</linesub>
<linesub end="104951" start="104845">link, regardless of source IP address.</linesub>
</clause>
<clause id="s11_p4_c2" num="2">
<linesub end="104973" start="104885">This is essential to</linesub>
<linesub end="105032" start="104914">allow devices to work correctly and reliably in unusual</linesub>
<linesub end="105114" start="104978">configurations, such as multiple logical IP subnets overlayed on</linesub>
<linesub end="105179" start="105051">a single link, or in cases of severe misconfiguration, where</linesub>
<linesub end="105244" start="105120">devices are physically connected to the same link, but are</linesub>
<linesub end="105319" start="105187">currently misconfigured with completely unrelated IP addresses</linesub>
<linesub end="105300" start="105258">and subnet masks.</linesub>
</clause>
</paragraph>

<paragraph id="s11_p5" num="5">
<clause id="s11_p5_c1" num="1">
<linesub end="105421" start="105283">* For responses received with a unicast destination address in the</linesub>
<linesub end="105494" start="105358">IP header, the source IP address in the packet is checked to see</linesub>
<linesub end="105539" start="105431">if it is an address on a local subnet.</linesub>
</clause>
<clause id="s11_p5_c2" num="2">
<linesub end="105563" start="105471">An IPv4 source address</linesub>
<linesub end="105626" start="105502">is determined to be on a local subnet if, for (one of) the</linesub>
<linesub end="105705" start="105569">address(es) configured on the interface receiving the packet, (I</linesub>
<linesub end="105770" start="105642">&amp; M) == (P &amp; M), where I and M are the interface address and</linesub>
<linesub end="105841" start="105711">subnet mask respectively, P is the source IP address from the</linesub>
<linesub end="105915" start="105781">packet, '&amp;' represents the bitwise logical 'and' operation, and</linesub>
<linesub end="105965" start="105853">'==' represents a bitwise equality test.</linesub>
</clause>
<clause id="s11_p5_c3" num="3">
<linesub end="105989" start="105895">An IPv6 source address</linesub>
<linesub end="106062" start="105926">is determined to be on the local link if, for any of the on-link</linesub>
<linesub end="106135" start="105999">IPv6 prefixes on the interface receiving the packet (learned via</linesub>
<linesub end="106208" start="106072">IPv6 router advertisements or otherwise configured on the host),</linesub>
<linesub end="106275" start="106145">the first 'n' bits of the IPv6 source address match the first</linesub>
<linesub end="106347" start="106215">'n' bits of the prefix address, where 'n' is the length of the</linesub>
<linesub end="106342" start="106286">prefix being considered.</linesub>
</clause>
</paragraph>

<paragraph id="s11_p6" importance="should" num="6">
<clause id="s11_p6_c1" importance="should" num="1">
<linesub end="106452" start="106315">Since queriers will ignore responses apparently originating outside</linesub>
<linesub end="106525" start="106386">the local subnet, a responder SHOULD avoid generating responses that</linesub>
<linesub end="106572" start="106458">it can reasonably predict will be ignored.</linesub>
</clause>
<clause id="s11_p6_c2" num="2">
<linesub end="106599" start="106502">This applies particularly</linesub>
<linesub end="106633" start="106531">in the case of overlayed subnets.</linesub>
</clause>
<clause id="s11_p6_c3" importance="should" num="3">
<linesub end="106666" start="106566">If a responder receives a query</linesub>
<linesub end="106740" start="106601">addressed to the mDNS IPv4 link-local multicast address 224.0.0.251,</linesub>
<linesub end="106800" start="106673">from a source address not apparently on the same subnet as the</linesub>
<linesub end="106874" start="106739">responder (or, in the case of IPv6, from a source IPv6 address for</linesub>
<linesub end="106950" start="106809">which the responder does not have any address with the same prefix on</linesub>
<linesub end="107013" start="106882">that interface), then even if the query indicates that a unicast</linesub>
<linesub end="107091" start="106950">response is preferred (see Section 5.4, "Questions Requesting Unicast</linesub>
<linesub end="107152" start="107023">Responses"), the responder SHOULD elect to respond by multicast</linesub>
<linesub end="107229" start="107090">anyway, since it can reasonably predict that a unicast response with</linesub>
<linesub end="107293" start="107162">an apparently non-local source address will probably be ignored.</linesub>
</clause>
</paragraph>

</section>

<section id="s12" name="Special Characteristics of Multicast DNS Domains" num="12">
<paragraph id="s12_p1" num="1">
<clause id="s12_p1_c1" num="1">
<linesub end="107581" start="107442">Unlike conventional DNS names, names that end in ".local." have only</linesub>
<linesub end="107604" start="107514">local significance.</linesub>
</clause>
<clause id="s12_p1_c2" num="2">
<linesub end="107653" start="107535">The same is true of names within the IPv4 link-</linesub>
<linesub end="107719" start="107586">local reverse mapping domain "254.169.in-addr.arpa." and the IPv6</linesub>
<linesub end="107764" start="107655">link-local reverse mapping domains "8.e.f.ip6.arpa.",</linesub>
<linesub end="107835" start="107712">"9.e.f.ip6.arpa.", "a.e.f.ip6.arpa.", and "b.e.f.ip6.arpa.".</linesub>
</clause>
</paragraph>

<paragraph id="s12_p2" num="2">
<clause id="s12_p2_c1" num="1">
<linesub end="107914" start="107777">These names function primarily as protocol identifiers, rather than</linesub>
<linesub end="107945" start="107848">as user-visible identifiers.</linesub>
</clause>
<clause id="s12_p2_c2" num="2">
<linesub end="107983" start="107878">Even though they may occasionally be</linesub>
<linesub end="108043" start="107918">visible to end users, that is not their primary purpose.</linesub>
</clause>
<clause id="s12_p2_c3" num="3">
<linesub end="108053" start="107976">As such,</linesub>
<linesub end="108111" start="107988">these names should be treated as opaque identifiers.</linesub>
</clause>
<clause id="s12_p2_c4" num="4">
<linesub end="108127" start="108042">In particular,</linesub>
<linesub end="108185" start="108060">the string "local" should not be translated or localized into</linesub>
<linesub end="108262" start="108125">different languages, much as the name "localhost" is not translated</linesub>
<linesub end="108275" start="108196">or localized into different languages.</linesub>
</clause>
</paragraph>

<paragraph id="s12_p3" num="3">
<clause id="s12_p3_c1" num="1">
<linesub end="108380" start="108239">Conventional Unicast DNS seeks to provide a single unified namespace,</linesub>
<linesub end="108453" start="108312">where a given DNS query yields the same answer no matter where on the</linesub>
<linesub end="108524" start="108385">planet it is performed or to which recursive DNS server the query is</linesub>
<linesub end="108528" start="108457">sent.</linesub>
</clause>
<clause id="s12_p3_c2" num="2">
<linesub end="108586" start="108464">In contrast, each IP link has its own private ".local.",</linesub>
<linesub end="108645" start="108524">"254.169.in-addr.arpa." and IPv6 link-local reverse mapping</linesub>
<linesub end="108716" start="108587">namespaces, and the answer to any query for a name within those</linesub>
<linesub end="108769" start="108654">domains depends on where that query is asked.</linesub>
</clause>
<clause id="s12_p3_c3" num="3">
<linesub end="108791" start="108701">(This characteristic</linesub>
<linesub end="108828" start="108725">is not unique to Multicast DNS.</linesub>
</clause>
<clause id="s12_p3_c4" num="4">
<linesub end="108866" start="108758">Although the original concept of DNS</linesub>
<linesub end="108921" start="108798">was a single global namespace, in recent years, split views,</linesub>
<linesub end="109003" start="108862">firewalls, intranets, DNS geolocation, and the like have increasingly</linesub>
<linesub end="109070" start="108935">meant that the answer to a given DNS query has become dependent on</linesub>
<linesub end="109066" start="109005">the location of the querier.)</linesub>
</clause>
</paragraph>

<paragraph id="s12_p4" num="4">
<clause id="s12_p4_c1" num="1">
<linesub end="109158" start="109039">The IPv4 name server address for a Multicast DNS domain is</linesub>
<linesub end="109185" start="109101">224.0.0.251.</linesub>
</clause>
<clause id="s12_p4_c2" num="2">
<linesub end="109242" start="109115">The IPv6 name server address for a Multicast DNS domain</linesub>
<linesub end="109258" start="109174">is FF02::FB.</linesub>
</clause>
<clause id="s12_p4_c3" num="3">
<linesub end="109315" start="109188">These are multicast addresses; therefore, they identify</linesub>
<linesub end="109384" start="109247">not a single host but a collection of hosts, working in cooperation</linesub>
<linesub end="109453" start="109318">to maintain some reasonable facsimile of a competently managed DNS</linesub>
<linesub end="109461" start="109388">zone.</linesub>
</clause>
<clause id="s12_p4_c4" num="4">
<linesub end="109521" start="109395">Conceptually, a Multicast DNS domain is a single DNS zone;</linesub>
<linesub end="109594" start="109457">however, its server is implemented as a distributed process running</linesub>
<linesub end="109659" start="109528">on a cluster of loosely cooperating CPUs rather than as a single</linesub>
<linesub end="109663" start="109596">process running on a single CPU.</linesub>
</clause>
</paragraph>

<paragraph id="s12_p5" num="5">
<clause id="s12_p5_c1" num="1">
<linesub end="109772" start="109633">Multicast DNS domains are not delegated from their parent domain via</linesub>
<linesub end="109836" start="109705">use of NS (Name Server) records, and there is also no concept of</linesub>
<linesub end="109900" start="109773">delegation of subdomains within a Multicast DNS domain.</linesub>
</clause>
<clause id="s12_p5_c2" num="2">
<linesub end="109914" start="109830">Just because</linesub>
<linesub end="109985" start="109846">a particular host on the network may answer queries for a particular</linesub>
<linesub end="110053" start="109918">record type with the name "example.local." does not imply anything</linesub>
<linesub end="110087" start="109988">about whether that host will answer for the name</linesub>
<linesub end="110173" start="110040">"child.example.local.", or indeed for other record types with the</linesub>
<linesub end="110156" start="110109">name "example.local.".</linesub>
</clause>
</paragraph>

<paragraph id="s12_p6" num="6">
<clause id="s12_p6_c1" num="1">
<linesub end="110418" start="110289">There are no NS records anywhere in Multicast DNS domains.</linesub>
</clause>
<clause id="s12_p6_c2" num="2">
<linesub end="110428" start="110349">Instead,</linesub>
<linesub end="110484" start="110361">the Multicast DNS domains are reserved by IANA, and there is</linesub>
<linesub end="110560" start="110425">effectively an implicit delegation of all Multicast DNS domains to</linesub>
<linesub end="110634" start="110495">the 224.0.0.251:5353 and [FF02::FB]:5353 multicast groups, by virtue</linesub>
<linesub end="110706" start="110567">of client software implementing the protocol rules specified in this</linesub>
<linesub end="110660" start="110639">document.</linesub>
</clause>
</paragraph>

<paragraph id="s12_p7" num="7">
<clause id="s12_p7_c1" num="1">
<linesub end="110779" start="110653">Multicast DNS zones have no SOA (Start of Authority) record.</linesub>
</clause>
<clause id="s12_p7_c2" num="2">
<linesub end="110782" start="110715">A</linesub>
<linesub end="110857" start="110720">conventional DNS zone's SOA record contains information such as the</linesub>
<linesub end="110916" start="110791">email address of the zone administrator and the monotonically</linesub>
<linesub end="110982" start="110856">increasing serial number of the last zone modification.</linesub>
</clause>
<clause id="s12_p7_c3" num="3">
<linesub end="110995" start="110913">There is no</linesub>
<linesub end="111069" start="110928">single human administrator for any given Multicast DNS zone, so there</linesub>
<linesub end="111092" start="111001">is no email address.</linesub>
</clause>
<clause id="s12_p7_c4" num="4">
<linesub end="111140" start="111023">Because the hosts managing any given Multicast</linesub>
<linesub end="111212" start="111073">DNS zone are only loosely coordinated, there is no readily available</linesub>
<linesub end="111280" start="111145">monotonically increasing serial number to determine whether or not</linesub>
<linesub end="111315" start="111215">the zone contents have changed.</linesub>
</clause>
<clause id="s12_p7_c5" num="5">
<linesub end="111350" start="111248">A host holding part of the shared</linesub>
<linesub end="111416" start="111285">zone could crash or be disconnected from the network at any time</linesub>
<linesub end="111453" start="111353">without informing the other hosts.</linesub>
</clause>
<clause id="s12_p7_c6" num="6">
<linesub end="111482" start="111389">There is no reliable way to</linesub>
<linesub end="111553" start="111420">provide a zone serial number that would, whenever such a crash or</linesub>
<linesub end="111618" start="111489">disconnection occurred, immediately change to indicate that the</linesub>
<linesub end="111639" start="111556">contents of the shared zone had changed.</linesub>
</clause>
</paragraph>

<paragraph id="s12_p8" num="8">
<clause id="s12_p8_c1" num="1">
<linesub end="111722" start="111601">Zone transfers are not possible for any Multicast DNS zone.</linesub>
</clause>
</paragraph>

</section>

<section id="s13" name="Enabling and Disabling Multicast DNS" num="13">
<paragraph id="s13_p1" importance="should" num="1">
<clause id="s13_p1_c1" importance="should" num="1">
<linesub end="111839" start="111708">The option to fail-over to Multicast DNS for names not ending in</linesub>
<linesub end="111915" start="111776">".local." SHOULD be a user-configured option, and SHOULD be disabled</linesub>
<linesub end="111973" start="111848">by default because of the possible security issues related to</linesub>
<linesub end="112036" start="111913">unintended local resolution of apparently global names.</linesub>
</clause>
<clause id="s13_p1_c2" num="2">
<linesub end="112046" start="111970">Enabling</linesub>
<linesub end="112123" start="111982">Multicast DNS for names not ending in ".local." may be appropriate on</linesub>
<linesub end="112190" start="112055">a secure isolated network, or on some future network were machines</linesub>
<linesub end="112260" start="112125">exclusively use DNSSEC for all DNS queries, and have Multicast DNS</linesub>
<linesub end="112336" start="112195">responders capable of generating the appropriate cryptographic DNSSEC</linesub>
<linesub end="112363" start="112268">signatures, thereby guarding against spoofing.</linesub>
</clause>
</paragraph>

<paragraph id="s13_p2" num="2">
<clause id="s13_p2_c1" num="1">
<linesub end="112448" start="112319">The option to look up unqualified (relative) names by appending</linesub>
<linesub end="112519" start="112386">".local." (or not) is controlled by whether ".local." appears (or</linesub>
<linesub end="112532" start="112455">not) in the client's DNS search list.</linesub>
</clause>
</paragraph>

<paragraph id="s13_p3" num="3">
<clause id="s13_p3_c1" num="1">
<linesub end="112638" start="112497">No special control is needed for enabling and disabling Multicast DNS</linesub>
<linesub end="112705" start="112570">for names explicitly ending with ".local." as entered by the user.</linesub>
</clause>
<clause id="s13_p3_c2" num="2">
<linesub end="112781" start="112640">The user doesn't need a way to disable Multicast DNS for names ending</linesub>
<linesub end="112846" start="112713">with ".local.", because if the user doesn't want to use Multicast</linesub>
<linesub end="112909" start="112782">DNS, they can achieve this by simply not using those names.</linesub>
</clause>
<clause id="s13_p3_c3" num="3">
<linesub end="112915" start="112843">If a</linesub>
<linesub end="112982" start="112851">user *does* enter a name ending in ".local.", then we can safely</linesub>
<linesub end="113052" start="112919">assume the user's intention was probably that it should work.</linesub>
</clause>
<clause id="s13_p3_c4" num="4">
<linesub end="113060" start="112982">Having</linesub>
<linesub end="113107" start="112992">user configuration options that can be (intentionally or</linesub>
<linesub end="113344" start="113205">unintentionally) set so that local names don't work is just one more</linesub>
<linesub end="113418" start="113277">way of frustrating the user's ability to perform the tasks they want,</linesub>
<linesub end="113481" start="113350">perpetuating the view that, "IP networking is too complicated to</linesub>
<linesub end="113483" start="113418">configure and too hard to use".</linesub>
</clause>
</paragraph>

</section>

<section id="s14" name="Considerations for Multiple Interfaces" num="14">
<paragraph id="s14_p1" importance="should" num="1">
<clause id="s14_p1_c1" importance="should" num="1">
<linesub end="113640" start="113499">A host SHOULD defend its dot-local host name on all active interfaces</linesub>
<linesub end="113669" start="113572">on which it is answering Multicast DNS queries.</linesub>
</clause>
</paragraph>

<paragraph id="s14_p2" num="2">
<clause id="s14_p2_c1" num="1">
<linesub end="113757" start="113624">In the event of a name conflict on *any* interface, a host should</linesub>
<linesub end="113834" start="113693">configure a new host name, if it wishes to maintain uniqueness of its</linesub>
<linesub end="113789" start="113766">host name.</linesub>
</clause>
</paragraph>

<paragraph id="s14_p3" num="3">
<clause id="s14_p3_c1" num="1">
<linesub end="113918" start="113781">A host may choose to use the same name (or set of names) for all of</linesub>
<linesub end="113993" start="113852">its address records on all interfaces, or it may choose to manage its</linesub>
<linesub end="114060" start="113925">Multicast DNS interfaces independently, potentially answering to a</linesub>
<linesub end="114112" start="113995">different name (or set of names) on different interfaces.</linesub>
</clause>
</paragraph>

<paragraph id="s14_p4" importance="must" num="4">
<clause id="s14_p4_c1" importance="must" num="1">
<linesub end="114192" start="114057">Except in the case of proxying and other similar specialized uses,</linesub>
<linesub end="114266" start="114127">addresses in IPv4 or IPv6 address records in Multicast DNS responses</linesub>
<linesub end="114340" start="114199">MUST be valid for use on the interface on which the response is being</linesub>
<linesub end="114285" start="114272">sent.</linesub>
</clause>
</paragraph>

<paragraph id="s14_p5" num="5">
<clause id="s14_p5_c1" num="1">
<linesub end="114405" start="114282">Just as the same link-local IP address may validly be in use</linesub>
<linesub end="114485" start="114346">simultaneously on different links by different hosts, the same link-</linesub>
<linesub end="114551" start="114418">local host name may validly be in use simultaneously on different</linesub>
<linesub end="114590" start="114487">links, and this is not an error.</linesub>
</clause>
<clause id="s14_p5_c2" num="2">
<linesub end="114626" start="114521">A multihomed host with connections</linesub>
<linesub end="114698" start="114559">to two different links may be able to communicate with two different</linesub>
<linesub end="114745" start="114631">hosts that are validly using the same name.</linesub>
</clause>
<clause id="s14_p5_c3" num="3">
<linesub end="114770" start="114676">While this kind of name</linesub>
<linesub end="114842" start="114703">duplication should be rare, it means that a host that wants to fully</linesub>
<linesub end="114896" start="114775">support this case needs network programming APIs that allow</linesub>
<linesub end="114971" start="114838">applications to specify on what interface to perform a link-local</linesub>
<linesub end="115042" start="114907">Multicast DNS query, and to discover on what interface a Multicast</linesub>
<linesub end="115032" start="114977">DNS response was received.</linesub>
</clause>
</paragraph>

<paragraph id="s14_p6" num="6">
<clause id="s14_p6_c1" num="1">
<linesub end="115145" start="115008">There is one other special precaution that multihomed hosts need to</linesub>
<linesub end="115155" start="115079">take.</linesub>
</clause>
<clause id="s14_p6_c2" num="2">
<linesub end="115218" start="115086">It's common with today's laptop computers to have an Ethernet</linesub>
<linesub end="115290" start="115151">connection and an 802.11 [IEEE.802.11] wireless connection active at</linesub>
<linesub end="115309" start="115223">the same time.</linesub>
</clause>
<clause id="s14_p6_c3" num="3">
<linesub end="115364" start="115239">What the software on the laptop computer can't easily</linesub>
<linesub end="115433" start="115296">tell is whether the wireless connection is in fact bridged onto the</linesub>
<linesub end="115487" start="115367">same network segment as its Ethernet connection.</linesub>
</clause>
<clause id="s14_p6_c4" num="4">
<linesub end="115508" start="115417">If the two networks</linesub>
<linesub end="115575" start="115440">are bridged together, then packets the host sends on one interface</linesub>
<linesub end="115651" start="115510">will arrive on the other interface a few milliseconds later, and care</linesub>
<linesub end="115720" start="115583">must be taken to ensure that this bridging does not cause problems:</linesub>
</clause>
</paragraph>

<paragraph id="s14_p7" num="7">
<clause id="s14_p7_c1" num="1">
<linesub end="115949" start="115810">When the host announces its host name (i.e., its address records) on</linesub>
<linesub end="116021" start="115882">its wireless interface, those announcement records are sent with the</linesub>
<linesub end="116087" start="115954">cache-flush bit set, so when they arrive on the Ethernet segment,</linesub>
<linesub end="116156" start="116023">they will cause all the peers on the Ethernet to flush the host's</linesub>
<linesub end="116200" start="116092">Ethernet address records from their caches.</linesub>
</clause>
<clause id="s14_p7_c2" num="2">
<linesub end="116219" start="116137">The Multicast DNS</linesub>
<linesub end="116289" start="116158">protocol has a safeguard to protect against this situation: when</linesub>
<linesub end="116365" start="116226">records are received with the cache-flush bit set, other records are</linesub>
<linesub end="116439" start="116298">not deleted from peer caches immediately, but are marked for deletion</linesub>
<linesub end="116455" start="116371">in one second.</linesub>
</clause>
<clause id="s14_p7_c3" num="3">
<linesub end="116508" start="116387">When the host sees its own wireless address records</linesub>
<linesub end="116581" start="116442">arrive on its Ethernet interface, with the cache-flush bit set, this</linesub>
<linesub end="116641" start="116514">one-second grace period gives the host time to respond and re-</linesub>
<linesub end="116719" start="116580">announce its Ethernet address records, to reinstate those records in</linesub>
<linesub end="116727" start="116652">peer caches before they are deleted.</linesub>
</clause>
</paragraph>

<paragraph id="s14_p8" num="8">
<clause id="s14_p8_c1" num="1">
<linesub end="116830" start="116693">As described, this solves one problem, but creates another, because</linesub>
<linesub end="116903" start="116764">when those Ethernet announcement records arrive back on the wireless</linesub>
<linesub end="116975" start="116836">interface, the host would again respond defensively to reinstate its</linesub>
<linesub end="117027" start="116908">wireless records, and this process would continue forever,</linesub>
<linesub end="117086" start="116970">continuously flooding the network with traffic.</linesub>
</clause>
<clause id="s14_p8_c2" num="2">
<linesub end="117105" start="117019">The Multicast DNS</linesub>
<linesub end="117175" start="117040">protocol has a second safeguard, to solve this problem: the cache-</linesub>
<linesub end="117245" start="117110">flush bit does not apply to records received very recently, within</linesub>
<linesub end="117268" start="117180">the last second.</linesub>
</clause>
<clause id="s14_p8_c3" num="3">
<linesub end="117321" start="117198">This means that when the host sees its own Ethernet</linesub>
<linesub end="117386" start="117253">address records arrive on its wireless interface, with the cache-</linesub>
<linesub end="117459" start="117322">flush bit set, it knows there's no need to re-announce its wireless</linesub>
<linesub end="117534" start="117393">address records again because it already sent them less than a second</linesub>
<linesub end="117601" start="117466">ago, and this makes them immune from deletion from peer caches.</linesub>
</clause>
<clause id="s14_p8_c4" num="4">
<linesub end="117607" start="117531">(See</linesub>
<linesub end="117570" start="117539">Section 10.2.)</linesub>
</clause>
</paragraph>

</section>

<section id="s15" name="Considerations for Multiple Responders on the Same Machine" num="15">
<paragraph id="s15_p1" num="1">
<clause id="s15_p1_c1" num="1">
<linesub end="117760" start="117623">It is possible to have more than one Multicast DNS responder and/or</linesub>
<linesub end="117827" start="117694">querier implementation coexist on the same machine, but there are</linesub>
<linesub end="117802" start="117763">some known issues.</linesub>
</clause>
</paragraph>

</section>

<section id="s15.1" name="Receiving Unicast Responses" num="15.1">
<paragraph id="s15.1_p1" importance="should" num="1">
<clause id="s15.1_p1_c1" num="1">
<linesub end="117949" start="117822">In most operating systems, incoming *multicast* packets can be</linesub>
<linesub end="118017" start="117888">delivered to *all* open sockets bound to the right port number,</linesub>
<linesub end="118092" start="117955">provided that the clients take the appropriate steps to allow this.</linesub>
</clause>
<clause id="s15.1_p1_c2" importance="should" num="2">
<linesub end="118159" start="118026">For this reason, all Multicast DNS implementations SHOULD use the</linesub>
<linesub end="118214" start="118095">SO_REUSEPORT and/or SO_REUSEADDR options (or equivalent as</linesub>
<linesub end="118298" start="118157">appropriate for the operating system in question) so they will all be</linesub>
<linesub end="118369" start="118230">able to bind to UDP port 5353 and receive incoming multicast packets</linesub>
<linesub end="118396" start="118302">addressed to that port.</linesub>
</clause>
<clause id="s15.1_p1_c3" num="3">
<linesub end="118441" start="118327">However, unlike multicast packets, incoming</linesub>
<linesub end="118513" start="118374">unicast UDP packets are typically delivered only to the first socket</linesub>
<linesub end="118533" start="118446">to bind to that port.</linesub>
</clause>
<clause id="s15.1_p1_c4" num="4">
<linesub end="118575" start="118469">This means that "QU" responses and other</linesub>
<linesub end="118654" start="118513">packets sent via unicast will be received only by the first Multicast</linesub>
<linesub end="118695" start="118586">DNS responder and/or querier on a system.</linesub>
</clause>
<clause id="s15.1_p1_c5" num="5">
<linesub end="118719" start="118629">This limitation can be</linesub>
<linesub end="118949" start="118808">partially mitigated if Multicast DNS implementations detect when they</linesub>
<linesub end="119020" start="118881">are not the first to bind to port 5353, and in that case they do not</linesub>
<linesub end="119041" start="118953">request "QU" responses.</linesub>
</clause>
<clause id="s15.1_p1_c6" num="6">
<linesub end="119080" start="118978">One way to detect if there is another</linesub>
<linesub end="119160" start="119019">Multicast DNS implementation already running is to attempt binding to</linesub>
<linesub end="119233" start="119092">port 5353 without using SO_REUSEPORT and/or SO_REUSEADDR, and if that</linesub>
<linesub end="119300" start="119165">fails it indicates that some other socket is already bound to this</linesub>
<linesub end="119248" start="119235">port.</linesub>
</clause>
</paragraph>

</section>

<section id="s15.2" name="Multipacket Known-Answer lists" num="15.2">
<paragraph id="s15.2_p1" num="1">
<clause id="s15.2_p1_c1" num="1">
<linesub end="119413" start="119284">When a Multicast DNS querier issues a query with too many Known</linesub>
<linesub end="119492" start="119351">Answers to fit into a single packet, it divides the Known-Answer list</linesub>
<linesub end="119517" start="119424">into two or more packets.</linesub>
</clause>
<clause id="s15.2_p1_c2" num="2">
<linesub end="119557" start="119451">Multicast DNS responders associate the</linesub>
<linesub end="119628" start="119493">initial truncated query with its continuation packets by examining</linesub>
<linesub end="119663" start="119563">the source IP address in each packet.</linesub>
</clause>
<clause id="s15.2_p1_c3" num="3">
<linesub end="119686" start="119602">Since two independent</linesub>
<linesub end="119762" start="119627">Multicast DNS queriers running on the same machine will be sending</linesub>
<linesub end="119836" start="119697">packets with the same source IP address, from an outside perspective</linesub>
<linesub end="119875" start="119769">they appear to be a single entity.</linesub>
</clause>
<clause id="s15.2_p1_c4" num="4">
<linesub end="119910" start="119805">If both queriers happened to send</linesub>
<linesub end="119977" start="119842">the same multipacket query at the same time, with different Known-</linesub>
<linesub end="120047" start="119912">Answer lists, then they could each end up suppressing answers that</linesub>
<linesub end="120017" start="119982">the other needs.</linesub>
</clause>
</paragraph>

</section>

<section id="s15.3" name="Efficiency" num="15.3">
<paragraph id="s15.3_p1" num="1">
<clause id="s15.3_p1_c1" num="1">
<linesub end="120147" start="120022">If different clients on a machine were each to have their own</linesub>
<linesub end="120220" start="120087">independent Multicast DNS implementation, they would lose certain</linesub>
<linesub end="120245" start="120156">efficiency benefits.</linesub>
</clause>
<clause id="s15.3_p1_c2" num="2">
<linesub end="120291" start="120178">Apart from the unnecessary code duplication,</linesub>
<linesub end="120367" start="120226">memory usage, and CPU load, the clients wouldn't get the benefit of a</linesub>
<linesub end="120432" start="120299">shared system-wide cache, and they would not be able to aggregate</linesub>
<linesub end="120497" start="120368">separate queries into single packets to reduce network traffic.</linesub>
</clause>
</paragraph>

</section>

<section id="s15.4" name="Recommendation" num="15.4">
<paragraph id="s15.4_p1" num="1">
<clause id="s15.4_p1_c1" num="1">
<linesub end="120592" start="120459">Because of these issues, this document encourages implementers to</linesub>
<linesub end="120655" start="120528">design systems with a single Multicast DNS implementation that</linesub>
<linesub end="120719" start="120594">provides Multicast DNS services shared by all clients on that</linesub>
<linesub end="120788" start="120659">machine, much as most operating systems today have a single TCP</linesub>
<linesub end="120865" start="120726">implementation, which is shared between all clients on that machine.</linesub>
</clause>
<clause id="s15.4_p1_c2" num="2">
<linesub end="120923" start="120798">Due to engineering constraints, there may be situations where</linesub>
<linesub end="121000" start="120863">embedding a "user-level" Multicast DNS implementation in the client</linesub>
<linesub end="121071" start="120934">application software is the most expedient solution, and while this</linesub>
<linesub end="121140" start="121005">will usually work in practice, implementers should be aware of the</linesub>
<linesub end="121142" start="121075">issues outlined in this section.</linesub>
</clause>
</paragraph>

</section>

<section id="s16" name="Multicast DNS Character Set" num="16">
<paragraph id="s16_p1" num="1">
<clause id="s16_p1_c1" num="1">
<linesub end="121444" start="121303">Historically, Unicast DNS has been used with a very restricted set of</linesub>
<linesub end="121454" start="121376">characters.</linesub>
</clause>
<clause id="s16_p1_c2" num="2">
<linesub end="121507" start="121389">Indeed, conventional DNS is usually limited to just</linesub>
<linesub end="121577" start="121444">twenty-six letters, ten digits and the hyphen character, not even</linesub>
<linesub end="121619" start="121513">allowing spaces or other punctuation.</linesub>
</clause>
<clause id="s16_p1_c3" num="3">
<linesub end="121648" start="121552">Attempts to remedy this for</linesub>
<linesub end="121714" start="121583">Unicast DNS have been badly constrained by the perceived need to</linesub>
<linesub end="121769" start="121651">accommodate old buggy legacy DNS implementations.</linesub>
</clause>
<clause id="s16_p1_c4" num="4">
<linesub end="121786" start="121702">In reality, the</linesub>
<linesub end="121842" start="121721">DNS specification itself actually imposes no limits on what</linesub>
<linesub end="121923" start="121784">characters may be used in names, and good DNS implementations handle</linesub>
<linesub end="121973" start="121856">any arbitrary eight-bit data without trouble.</linesub>
</clause>
<clause id="s16_p1_c5" num="5">
<linesub end="121997" start="121903">"Clarifications to the</linesub>
<linesub end="122056" start="121929">DNS Specification" [RFC2181] directly discusses the subject of</linesub>
<linesub end="122136" start="121995">allowable character set in Section 11 ("Name syntax"), and explicitly</linesub>
<linesub end="122199" start="122068">states that DNS names may contain arbitrary eight-bit data.</linesub>
</clause>
<clause id="s16_p1_c6" num="6">
<linesub end="122209" start="122129">However,</linesub>
<linesub end="122280" start="122141">the old rules for ARPANET host names back in the 1980s required host</linesub>
<linesub end="122348" start="122213">names to be just letters, digits, and hyphens [RFC1034], and since</linesub>
<linesub end="122416" start="122283">the predominant use of DNS is to store host address records, many</linesub>
<linesub end="122481" start="122352">have assumed that the DNS protocol itself suffers from the same</linesub>
<linesub end="122493" start="122419">limitation.</linesub>
</clause>
<clause id="s16_p1_c7" num="7">
<linesub end="122542" start="122432">It might be accurate to say that there could be</linesub>
<linesub end="122618" start="122483">hypothetical bad implementations that do not handle eight-bit data</linesub>
<linesub end="122684" start="122553">correctly, but it would not be accurate to say that the protocol</linesub>
<linesub end="122716" start="122621">doesn't allow names containing eight-bit data.</linesub>
</clause>
</paragraph>

<paragraph id="s16_p2" importance="must" num="2">
<clause id="s16_p2_c1" num="1">
<linesub end="122803" start="122672">Multicast DNS is a new protocol and doesn't (yet) have old buggy</linesub>
<linesub end="122867" start="122740">legacy implementations to constrain the design choices.</linesub>
</clause>
<clause id="s16_p2_c2" importance="must" num="2">
<linesub end="122881" start="122797">Accordingly,</linesub>
<linesub end="122954" start="122813">it adopts the simple obvious elegant solution: all names in Multicast</linesub>
<linesub end="123017" start="122886">DNS MUST be encoded as precomposed UTF-8 [RFC3629] "Net-Unicode"</linesub>
<linesub end="122987" start="122954">[RFC5198] text.</linesub>
</clause>
</paragraph>

<paragraph id="s16_p3" importance="must" num="3">
<clause id="s16_p3_c1" num="1">
<linesub end="123107" start="122974">Some users of 16-bit Unicode have taken to stuffing a "zero-width</linesub>
<linesub end="123176" start="123043">nonbreaking space" character (U+FEFF) at the start of each UTF-16</linesub>
<linesub end="123253" start="123112">file, as a hint to identify whether the data is big-endian or little-</linesub>
<linesub end="123302" start="123185">endian, and calling it a "Byte Order Mark" (BOM).</linesub>
</clause>
<clause id="s16_p3_c2" num="2">
<linesub end="123318" start="123236">Since there is</linesub>
<linesub end="123379" start="123254">only one possible byte order for UTF-8 data, a BOM is neither</linesub>
<linesub end="123410" start="123319">necessary nor permitted.</linesub>
</clause>
<clause id="s16_p3_c3" importance="must" num="3">
<linesub end="123450" start="123345">Multicast DNS names MUST NOT contain a</linesub>
<linesub end="123477" start="123387">"Byte Order Mark".</linesub>
</clause>
<clause id="s16_p3_c4" importance="must" num="4">
<linesub end="123528" start="123407">Any occurrence of the Unicode character U+FEFF at</linesub>
<linesub end="123579" start="123460">the start or anywhere else in a Multicast DNS name MUST be</linesub>
<linesub end="123639" start="123522">interpreted as being an actual intended part of the name,</linesub>
<linesub end="123718" start="123583">representing (just as for any other legal unicode value) an actual</linesub>
<linesub end="123788" start="123653">literal instance of that character (in this case a zero-width non-</linesub>
<linesub end="123778" start="123723">breaking space character).</linesub>
</clause>
</paragraph>

<paragraph id="s16_p4" num="4">
<clause id="s16_p4_c1" num="1">
<linesub end="123893" start="123754">For names that are restricted to US-ASCII [RFC0020] letters, digits,</linesub>
<linesub end="123949" start="123826">and hyphens, the UTF-8 encoding is identical to the US-ASCII</linesub>
<linesub end="124025" start="123890">encoding, so this is entirely compatible with existing host names.</linesub>
</clause>
<clause id="s16_p4_c2" num="2">
<linesub end="124095" start="123960">For characters outside the US-ASCII range, UTF-8 encoding is used.</linesub>
</clause>
</paragraph>

<paragraph id="s16_p5" importance="must" num="5">
<clause id="s16_p5_c1" importance="must" num="1">
<linesub end="124324" start="124185">Multicast DNS implementations MUST NOT use any other encodings apart</linesub>
<linesub end="124398" start="124257">from precomposed UTF-8 (US-ASCII being considered a compatible subset</linesub>
<linesub end="124406" start="124330">of UTF-8).</linesub>
</clause>
<clause id="s16_p5_c2" num="2">
<linesub end="124459" start="124342">The reasons for selecting UTF-8 instead of Punycode</linesub>
<linesub end="124492" start="124397">[RFC3492] are discussed further in Appendix F.</linesub>
</clause>
</paragraph>

<paragraph id="s16_p6" num="6">
<clause id="s16_p6_c1" num="1">
<linesub end="124579" start="124448">The simple rules for case-insensitivity in Unicast DNS [RFC1034]</linesub>
<linesub end="124643" start="124516">[RFC1035] also apply in Multicast DNS; that is to say, in name</linesub>
<linesub end="124717" start="124582">comparisons, the lowercase letters "a" to "z" (0x61 to 0x7A) match</linesub>
<linesub end="124776" start="124652">their uppercase equivalents "A" to "Z" (0x41 to 0x5A).</linesub>
</clause>
<clause id="s16_p6_c2" num="2">
<linesub end="124789" start="124708">Hence, if a</linesub>
<linesub end="124842" start="124723">querier issues a query for an address record with the name</linesub>
<linesub end="124920" start="124785">"myprinter.local.", then a responder having an address record with</linesub>
<linesub end="124972" start="124855">the name "MyPrinter.local." should issue a response.</linesub>
</clause>
<clause id="s16_p6_c3" num="3">
<linesub end="124982" start="124909">No other</linesub>
<linesub end="125032" start="124921">automatic equivalences should be assumed.</linesub>
</clause>
<clause id="s16_p6_c4" num="4">
<linesub end="125058" start="124964">In particular, all UTF-8</linesub>
<linesub end="125129" start="124992">multibyte characters (codes 0x80 and higher) are compared by simple</linesub>
<linesub end="125173" start="125063">binary comparison of the raw byte values.</linesub>
</clause>
<clause id="s16_p6_c5" num="5">
<linesub end="125198" start="125106">Accented characters are</linesub>
<linesub end="125264" start="125133">*not* defined to be automatically equivalent to their unaccented</linesub>
<linesub end="125285" start="125201">counterparts.</linesub>
</clause>
<clause id="s16_p6_c6" num="6">
<linesub end="125340" start="125216">Where automatic equivalences are desired, this may be</linesub>
<linesub end="125414" start="125273">achieved through the use of programmatically generated CNAME records.</linesub>
</clause>
<clause id="s16_p6_c7" num="7">
<linesub end="125479" start="125346">For example, if a responder has an address record for an accented</linesub>
<linesub end="125548" start="125415">name Y, and a querier issues a query for a name X, where X is the</linesub>
<linesub end="125623" start="125484">same as Y with all the accents removed, then the responder may issue</linesub>
<linesub end="125693" start="125556">a response containing two resource records: a CNAME record "X CNAME</linesub>
<linesub end="125766" start="125627">Y", asserting that the requested name X (unaccented) is an alias for</linesub>
<linesub end="125832" start="125699">the true (accented) name Y, followed by the address record for Y.</linesub>
</clause>
</paragraph>

</section>

<section id="s17" name="Multicast DNS Message Size" num="17">
<paragraph id="s17_p1" num="1">
<clause id="s17_p1_c1" num="1">
<linesub end="125939" start="125802">The 1987 DNS specification [RFC1035] restricts DNS messages carried</linesub>
<linesub end="125996" start="125873">by UDP to no more than 512 bytes (not counting the IP or UDP</linesub>
<linesub end="126014" start="125937">headers).</linesub>
</clause>
<clause id="s17_p1_c2" num="2">
<linesub end="126070" start="125948">For UDP packets carried over the wide-area Internet in</linesub>
<linesub end="126100" start="126006">1987, this was appropriate.</linesub>
</clause>
<clause id="s17_p1_c3" num="3">
<linesub end="126137" start="126035">For link-local multicast packets on</linesub>
<linesub end="126205" start="126074">today's networks, there is no reason to retain this restriction.</linesub>
</clause>
<clause id="s17_p1_c4" num="4">
<linesub end="126275" start="126142">Given that the packets are by definition link-local, there are no</linesub>
<linesub end="126270" start="126211">Path MTU issues to consider.</linesub>
</clause>
</paragraph>

<paragraph id="s17_p2" num="2">
<clause id="s17_p2_c1" num="1">
<linesub end="126383" start="126244">Multicast DNS messages carried by UDP may be up to the IP MTU of the</linesub>
<linesub end="126449" start="126316">physical interface, less the space required for the IP header (20</linesub>
<linesub end="126516" start="126385">bytes for IPv4; 40 bytes for IPv6) and the UDP header (8 bytes).</linesub>
</clause>
</paragraph>

<paragraph id="s17_p3" importance="should" num="3">
<clause id="s17_p3_c1" importance="should" num="1">
<linesub end="126587" start="126454">In the case of a single Multicast DNS resource record that is too</linesub>
<linesub end="126652" start="126523">large to fit in a single MTU-sized multicast response packet, a</linesub>
<linesub end="126727" start="126590">Multicast DNS responder SHOULD send the resource record alone, in a</linesub>
<linesub end="126778" start="126661">single IP datagram, using multiple IP fragments.</linesub>
</clause>
<clause id="s17_p3_c2" importance="should" num="2">
<linesub end="126796" start="126711">Resource records</linesub>
<linesub end="126864" start="126731">this large SHOULD be avoided, except in the very rare cases where</linesub>
<linesub end="126931" start="126800">they really are the appropriate solution to the problem at hand.</linesub>
</clause>
<clause id="s17_p3_c3" importance="should" num="3">
<linesub end="126991" start="126868">Implementers should be aware that many simple devices do not</linesub>
<linesub end="127071" start="126932">reassemble fragmented IP datagrams, so large resource records SHOULD</linesub>
<linesub end="127141" start="127004">NOT be used except in specialized cases where the implementer knows</linesub>
<linesub end="127367" start="127228">that all receivers implement reassembly, or where the large resource</linesub>
<linesub end="127431" start="127300">record contains optional data which is not essential for correct</linesub>
<linesub end="127419" start="127368">operation of the client.</linesub>
</clause>
</paragraph>

<paragraph id="s17_p4" importance="must" num="4">
<clause id="s17_p4_c1" importance="must" num="1">
<linesub end="127534" start="127397">A Multicast DNS packet larger than the interface MTU, which is sent</linesub>
<linesub end="127599" start="127468">using fragments, MUST NOT contain more than one resource record.</linesub>
</clause>
</paragraph>

<paragraph id="s17_p5" importance="must" num="5">
<clause id="s17_p5_c1" importance="must" num="1">
<linesub end="127678" start="127537">Even when fragmentation is used, a Multicast DNS packet, including IP</linesub>
<linesub end="127701" start="127610">and UDP headers, MUST NOT exceed 9000 bytes.</linesub>
</clause>
</paragraph>

<paragraph id="s17_p6" num="6">
<clause id="s17_p6_c1" num="1">
<linesub end="127798" start="127659">Note that 9000 bytes is also the maximum payload size of an Ethernet</linesub>
<linesub end="127819" start="127731">"Jumbo" packet [Jumbo].</linesub>
</clause>
<clause id="s17_p6_c2" num="2">
<linesub end="127858" start="127756">However, in practice Ethernet "Jumbo"</linesub>
<linesub end="127932" start="127797">packets are not widely used, so it is advantageous to keep packets</linesub>
<linesub end="127969" start="127867">under 1500 bytes whenever possible.</linesub>
</clause>
<clause id="s17_p6_c3" num="3">
<linesub end="127998" start="127904">Even on hosts that normally</linesub>
<linesub end="128068" start="127935">handle Ethernet "Jumbo" packets and IP fragment reassembly, it is</linesub>
<linesub end="128143" start="128004">becoming more common for these hosts to implement power-saving modes</linesub>
<linesub end="128217" start="128076">where the main CPU goes to sleep and hands off packet reception tasks</linesub>
<linesub end="128288" start="128149">to a more limited processor in the network interface hardware, which</linesub>
<linesub end="128358" start="128221">may not support Ethernet "Jumbo" packets or IP fragment reassembly.</linesub>
</clause>
</paragraph>

</section>

<section id="s18" name="Multicast DNS Message Format" num="18">
<paragraph id="s18_p1" num="1">
<clause id="s18_p1_c1" num="1">
<linesub end="128461" start="128328">This section describes specific rules pertaining to the allowable</linesub>
<linesub end="128532" start="128397">values for the header fields of a Multicast DNS message, and other</linesub>
<linesub end="128530" start="128467">message format considerations.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.1" name="ID (Query Identifier)" num="18.1">
<paragraph id="s18.1_p1" importance="should" num="1">
<clause id="s18.1_p1_c1" importance="should" num="1">
<linesub end="128673" start="128532">Multicast DNS implementations SHOULD listen for unsolicited responses</linesub>
<linesub end="128736" start="128605">issued by hosts booting up (or waking up from sleep or otherwise</linesub>
<linesub end="128765" start="128673">joining the network).</linesub>
</clause>
<clause id="s18.1_p1_c2" importance="should" num="2">
<linesub end="128812" start="128696">Since these unsolicited responses may contain</linesub>
<linesub end="128876" start="128745">a useful answer to a question for which the querier is currently</linesub>
<linesub end="128952" start="128813">awaiting an answer, Multicast DNS implementations SHOULD examine all</linesub>
<linesub end="129024" start="128885">received Multicast DNS response messages for useful answers, without</linesub>
<linesub end="129090" start="128957">regard to the contents of the ID field or the Question Section.</linesub>
</clause>
<clause id="s18.1_p1_c3" num="3">
<linesub end="129094" start="129022">In</linesub>
<linesub end="129161" start="129028">Multicast DNS, knowing which particular query message (if any) is</linesub>
<linesub end="129226" start="129097">responsible for eliciting a particular response message is less</linesub>
<linesub end="129305" start="129164">interesting than knowing whether the response message contains useful</linesub>
<linesub end="129264" start="129237">information.</linesub>
</clause>
</paragraph>

<paragraph id="s18.1_p2" importance="may" num="2">
<clause id="s18.1_p2_c1" importance="may" num="1">
<linesub end="129377" start="129254">Multicast DNS implementations MAY cache data from any or all</linesub>
<linesub end="129451" start="129318">Multicast DNS response messages they receive, for possible future</linesub>
<linesub end="129524" start="129387">use, provided of course that normal TTL aging is performed on these</linesub>
<linesub end="129509" start="129458">cached resource records.</linesub>
</clause>
</paragraph>

<paragraph id="s18.1_p3" importance="should" num="3">
<clause id="s18.1_p3_c1" importance="should" num="1">
<linesub end="129622" start="129487">In multicast query messages, the Query Identifier SHOULD be set to</linesub>
<linesub end="129602" start="129557">zero on transmission.</linesub>
</clause>
</paragraph>

<paragraph id="s18.1_p4" importance="must" num="4">
<clause id="s18.1_p4_c1" importance="must" num="1">
<linesub end="129871" start="129736">In multicast responses, including unsolicited multicast responses,</linesub>
<linesub end="129947" start="129806">the Query Identifier MUST be set to zero on transmission, and MUST be</linesub>
<linesub end="129924" start="129879">ignored on reception.</linesub>
</clause>
</paragraph>

<paragraph id="s18.1_p5" importance="must" num="5">
<clause id="s18.1_p5_c1" importance="must" num="1">
<linesub end="130030" start="129905">In legacy unicast response messages generated specifically in</linesub>
<linesub end="130101" start="129970">response to a particular (unicast or multicast) query, the Query</linesub>
<linesub end="130145" start="130038">Identifier MUST match the ID from the query message.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.2" name="QR (Query/Response) Bit" num="18.2">
<paragraph id="s18.2_p1" importance="must" num="1">
<clause id="s18.2_p1_c1" importance="must" num="1">
<linesub end="130214" start="130127">In query messages the QR bit MUST be zero.</linesub>
</clause>
<clause id="s18.2_p1_c2" importance="must" num="2">
<linesub end="130264" start="130173">In response messages the QR bit MUST be one.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.3" name="OPCODE" num="18.3">
<paragraph id="s18.3_p1" importance="must" num="1">
<clause id="s18.3_p1_c1" importance="must" num="1">
<linesub end="130374" start="130237">In both multicast query and multicast response messages, the OPCODE</linesub>
<linesub end="130441" start="130308">MUST be zero on transmission (only standard queries are currently</linesub>
<linesub end="130473" start="130377">supported over multicast).</linesub>
</clause>
<clause id="s18.3_p1_c2" importance="must" num="2">
<linesub end="130514" start="130405">Multicast DNS messages received with an</linesub>
<linesub end="130547" start="130448">OPCODE other than zero MUST be silently ignored.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.4" name="AA (Authoritative Answer) Bit" num="18.4">
<paragraph id="s18.4_p1" importance="must" num="1">
<clause id="s18.4_p1_c1" importance="must" num="1">
<linesub end="130668" start="130539">In query messages, the Authoritative Answer bit MUST be zero on</linesub>
<linesub end="130703" start="130606">transmission, and MUST be ignored on reception.</linesub>
</clause>
</paragraph>

<paragraph id="s18.4_p2" importance="must" num="2">
<clause id="s18.4_p2_c1" importance="must" num="1">
<linesub end="130797" start="130658">In response messages for Multicast domains, the Authoritative Answer</linesub>
<linesub end="130871" start="130730">bit MUST be set to one (not setting this bit would imply there's some</linesub>
<linesub end="130934" start="130803">other place where "better" information may be found) and MUST be</linesub>
<linesub end="130916" start="130871">ignored on reception.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.5" name="TC (Truncated) Bit" num="18.5">
<paragraph id="s18.5_p1" importance="should" num="1">
<clause id="s18.5_p1_c1" num="1">
<linesub end="131057" start="130924">In query messages, if the TC bit is set, it means that additional</linesub>
<linesub end="131108" start="130993">Known-Answer records may be following shortly.</linesub>
</clause>
<clause id="s18.5_p1_c2" importance="should" num="2">
<linesub end="131128" start="131041">A responder SHOULD</linesub>
<linesub end="131204" start="131063">record this fact, and wait for those additional Known-Answer records,</linesub>
<linesub end="131243" start="131136">before deciding whether to respond.</linesub>
</clause>
<clause id="s18.5_p1_c3" num="3">
<linesub end="131277" start="131173">If the TC bit is clear, it means</linesub>
<linesub end="131322" start="131209">that the querying host has no additional Known Answers.</linesub>
</clause>
</paragraph>

<paragraph id="s18.5_p2" importance="must" num="2">
<clause id="s18.5_p2_c1" importance="must" num="1">
<linesub end="131388" start="131269">In multicast response messages, the TC bit MUST be zero on</linesub>
<linesub end="131428" start="131331">transmission, and MUST be ignored on reception.</linesub>
</clause>
</paragraph>

<paragraph id="s18.5_p3" importance="should" num="3">
<clause id="s18.5_p3_c1" importance="should" num="1">
<linesub end="131522" start="131383">In legacy unicast response messages, the TC bit has the same meaning</linesub>
<linesub end="131590" start="131455">as in conventional Unicast DNS: it means that the response was too</linesub>
<linesub end="131660" start="131525">large to fit in a single packet, so the querier SHOULD reissue its</linesub>
<linesub end="131710" start="131595">query using TCP in order to receive the larger response.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.6" name="RD (Recursion Desired) Bit" num="18.6">
<paragraph id="s18.6_p1" importance="must" num="1">
<clause id="s18.6_p1_c1" importance="must" num="1">
<linesub end="131969" start="131846">In both multicast query and multicast response messages, the</linesub>
<linesub end="132043" start="131910">Recursion Desired bit SHOULD be zero on transmission, and MUST be</linesub>
<linesub end="132024" start="131979">ignored on reception.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.7" name="RA (Recursion Available) Bit" num="18.7">
<paragraph id="s18.7_p1" importance="must" num="1">
<clause id="s18.7_p1_c1" importance="must" num="1">
<linesub end="132165" start="132042">In both multicast query and multicast response messages, the</linesub>
<linesub end="132239" start="132106">Recursion Available bit MUST be zero on transmission, and MUST be</linesub>
<linesub end="132220" start="132175">ignored on reception.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.8" name="Z (Zero) Bit" num="18.8">
<paragraph id="s18.8_p1" importance="must" num="1">
<clause id="s18.8_p1_c1" importance="must" num="1">
<linesub end="132355" start="132222">In both query and response messages, the Zero bit MUST be zero on</linesub>
<linesub end="132388" start="132291">transmission, and MUST be ignored on reception.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.9" name="AD (Authentic Data) Bit" num="18.9">
<paragraph id="s18.9_p1" importance="must" num="1">
<clause id="s18.9_p1_c1" importance="must" num="1">
<linesub end="132498" start="132375">In both multicast query and multicast response messages, the</linesub>
<linesub end="132576" start="132439">Authentic Data bit [RFC2535] MUST be zero on transmission, and MUST</linesub>
<linesub end="132561" start="132510">be ignored on reception.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.10" name="CD (Checking Disabled) Bit" num="18.10">
<paragraph id="s18.10_p1" importance="must" num="1">
<clause id="s18.10_p1_c1" importance="must" num="1">
<linesub end="132716" start="132575">In both multicast query and multicast response messages, the Checking</linesub>
<linesub end="132779" start="132648">Disabled bit [RFC2535] MUST be zero on transmission, and MUST be</linesub>
<linesub end="132761" start="132716">ignored on reception.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.11" name="RCODE (Response Code)" num="18.11">
<paragraph id="s18.11_p1" importance="must" num="1">
<clause id="s18.11_p1_c1" importance="must" num="1">
<linesub end="132914" start="132773">In both multicast query and multicast response messages, the Response</linesub>
<linesub end="132950" start="132846">Code MUST be zero on transmission.</linesub>
</clause>
<clause id="s18.11_p1_c2" importance="must" num="2">
<linesub end="132983" start="132882">Multicast DNS messages received</linesub>
<linesub end="133028" start="132917">with non-zero Response Codes MUST be silently ignored.</linesub>
</clause>
</paragraph>

</section>

<section id="s18.12" name="Repurposing of Top Bit of qclass in Question Section" num="18.12">
<paragraph id="s18.12_p1" num="1">
<clause id="s18.12_p1_c1" num="1">
<linesub end="133177" start="133038">In the Question Section of a Multicast DNS query, the top bit of the</linesub>
<linesub end="133251" start="133110">qclass field is used to indicate that unicast responses are preferred</linesub>
<linesub end="133264" start="133183">for this particular question.</linesub>
</clause>
<clause id="s18.12_p1_c2" num="2">
<linesub end="133284" start="133214">(See Section 5.4.)</linesub>
</clause>
</paragraph>

</section>

<section id="s18.13" name="Repurposing of Top Bit of rrclass in Resource Record Sections" num="18.13">
<paragraph id="s18.13_p1" num="1">
<clause id="s18.13_p1_c1" num="1">
<linesub end="133447" start="133308">In the Resource Record Sections of a Multicast DNS response, the top</linesub>
<linesub end="133513" start="133380">bit of the rrclass field is used to indicate that the record is a</linesub>
<linesub end="133590" start="133449">member of a unique RRSet, and the entire RRSet has been sent together</linesub>
<linesub end="133661" start="133522">(in the same packet, or in consecutive packets if there are too many</linesub>
<linesub end="133688" start="133594">records to fit in a single packet).</linesub>
</clause>
<clause id="s18.13_p1_c2" num="2">
<linesub end="133709" start="133631">(See Section 10.2.)</linesub>
</clause>
</paragraph>

</section>

<section id="s18.14" name="Name Compression" num="18.14">
<paragraph id="s18.14_p1" importance="should" num="1">
<clause id="s18.14_p1_c1" importance="should" num="1">
<linesub end="133968" start="133833">When generating Multicast DNS messages, implementations SHOULD use</linesub>
<linesub end="134042" start="133903">name compression wherever possible to compress the names of resource</linesub>
<linesub end="134114" start="133975">records, by replacing some or all of the resource record name with a</linesub>
<linesub end="134182" start="134047">compact two-byte reference to an appearance of that data somewhere</linesub>
<linesub end="134186" start="134117">earlier in the message [RFC1035].</linesub>
</clause>
</paragraph>

<paragraph id="s18.14_p2" importance="should" num="2">
<clause id="s18.14_p2_c1" num="1">
<linesub end="134280" start="134155">This applies not only to Multicast DNS responses, but also to</linesub>
<linesub end="134297" start="134220">queries.</linesub>
</clause>
<clause id="s18.14_p2_c2" importance="should" num="2">
<linesub end="134355" start="134230">When a query contains more than one question, successive</linesub>
<linesub end="134417" start="134290">questions in the same message often contain similar names, and</linesub>
<linesub end="134483" start="134356">consequently name compression SHOULD be used, to save bytes.</linesub>
</clause>
<clause id="s18.14_p2_c3" importance="should" num="3">
<linesub end="134487" start="134418">In</linesub>
<linesub end="134551" start="134424">addition, queries may also contain Known Answers in the Answer</linesub>
<linesub end="134621" start="134490">Section, or probe tiebreaking data in the Authority Section, and</linesub>
<linesub end="134693" start="134558">these names SHOULD similarly be compressed for network efficiency.</linesub>
</clause>
</paragraph>

<paragraph id="s18.14_p3" importance="should" num="3">
<clause id="s18.14_p3_c1" importance="should" num="1">
<linesub end="134762" start="134629">In addition to compressing the *names* of resource records, names</linesub>
<linesub end="134835" start="134698">that appear within the *rdata* of the following rrtypes SHOULD also</linesub>
<linesub end="134860" start="134769">be compressed in all Multicast DNS messages:</linesub>
</clause>
</paragraph>

<paragraph id="s18.14_p4" importance="must" num="4">
<clause id="s18.14_p4_c1" importance="must" num="1">
<linesub end="134953" start="134820">NS, CNAME, PTR, DNAME, SOA, MX, AFSDB, RT, KX, RP, PX, SRV, NSEC</linesub>
<linesub end="135030" start="134889">Until future IETF Standards Action [RFC5226] specifying that names in</linesub>
<linesub end="135093" start="134962">the rdata of other types should be compressed, names that appear</linesub>
<linesub end="135171" start="135030">within the rdata of any type not listed above MUST NOT be compressed.</linesub>
</clause>
</paragraph>

<paragraph id="s18.14_p5" importance="must" num="5">
<clause id="s18.14_p5_c1" importance="must" num="1">
<linesub end="135233" start="135104">Implementations receiving Multicast DNS messages MUST correctly</linesub>
<linesub end="135298" start="135171">decode compressed names appearing in the Question Section, and</linesub>
<linesub end="135370" start="135237">compressed names of resource records appearing in other sections.</linesub>
</clause>
</paragraph>

<paragraph id="s18.14_p6" importance="must" num="6">
<clause id="s18.14_p6_c1" importance="must" num="1">
<linesub end="135444" start="135307">In addition, implementations MUST correctly decode compressed names</linesub>
<linesub end="135502" start="135378">appearing within the *rdata* of the rrtypes listed above.</linesub>
</clause>
<clause id="s18.14_p6_c2" importance="should" num="2">
<linesub end="135509" start="135437">Where</linesub>
<linesub end="135579" start="135446">possible, implementations SHOULD also correctly decode compressed</linesub>
<linesub end="135646" start="135515">names appearing within the *rdata* of other rrtypes known to the</linesub>
<linesub end="135716" start="135583">implementers at the time of implementation, because such forward-</linesub>
<linesub end="135773" start="135652">thinking planning helps facilitate the deployment of future</linesub>
<linesub end="135848" start="135715">implementations that may have reason to compress those rrtypes.</linesub>
</clause>
<clause id="s18.14_p6_c3" num="3">
<linesub end="135852" start="135780">It</linesub>
<linesub end="135921" start="135786">is possible that no future IETF Standards Action [RFC5226] will be</linesub>
<linesub end="135987" start="135856">created that mandates or permits the compression of rdata in new</linesub>
<linesub end="136065" start="135924">types, but having implementations designed such that they are capable</linesub>
<linesub end="136128" start="135997">of decompressing all known types helps keep future options open.</linesub>
</clause>
</paragraph>

<paragraph id="s18.14_p7" importance="must" num="7">
<clause id="s18.14_p7_c1" num="1">
<linesub end="136207" start="136066">One specific difference between Unicast DNS and Multicast DNS is that</linesub>
<linesub end="136280" start="136139">Unicast DNS does not allow name compression for the target host in an</linesub>
<linesub end="136351" start="136212">SRV record, because Unicast DNS implementations before the first SRV</linesub>
<linesub end="136413" start="136284">specification in 1996 [RFC2052] may not decode these compressed</linesub>
<linesub end="136589" start="136506">records properly.</linesub>
</clause>
<clause id="s18.14_p7_c2" importance="must" num="2">
<linesub end="136635" start="136525">Since all Multicast DNS implementations were</linesub>
<linesub end="136714" start="136573">created after 1996, all Multicast DNS implementations are REQUIRED to</linesub>
<linesub end="136729" start="136646">decode compressed SRV records correctly.</linesub>
</clause>
</paragraph>

<paragraph id="s18.14_p8" importance="must" num="8">
<clause id="s18.14_p8_c1" importance="must" num="1">
<linesub end="136830" start="136691">In legacy unicast responses generated to answer legacy queries, name</linesub>
<linesub end="136864" start="136763">compression MUST NOT be performed on SRV records.</linesub>
</clause>
</paragraph>

</section>

<section id="s19" name="Summary of Differences between Multicast DNS and Unicast DNS" num="19">
<paragraph id="s19_p1" num="1">
<clause id="s19_p1_c1" num="1">
<linesub end="137023" start="136884">Multicast DNS shares, as much as possible, the familiar APIs, naming</linesub>
<linesub end="137078" start="136956">syntax, resource record types, etc., of Unicast DNS.</linesub>
</clause>
<clause id="s19_p1_c2" num="2">
<linesub end="137093" start="137010">There are, of</linesub>
<linesub end="137168" start="137027">course, necessary differences by virtue of it using multicast, and by</linesub>
<linesub end="137235" start="137100">virtue of it operating in a community of cooperating peers, rather</linesub>
<linesub end="137305" start="137170">than a precisely defined hierarchy controlled by a strict chain of</linesub>
<linesub end="137343" start="137240">formal delegations from the root.</linesub>
</clause>
<clause id="s19_p1_c3" num="3">
<linesub end="137377" start="137275">These differences are summarized</linesub>
<linesub end="137326" start="137311">below:</linesub>
</clause>
</paragraph>

<paragraph id="s19_p2" num="2">
<clause id="s19_p2_c1" num="1">
<linesub end="137357" start="137322">Multicast DNS...</linesub>
<linesub end="137377" start="137342">* uses multicast</linesub>
<linesub end="137443" start="137362">* uses UDP port 5353 instead of port 53</linesub>
<linesub end="137514" start="137405">* operates in well-defined parts of the DNS namespace</linesub>
<linesub end="137547" start="137462">* has no SOA (Start of Authority) records</linesub>
<linesub end="137632" start="137507">* uses UTF-8, and only UTF-8, to encode resource record names</linesub>
<linesub end="137693" start="137572">* allows names up to 255 bytes plus a terminating zero byte</linesub>
<linesub end="137768" start="137635">* allows name compression in rdata for SRV and other record types</linesub>
<linesub end="137761" start="137704">* allows larger UDP packets</linesub>
<linesub end="137838" start="137735">* allows more than one question in a query message</linesub>
<linesub end="137930" start="137789">* defines consistent results for qtype "ANY" and qclass "ANY" queries</linesub>
<linesub end="137981" start="137862">* uses the Answer Section of a query to list Known Answers</linesub>
<linesub end="138057" start="137924">* uses the TC bit in a query to indicate additional Known Answers</linesub>
<linesub end="138118" start="137993">* uses the Authority Section of a query for probe tiebreaking</linesub>
<linesub end="138199" start="138058">* ignores the Query ID field (except for generating legacy responses)</linesub>
<linesub end="138272" start="138131">* doesn't require the question to be repeated in the response message</linesub>
<linesub end="138311" start="138204">* uses unsolicited responses to announce new records</linesub>
<linesub end="138369" start="138260">* uses NSEC records to signal nonexistence of records</linesub>
<linesub end="138452" start="138317">* defines a unicast-response bit in the rrclass of query questions</linesub>
<linesub end="138514" start="138387">* defines a cache-flush bit in the rrclass of response records</linesub>
<linesub end="138580" start="138453">* uses DNS RR TTL 0 to indicate that a record has been deleted</linesub>
<linesub end="138656" start="138519">* recommends AAAA records in the additional section when responding</linesub>
<linesub end="138671" start="138592">to rrtype "A" queries, and vice versa</linesub>
<linesub end="138756" start="138633">* monitors queries to perform Duplicate Question Suppression</linesub>
<linesub end="138826" start="138697">* monitors responses to perform Duplicate Answer Suppression...</linesub>
<linesub end="138839" start="138764">* ... and Ongoing Conflict Detection</linesub>
<linesub end="138869" start="138804">* ... and Opportunistic Caching</linesub>
</clause>
</paragraph>

</section>

<section id="s20" name="IPv6 Considerations" num="20">
<paragraph id="s20_p1" num="1">
<clause id="s20_p1_c1" num="1">
<linesub end="139163" start="139022">An IPv4-only host and an IPv6-only host behave as "ships that pass in</linesub>
<linesub end="139177" start="139095">the night".</linesub>
</clause>
<clause id="s20_p1_c2" num="2">
<linesub end="139234" start="139108">Even if they are on the same Ethernet, neither is aware</linesub>
<linesub end="139262" start="139167">of the other's traffic.</linesub>
</clause>
<clause id="s20_p1_c3" num="3">
<linesub end="139308" start="139192">For this reason, each physical link may have</linesub>
<linesub end="139369" start="139240">*two* unrelated ".local." zones, one for IPv4 and one for IPv6.</linesub>
</clause>
<clause id="s20_p1_c4" num="4">
<linesub end="139446" start="139307">Since for practical purposes, a group of IPv4-only hosts and a group</linesub>
<linesub end="139514" start="139379">of IPv6-only hosts on the same Ethernet act as if they were on two</linesub>
<linesub end="139584" start="139449">entirely separate Ethernet segments, it is unsurprising that their</linesub>
<linesub end="139654" start="139519">use of the ".local." zone should occur exactly as it would if they</linesub>
<linesub end="139702" start="139589">really were on two entirely separate Ethernet segments.</linesub>
</clause>
</paragraph>

<paragraph id="s20_p2" num="2">
<clause id="s20_p2_c1" num="1">
<linesub end="139784" start="139649">A dual-stack (v4/v6) host can participate in both ".local." zones,</linesub>
<linesub end="139854" start="139719">and should register its name(s) and perform its lookups both using</linesub>
<linesub end="139871" start="139789">IPv4 and IPv6.</linesub>
</clause>
<clause id="s20_p2_c2" num="2">
<linesub end="139922" start="139805">This enables it to reach, and be reached by, both</linesub>
<linesub end="139950" start="139858">IPv4-only and IPv6-only hosts.</linesub>
</clause>
<clause id="s20_p2_c3" num="3">
<linesub end="139979" start="139890">In effect, this acts like a</linesub>
<linesub end="140056" start="139921">multihomed host, with one connection to the logical "IPv4 Ethernet</linesub>
<linesub end="140126" start="139991">segment", and a connection to the logical "IPv6 Ethernet segment".</linesub>
</clause>
<clause id="s20_p2_c4" num="4">
<linesub end="140202" start="140061">When such a host generates NSEC records, if it is using the same host</linesub>
<linesub end="140269" start="140134">name for its IPv4 addresses and its IPv6 addresses on that network</linesub>
<linesub end="140339" start="140204">interface, its NSEC records should indicate that the host name has</linesub>
<linesub end="140325" start="140274">both A and AAAA records.</linesub>
</clause>
</paragraph>

</section>

<section id="s21" name="Security Considerations" num="21">
<paragraph id="s21_p1" num="1">
<clause id="s21_p1_c1" num="1">
<linesub end="140470" start="140333">The algorithm for detecting and resolving name conflicts is, by its</linesub>
<linesub end="140540" start="140404">very nature, an algorithm that assumes cooperating participants.</linesub>
</clause>
<clause id="s21_p1_c2" num="2">
<linesub end="140545" start="140470">Its</linesub>
<linesub end="140618" start="140477">purpose is to allow a group of hosts to arrive at a mutually disjoint</linesub>
<linesub end="140691" start="140550">set of host names and other DNS resource record names, in the absence</linesub>
<linesub end="140758" start="140623">of any central authority to coordinate this or mediate disputes.</linesub>
</clause>
<clause id="s21_p1_c3" num="3">
<linesub end="140762" start="140689">In</linesub>
<linesub end="140828" start="140695">the absence of any higher authority to resolve disputes, the only</linesub>
<linesub end="140905" start="140764">alternative is that the participants must work together cooperatively</linesub>
<linesub end="140892" start="140837">to arrive at a resolution.</linesub>
</clause>
</paragraph>

<paragraph id="s21_p2" num="2">
<clause id="s21_p2_c1" num="1">
<linesub end="141003" start="140868">In an environment where the participants are mutually antagonistic</linesub>
<linesub end="141073" start="140938">and unwilling to cooperate, other mechanisms are appropriate, like</linesub>
<linesub end="141059" start="141008">manually configured DNS.</linesub>
</clause>
</paragraph>

<paragraph id="s21_p3" num="3">
<clause id="s21_p3_c1" num="1">
<linesub end="141178" start="141037">In an environment where there is a group of cooperating participants,</linesub>
<linesub end="141245" start="141110">but clients cannot be sure that there are no antagonistic hosts on</linesub>
<linesub end="141311" start="141180">the same physical link, the cooperating participants need to use</linesub>
<linesub end="141387" start="141248">IPsec signatures and/or DNSSEC [RFC4033] signatures so that they can</linesub>
<linesub end="141457" start="141320">distinguish Multicast DNS messages from trusted participants (which</linesub>
<linesub end="141524" start="141391">they process as usual) from Multicast DNS messages from untrusted</linesub>
<linesub end="141549" start="141460">participants (which they silently discard).</linesub>
</clause>
</paragraph>

<paragraph id="s21_p4" num="4">
<clause id="s21_p4_c1" num="1">
<linesub end="141802" start="141663">If DNS queries for *global* DNS names are sent to the mDNS multicast</linesub>
<linesub end="141874" start="141735">address (during network outages which disrupt communication with the</linesub>
<linesub end="141948" start="141807">greater Internet) it is *especially* important to use DNSSEC, because</linesub>
<linesub end="142021" start="141880">the user may have the impression that he or she is communicating with</linesub>
<linesub end="142090" start="141953">some authentic host, when in fact he or she is really communicating</linesub>
<linesub end="142157" start="142024">with some local host that is merely masquerading as that name.</linesub>
</clause>
<clause id="s21_p4_c2" num="2">
<linesub end="142163" start="142088">This</linesub>
<linesub end="142231" start="142096">is less critical for names ending with ".local.", because the user</linesub>
<linesub end="142305" start="142166">should be aware that those names have only local significance and no</linesub>
<linesub end="142297" start="142238">global authority is implied.</linesub>
</clause>
</paragraph>

<paragraph id="s21_p5" importance="must" num="5">
<clause id="s21_p5_c1" num="1">
<linesub end="142410" start="142271">Most computer users neglect to type the trailing dot at the end of a</linesub>
<linesub end="142482" start="142343">fully qualified domain name, making it a relative domain name (e.g.,</linesub>
<linesub end="142501" start="142415">"www.example.com").</linesub>
</clause>
<clause id="s21_p5_c2" num="2">
<linesub end="142546" start="142436">In the event of network outage, attempts to</linesub>
<linesub end="142610" start="142483">positively resolve the name as entered will fail, resulting in</linesub>
<linesub end="142683" start="142549">application of the search list, including ".local.", if present.</linesub>
</clause>
<clause id="s21_p5_c3" num="3">
<linesub end="142686" start="142615">A</linesub>
<linesub end="142755" start="142620">malicious host could masquerade as "www.example.com." by answering</linesub>
<linesub end="142823" start="142690">the resulting Multicast DNS query for "www.example.com.local.".</linesub>
</clause>
<clause id="s21_p5_c4" importance="must" num="4">
<linesub end="142827" start="142755">To</linesub>
<linesub end="142896" start="142761">avoid this, a host MUST NOT append the search suffix ".local.", if</linesub>
<linesub end="142968" start="142831">present, to any relative (partially qualified) host name containing</linesub>
<linesub end="142989" start="142902">two or more labels.</linesub>
</clause>
<clause id="s21_p5_c5" num="5">
<linesub end="143035" start="142923">Appending ".local." to single-label relative</linesub>
<linesub end="143108" start="142971">host names is acceptable, since the user should have no expectation</linesub>
<linesub end="143163" start="143042">that a single-label host name will resolve as is.</linesub>
</clause>
<clause id="s21_p5_c6" num="6">
<linesub end="143183" start="143093">However, users who</linesub>
<linesub end="143252" start="143115">have both "example.com" and "local" in their search lists should be</linesub>
<linesub end="143323" start="143186">aware that if they type "www" into their web browser, it may not be</linesub>
<linesub end="143376" start="143257">immediately clear to them whether the page that appears is</linesub>
<linesub end="143388" start="143319">"www.example.com" or "www.local".</linesub>
</clause>
</paragraph>

<paragraph id="s21_p6" num="6">
<clause id="s21_p6_c1" num="1">
<linesub end="143459" start="143357">Multicast DNS uses UDP port 5353.</linesub>
</clause>
<clause id="s21_p6_c2" num="2">
<linesub end="143492" start="143392">On operating systems where only</linesub>
<linesub end="143560" start="143427">privileged processes are allowed to use ports below 1024, no such</linesub>
<linesub end="143577" start="143496">privilege is required to use port 5353.</linesub>
</clause>
</paragraph>

</section>

<section id="s22" name="IANA Considerations" num="22">
<paragraph id="s22_p1" num="1">
<clause id="s22_p1_c1" num="1">
<linesub end="143703" start="143566">IANA has allocated the UDP port 5353 for the Multicast DNS protocol</linesub>
<linesub end="143704" start="143637">described in this document [SN].</linesub>
</clause>
</paragraph>

<paragraph id="s22_p2" num="2">
<clause id="s22_p2_c1" num="1">
<linesub end="143813" start="143674">IANA has allocated the IPv4 link-local multicast address 224.0.0.251</linesub>
<linesub end="143839" start="143746">for the use described in this document [MC4].</linesub>
</clause>
</paragraph>

<paragraph id="s22_p3" num="3">
<clause id="s22_p3_c1" num="1">
<linesub end="143937" start="143796">IANA has allocated the IPv6 multicast address set FF0X::FB (where "X"</linesub>
<linesub end="143992" start="143869">indicates any hexadecimal digit from '1' to 'F') for the use</linesub>
<linesub end="144037" start="143933">described in this document [MC6].</linesub>
</clause>
<clause id="s22_p3_c2" num="2">
<linesub end="144072" start="143968">Only address FF02::FB (link-local</linesub>
<linesub end="144142" start="144005">scope) is currently in use by deployed software, but it is possible</linesub>
<linesub end="144209" start="144076">that in the future implementers may experiment with Multicast DNS</linesub>
<linesub end="144280" start="144145">using larger-scoped addresses, such as FF05::FB (site-local scope)</linesub>
<linesub end="144238" start="144215">[RFC4291].</linesub>
</clause>
</paragraph>

<paragraph id="s22_p4" num="4">
<clause id="s22_p4_c1" num="1">
<linesub end="144481" start="144384">IANA has implemented the following DNS records:</linesub>
</clause>
</paragraph>

<paragraph id="s22_p5" num="5">
<clause id="s22_p5_c1" num="1">
<linesub end="144507" start="144439">MDNS.MCAST.NET.</linesub>
</clause>
<clause id="s22_p5_c2" num="2">
<linesub end="144539" start="144466">IN  A    224.0.0.251</linesub>
<linesub end="144575" start="144493">251.0.0.224.IN-ADDR.ARPA.</linesub>
</clause>
<clause id="s22_p5_c3" num="3">
<linesub end="144601" start="144520">IN  PTR  MDNS.MCAST.NET.</linesub>
</clause>
</paragraph>

<paragraph id="s22_p6" num="6">
<clause id="s22_p6_c1" num="1">
<linesub end="144690" start="144549">Entries for the AAAA and corresponding PTR records have not been made</linesub>
<linesub end="144761" start="144622">as there is not yet an RFC providing direction for the management of</linesub>
<linesub end="144827" start="144694">the IP6.ARPA domain relating to the IPv6 multicast address space.</linesub>
</clause>
</paragraph>

<paragraph id="s22_p7" num="7">
<clause id="s22_p7_c1" num="1">
<linesub end="144897" start="144764">The reuse of the top bit of the rrclass field in the Question and</linesub>
<linesub end="144972" start="144833">Resource Record Sections means that Multicast DNS can only carry DNS</linesub>
<linesub end="145014" start="144905">records with classes in the range 0-32767.</linesub>
</clause>
<clause id="s22_p7_c2" num="2">
<linesub end="145036" start="144949">Classes in the range</linesub>
<linesub end="145094" start="144973">32768 to 65535 are incompatible with Multicast DNS.</linesub>
</clause>
<clause id="s22_p7_c3" num="3">
<linesub end="145110" start="145026">IANA has noted</linesub>
<linesub end="145177" start="145044">this fact, and if IANA receives a request to allocate a DNS class</linesub>
<linesub end="145254" start="145113">value above 32767, IANA will make sure the requester is aware of this</linesub>
<linesub end="145286" start="145186">implication before proceeding.</linesub>
</clause>
<clause id="s22_p7_c4" num="4">
<linesub end="145323" start="145218">This does not mean that allocations</linesub>
<linesub end="145388" start="145257">of DNS class values above 32767 should be denied, only that they</linesub>
<linesub end="145466" start="145325">should not be allowed until the requester has indicated that they are</linesub>
<linesub end="145525" start="145398">aware of how this allocation will interact with Multicast DNS.</linesub>
</clause>
<clause id="s22_p7_c5" num="5">
<linesub end="145601" start="145464">However, to date, only three DNS classes have been assigned by IANA</linesub>
<linesub end="145676" start="145535">(1, 3, and 4), and only one (1, "Internet") is actually in widespread</linesub>
<linesub end="145739" start="145608">use, so this issue is likely to remain a purely theoretical one.</linesub>
</clause>
</paragraph>

<paragraph id="s22_p8" num="8">
<clause id="s22_p8_c1" num="1">
<linesub end="145808" start="145677">IANA has recorded the list of domains below as being Special-Use</linesub>
<linesub end="145794" start="145745">Domain Names [RFC6761]:</linesub>
</clause>
</paragraph>

<paragraph id="s22_p9" num="9">
<clause id="s22_p9_c1" num="1">
<linesub end="145796" start="145776">.local.</linesub>
</clause>
<clause id="s22_p9_c2" num="2">
<linesub end="145840" start="145790">.254.169.in-addr.arpa.</linesub>
</clause>
<clause id="s22_p9_c3" num="3">
<linesub end="145857" start="145819">.8.e.f.ip6.arpa.</linesub>
</clause>
<clause id="s22_p9_c4" num="4">
<linesub end="145880" start="145842">.9.e.f.ip6.arpa.</linesub>
</clause>
<clause id="s22_p9_c5" num="5">
<linesub end="145903" start="145865">.a.e.f.ip6.arpa.</linesub>
</clause>
<clause id="s22_p9_c6" num="6">
<linesub end="145926" start="145888">.b.e.f.ip6.arpa.</linesub>
</clause>
</paragraph>

</section>

<section id="s22.1" name="Domain Name Reservation Considerations" num="22.1">
<paragraph id="s22.1_p1" num="1">
<clause id="s22.1_p1_c1" num="1">
<linesub end="146087" start="145956">The six domains listed above, and any names falling within those</linesub>
<linesub end="146157" start="146024">domains (e.g., "MyPrinter.local.", "34.12.254.169.in-addr.arpa.",</linesub>
<linesub end="146230" start="146093">"Ink-Jet._pdl-datastream._tcp.local.") are special [RFC6761] in the</linesub>
<linesub end="146197" start="146164">following ways:</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p2" num="2">
<clause id="s22.1_p2_c1" num="1">
<linesub end="146311" start="146187">1. Users may use these names as they would other DNS names,</linesub>
<linesub end="146377" start="146256">entering them anywhere that they would otherwise enter a</linesub>
<linesub end="146453" start="146322">conventional DNS name, or a dotted decimal IPv4 address, or a</linesub>
<linesub end="146444" start="146393">literal IPv6 address.</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p3" importance="should" num="3">
<clause id="s22.1_p3_c1" importance="should" num="1">
<linesub end="146556" start="146425">Since there is no central authority responsible for assigning</linesub>
<linesub end="146619" start="146496">dot-local names, and all devices on the local network are</linesub>
<linesub end="146694" start="146563">equally entitled to claim any dot-local name, users SHOULD be</linesub>
<linesub end="146911" start="146787">aware of this and SHOULD exercise appropriate caution.</linesub>
</clause>
<clause id="s22.1_p3_c2" importance="should" num="2">
<linesub end="146918" start="146843">In an</linesub>
<linesub end="146987" start="146858">untrusted or unfamiliar network environment, users SHOULD be</linesub>
<linesub end="147051" start="146928">aware that using a name like "www.local" may not actually</linesub>
<linesub end="147124" start="146995">connect them to the web site they expected, and could easily</linesub>
<linesub end="147196" start="147065">connect them to a different web page, or even a fake or spoof</linesub>
<linesub end="147255" start="147136">of their intended web site, designed to trick them into</linesub>
<linesub end="147308" start="147201">revealing confidential information.</linesub>
</clause>
<clause id="s22.1_p3_c3" num="3">
<linesub end="147336" start="147238">As always with networking,</linesub>
<linesub end="147398" start="147274">end-to-end cryptographic security can be a useful tool.</linesub>
</clause>
<clause id="s22.1_p3_c4" num="4">
<linesub end="147403" start="147331">For</linesub>
<linesub end="147455" start="147344">example, when connecting with ssh, the ssh host key</linesub>
<linesub end="147534" start="147405">verification process will inform the user if it detects that</linesub>
<linesub end="147600" start="147475">the identity of the entity they are communicating with has</linesub>
<linesub end="147664" start="147543">changed since the last time they connected to that name.</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p4" num="4">
<clause id="s22.1_p4_c1" num="1">
<linesub end="147739" start="147607">2. Application software may use these names as they would other</linesub>
<linesub end="147811" start="147680">similar DNS names, and is not required to recognize the names</linesub>
<linesub end="147848" start="147751">and treat them specially.</linesub>
</clause>
<clause id="s22.1_p4_c2" num="2">
<linesub end="147886" start="147778">Due to the relative ease of spoofing</linesub>
<linesub end="147949" start="147824">dot-local names, end-to-end cryptographic security remains</linesub>
<linesub end="148027" start="147892">important when communicating across a local network, just as it</linesub>
<linesub end="148072" start="147965">is when communicating across the global Internet.</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p5" importance="should" num="5">
<clause id="s22.1_p5_c1" importance="should" num="1">
<linesub end="148160" start="148022">3. Name resolution APIs and libraries SHOULD recognize these names</linesub>
<linesub end="148233" start="148098">as special and SHOULD NOT send queries for these names to their</linesub>
<linesub end="148284" start="148171">configured (unicast) caching DNS server(s).</linesub>
</clause>
<clause id="s22.1_p5_c2" num="2">
<linesub end="148302" start="148216">This is to avoid</linesub>
<linesub end="148363" start="148242">unnecessary load on the root name servers and other name</linesub>
<linesub end="148441" start="148308">servers, caused by queries for which those name servers do not</linesub>
<linesub end="148507" start="148380">have useful non-negative answers to give, and will not ever</linesub>
<linesub end="148540" start="148449">have useful non-negative answers to give.</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p6" importance="should" num="6">
<clause id="s22.1_p6_c1" importance="should" num="1">
<linesub end="148636" start="148498">4. Caching DNS servers SHOULD recognize these names as special and</linesub>
<linesub end="148709" start="148574">SHOULD NOT attempt to look up NS records for them, or otherwise</linesub>
<linesub end="148780" start="148647">query authoritative DNS servers in an attempt to resolve these</linesub>
<linesub end="148796" start="148719">names.</linesub>
</clause>
<clause id="s22.1_p6_c2" importance="should" num="2">
<linesub end="148852" start="148727">Instead, caching DNS servers SHOULD generate immediate</linesub>
<linesub end="148924" start="148791">NXDOMAIN responses for all such queries they may receive (from</linesub>
<linesub end="148964" start="148863">misbehaving name resolver libraries).</linesub>
</clause>
<clause id="s22.1_p6_c3" num="3">
<linesub end="148982" start="148902">This is to avoid</linesub>
<linesub end="149049" start="148928">unnecessary load on the root name servers and other name</linesub>
<linesub end="149019" start="148994">servers.</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p7" importance="should" num="7">
<clause id="s22.1_p7_c1" importance="should" num="1">
<linesub end="149148" start="149010">5. Authoritative DNS servers SHOULD NOT by default be configurable</linesub>
<linesub end="149207" start="149086">to answer queries for these names, and, like caching DNS</linesub>
<linesub end="149283" start="149152">servers, SHOULD generate immediate NXDOMAIN responses for all</linesub>
<linesub end="149325" start="149223">such queries they may receive.</linesub>
</clause>
<clause id="s22.1_p7_c2" importance="may" num="2">
<linesub end="149358" start="149255">DNS server software MAY provide</linesub>
<linesub end="149425" start="149296">a configuration option to override this default, for testing</linesub>
<linesub end="149445" start="149366">purposes or other specialized uses.</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p8" importance="should" num="8">
<clause id="s22.1_p8_c1" importance="should" num="1">
<linesub end="149525" start="149409">6. DNS server operators SHOULD NOT attempt to configure</linesub>
<linesub end="149603" start="149474">authoritative DNS servers to act as authoritative for any of</linesub>
<linesub end="149628" start="149544">these names.</linesub>
</clause>
<clause id="s22.1_p8_c2" num="2">
<linesub end="149679" start="149558">Configuring an authoritative DNS server to act as</linesub>
<linesub end="149746" start="149617">authoritative for any of these names may not, in many cases,</linesub>
<linesub end="149936" start="149840">yield the expected result.</linesub>
</clause>
<clause id="s22.1_p8_c3" importance="should" num="3">
<linesub end="149971" start="149868">Since name resolver libraries and</linesub>
<linesub end="150038" start="149911">caching DNS servers SHOULD NOT send queries for those names</linesub>
<linesub end="150111" start="149980">(see 3 and 4 above), such queries SHOULD be suppressed before</linesub>
<linesub end="150182" start="150051">they even reach the authoritative DNS server in question, and</linesub>
<linesub end="150247" start="150122">consequently it will not even get an opportunity to answer</linesub>
<linesub end="150209" start="150190">them.</linesub>
</clause>
</paragraph>

<paragraph id="s22.1_p9" importance="must" num="9">
<clause id="s22.1_p9_c1" importance="must" num="1">
<linesub end="150323" start="150203">7. DNS Registrars MUST NOT allow any of these names to be</linesub>
<linesub end="150392" start="150270">registered in the normal way to any person or entity.</linesub>
</clause>
<clause id="s22.1_p9_c2" num="2">
<linesub end="150399" start="150325">These</linesub>
<linesub end="150469" start="150340">names are reserved protocol identifiers with special meaning</linesub>
<linesub end="150541" start="150410">and fall outside the set of names available for allocation by</linesub>
<linesub end="150564" start="150481">registrars.</linesub>
</clause>
<clause id="s22.1_p9_c3" num="3">
<linesub end="150616" start="150494">Attempting to allocate one of these names as if it</linesub>
<linesub end="150683" start="150554">were a normal domain name will probably not work as desired,</linesub>
<linesub end="150693" start="150624">for reasons 3, 4, and 6 above.</linesub>
</clause>
</paragraph>

</section>

<section id="s23" name="Acknowledgments" num="23">
<paragraph id="s23_p1" num="1">
<clause id="s23_p1_c1" num="1">
<linesub end="150802" start="150681">The concepts described in this document have been explored,</linesub>
<linesub end="150873" start="150744">developed, and implemented with help from Ran Atkinson, Richard</linesub>
<linesub end="150942" start="150811">Brown, Freek Dijkstra, Erik Guttman, Kyle McKay, Pasi Sarolahti,</linesub>
<linesub end="151002" start="150879">Pekka Savola, Robby Simpson, Mark Townsley, Paul Vixie, Bill</linesub>
<linesub end="151028" start="150943">Woodcock, and others.</linesub>
</clause>
<clause id="s23_p1_c2" num="2">
<linesub end="151068" start="150966">Special thanks go to Bob Bradley, Josh</linesub>
<linesub end="151139" start="151008">Graessley, Scott Herscher, Rory McGuire, Roger Pantos, and Kiren</linesub>
<linesub end="151187" start="151076">Sekar for their significant contributions.</linesub>
</clause>
<clause id="s23_p1_c3" num="3">
<linesub end="151211" start="151120">Special thanks also to</linesub>
<linesub end="151283" start="151146">Kerry Lynn for converting the document to xml2rfc form in May 2010,</linesub>
<linesub end="151358" start="151217">and to Area Director Ralph Droms for shepherding the document through</linesub>
<linesub end="151325" start="151290">its final steps.</linesub>
</clause>
</paragraph>

</section>

<section id="s24" name="References" num="24">
</section>

<section id="s24.1" name="Normative References" num="24.1">
<paragraph id="s24.1_p1" num="1">
<clause id="s24.1_p1_c1" num="1">
<linesub end="151474" start="151357">[MC4]      IANA, "IPv4 Multicast Address Space Registry",</linesub>
<linesub end="151553" start="151429">&lt;http://www.iana.org/assignments/multicast-addresses/&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p2" num="2">
<clause id="s24.1_p2_c1" num="1">
<linesub end="151606" start="151489">[MC6]      IANA, "IPv6 Multicast Address Space Registry",</linesub>
<linesub end="151641" start="151561">&lt;http://www.iana.org/assignments/</linesub>
<linesub end="151677" start="151609">ipv6-multicast-addresses/&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p3" num="3">
<clause id="s24.1_p3_c1" num="1">
<linesub end="151780" start="151641">[RFC0020]  Cerf, V., "ASCII format for network interchange", RFC 20,</linesub>
<linesub end="151764" start="151724">October 1969.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p4" num="4">
<clause id="s24.1_p4_c1" num="1">
<linesub end="151883" start="151742">[RFC1034]  Mockapetris, P., "Domain names - concepts and facilities",</linesub>
<linesub end="151904" start="151826">STD 13, RFC 1034, November 1987.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p5" num="5">
<clause id="s24.1_p5_c1" num="1">
<linesub end="151990" start="151863">[RFC1035]  Mockapetris, P., "Domain names - implementation and</linesub>
<linesub end="152050" start="151940">specification", STD 13, RFC 1035, November 1987.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p6" num="6">
<clause id="s24.1_p6_c1" num="1">
<linesub end="152273" start="152146">[RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate</linesub>
<linesub end="152337" start="152223">Requirement Levels", BCP 14, RFC 2119, March 1997.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p7" num="7">
<clause id="s24.1_p7_c1" num="1">
<linesub end="152405" start="152278">[RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO</linesub>
<linesub end="152449" start="152355">10646", STD 63, RFC 3629, November 2003.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p8" num="8">
<clause id="s24.1_p8_c1" num="1">
<linesub end="152535" start="152400">[RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.</linesub>
<linesub end="152609" start="152481">Rose, "Resource Records for the DNS Security Extensions",</linesub>
<linesub end="152609" start="152553">RFC 4034, March 2005.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p9" num="9">
<clause id="s24.1_p9_c1" num="1">
<linesub end="152718" start="152579">[RFC5198]  Klensin, J. and M. Padlipsky, "Unicode Format for Network</linesub>
<linesub end="152746" start="152662">Interchange", RFC 5198, March 2008.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p10" num="10">
<clause id="s24.1_p10_c1" num="1">
<linesub end="152823" start="152702">[RFC6195]  Eastlake 3rd, D., "Domain Name System (DNS) IANA</linesub>
<linesub end="152882" start="152776">Considerations", BCP 42, RFC 6195, March 2011.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p11" num="11">
<clause id="s24.1_p11_c1" num="1">
<linesub end="152966" start="152827">[RFC6761]  Cheshire, S. and M. Krochmal, "Special-Use Domain Names",</linesub>
<linesub end="152972" start="152910">RFC 6761, February 2013.</linesub>
</clause>
</paragraph>

<paragraph id="s24.1_p12" num="12">
<clause id="s24.1_p12_c1" num="1">
<linesub end="153072" start="152939">[SN]       IANA, "Service Name and Transport Protocol Port Number</linesub>
<linesub end="153121" start="153019">Registry", &lt;http://www.iana.org/assignments/</linesub>
<linesub end="153150" start="153078">service-names-port-numbers/&gt;.</linesub>
</clause>
</paragraph>

</section>

<section id="s24.2" name="Informative References" num="24.2">
<paragraph id="s24.2_p1" num="1">
<clause id="s24.2_p1_c1" num="1">
<linesub end="153212" start="153143">[B4W]      "Bonjour for Windows",</linesub>
<linesub end="153305" start="153191">&lt;http://en.wikipedia.org/wiki/Bonjour_(software)&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p2" num="2">
<clause id="s24.2_p2_c1" num="1">
<linesub end="153341" start="153246">[BJ]       Apple Bonjour Open Source Software,</linesub>
<linesub end="153397" start="153307">&lt;http://developer.apple.com/bonjour/&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p3" num="3">
<clause id="s24.2_p3_c1" num="1">
<linesub end="153377" start="153350">[IEEE.802.3]</linesub>
<linesub end="153487" start="153377">"Information technology - Telecommunications and</linesub>
<linesub end="153550" start="153440">information exchange between systems - Local and</linesub>
<linesub end="153631" start="153503">metropolitan area networks - Specific requirements - Part</linesub>
<linesub end="153703" start="153575">3: Carrier Sense Multiple Access with Collision Detection</linesub>
<linesub end="153745" start="153647">(CMSA/CD) Access Method and Physical Layer</linesub>
<linesub end="153822" start="153704">Specifications", IEEE Std 802.3-2008, December 2008,</linesub>
<linesub end="153885" start="153771">&lt;http://standards.ieee.org/getieee802/802.3.html&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p4" num="4">
<clause id="s24.2_p4_c1" num="1">
<linesub end="153855" start="153826">[IEEE.802.11]</linesub>
<linesub end="153964" start="153854">"Information technology - Telecommunications and</linesub>
<linesub end="154027" start="153917">information exchange between systems - Local and</linesub>
<linesub end="154108" start="153980">metropolitan area networks - Specific requirements - Part</linesub>
<linesub end="154180" start="154052">11: Wireless LAN Medium Access Control (MAC) and Physical</linesub>
<linesub end="154248" start="154124">Layer (PHY) Specifications", IEEE Std 802.11-2007, June</linesub>
<linesub end="154322" start="154194">2007, &lt;http://standards.ieee.org/getieee802/802.11.html&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p5" num="5">
<clause id="s24.2_p5_c1" num="1">
<linesub end="154512" start="154409">[Jumbo]    "Ethernet Jumbo Frames", November 2009,</linesub>
<linesub end="154592" start="154474">&lt;http://www.ethernetalliance.org/library/whitepaper/</linesub>
<linesub end="154603" start="154541">ethernet-jumbo-frames/&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p6" num="6">
<clause id="s24.2_p6_c1" num="1">
<linesub end="154701" start="154570">[NIAS]     Cheshire, S. "Discovering Named Instances of Abstract</linesub>
<linesub end="154761" start="154649">Services using DNS", Work in Progress, July 2001.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p7" num="7">
<clause id="s24.2_p7_c1" num="1">
<linesub end="154816" start="154703">[NSD]      "NsdManager | Android Developer", June 2012,</linesub>
<linesub end="154867" start="154773">&lt;http://developer.android.com/reference/</linesub>
<linesub end="154908" start="154828">android/net/nsd/NsdManager.html&gt;.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p8" num="8">
<clause id="s24.2_p8_c1" num="1">
<linesub end="155007" start="154866">[RFC2052]  Gulbrandsen, A. and P. Vixie, "A DNS RR for specifying the</linesub>
<linesub end="155076" start="154950">location of services (DNS SRV)", RFC 2052, October 1996.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p9" num="9">
<clause id="s24.2_p9_c1" num="1">
<linesub end="155152" start="155011">[RFC2132]  Alexander, S. and R. Droms, "DHCP Options and BOOTP Vendor</linesub>
<linesub end="155177" start="155095">Extensions", RFC 2132, March 1997.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p10" num="10">
<clause id="s24.2_p10_c1" num="1">
<linesub end="155269" start="155134">[RFC2136]  Vixie, P., Ed., Thomson, S., Rekhter, Y., and J. Bound,</linesub>
<linesub end="155343" start="155215">"Dynamic Updates in the Domain Name System (DNS UPDATE)",</linesub>
<linesub end="155343" start="155287">RFC 2136, April 1997.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p11" num="11">
<clause id="s24.2_p11_c1" num="1">
<linesub end="155432" start="155313">[RFC2181]  Elz, R. and R. Bush, "Clarifications to the DNS</linesub>
<linesub end="155472" start="155386">Specification", RFC 2181, July 1997.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p12" num="12">
<clause id="s24.2_p12_c1" num="1">
<linesub end="155544" start="155427">[RFC2535]  Eastlake 3rd, D., "Domain Name System Security</linesub>
<linesub end="155581" start="155499">Extensions", RFC 2535, March 1999.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p13" num="13">
<clause id="s24.2_p13_c1" num="1">
<linesub end="155671" start="155538">[RFC2671]  Vixie, P., "Extension Mechanisms for DNS (EDNS0)", RFC</linesub>
<linesub end="155668" start="155618">2671, August 1999.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p14" num="14">
<clause id="s24.2_p14_c1" num="1">
<linesub end="155770" start="155641">[RFC2845]  Vixie, P., Gudmundsson, O., Eastlake 3rd, D., and B.</linesub>
<linesub end="155849" start="155719">Wellington, "Secret Key Transaction Authentication for DNS</linesub>
<linesub end="155862" start="155792">(TSIG)", RFC 2845, May 2000.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p15" num="15">
<clause id="s24.2_p15_c1" num="1">
<linesub end="155964" start="155825">[RFC2930]  Eastlake 3rd, D., "Secret Key Establishment for DNS (TKEY</linesub>
<linesub end="155984" start="155908">RR)", RFC 2930, September 2000.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p16" num="16">
<clause id="s24.2_p16_c1" num="1">
<linesub end="156083" start="155944">[RFC2931]  Eastlake 3rd, D., "DNS Request and Transaction Signatures</linesub>
<linesub end="156119" start="156027">( SIG(0)s )", RFC 2931, September 2000.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p17" num="17">
<clause id="s24.2_p17_c1" num="1">
<linesub end="156208" start="156071">[RFC3007]  Wellington, B., "Secure Domain Name System (DNS) Dynamic</linesub>
<linesub end="156233" start="156153">Update", RFC 3007, November 2000.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p18" num="18">
<clause id="s24.2_p18_c1" num="1">
<linesub end="156330" start="156191">[RFC3492]  Costello, A., "Punycode: A Bootstring encoding of Unicode</linesub>
<linesub end="156388" start="156274">for Internationalized Domain Names in Applications</linesub>
<linesub end="156413" start="156339">(IDNA)", RFC 3492, March 2003.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p19" num="19">
<clause id="s24.2_p19_c1" num="1">
<linesub end="156651" start="156528">[RFC3927]  Cheshire, S., Aboba, B., and E. Guttman, "Dynamic</linesub>
<linesub end="156733" start="156603">Configuration of IPv4 Link-Local Addresses", RFC 3927, May</linesub>
<linesub end="156700" start="156676">2005.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p20" num="20">
<clause id="s24.2_p20_c1" num="1">
<linesub end="156821" start="156686">[RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.</linesub>
<linesub end="156891" start="156767">Rose, "DNS Security Introduction and Requirements", RFC</linesub>
<linesub end="156885" start="156837">4033, March 2005.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p21" num="21">
<clause id="s24.2_p21_c1" num="1">
<linesub end="156986" start="156859">[RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing</linesub>
<linesub end="157028" start="156936">Architecture", RFC 4291, February 2006.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p22" num="22">
<clause id="s24.2_p22_c1" num="1">
<linesub end="157103" start="156980">[RFC4795]  Aboba, B., Thaler, D., and L. Esibov, "Link-local</linesub>
<linesub end="157175" start="157055">Multicast Name Resolution (LLMNR)", RFC 4795, January</linesub>
<linesub end="157147" start="157123">2007.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p23" num="23">
<clause id="s24.2_p23_c1" num="1">
<linesub end="157266" start="157133">[RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,</linesub>
<linesub end="157337" start="157213">"Neighbor Discovery for IP version 6 (IPv6)", RFC 4861,</linesub>
<linesub end="157327" start="157283">September 2007.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p24" num="24">
<clause id="s24.2_p24_c1" num="1">
<linesub end="157438" start="157303">[RFC4862]  Thomson, S., Narten, T., and T. Jinmei, "IPv6 Stateless</linesub>
<linesub end="157504" start="157384">Address Autoconfiguration", RFC 4862, September 2007.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p25" num="25">
<clause id="s24.2_p25_c1" num="1">
<linesub end="157579" start="157442">[RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an</linesub>
<linesub end="157648" start="157524">IANA Considerations Section in RFCs", BCP 26, RFC 5226,</linesub>
<linesub end="157626" start="157594">May 2008.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p26" num="26">
<clause id="s24.2_p26_c1" num="1">
<linesub end="157729" start="157608">[RFC5890]  Klensin, J., "Internationalized Domain Names for</linesub>
<linesub end="157810" start="157682">Applications (IDNA): Definitions and Document Framework",</linesub>
<linesub end="157812" start="157754">RFC 5890, August 2010.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p27" num="27">
<clause id="s24.2_p27_c1" num="1">
<linesub end="157906" start="157781">[RFC6281]  Cheshire, S., Zhu, Z., Wakikawa, R., and L. Zhang,</linesub>
<linesub end="157987" start="157857">"Understanding Apple's Back to My Mac (BTMM) Service", RFC</linesub>
<linesub end="157976" start="157930">6281, June 2011.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p28" num="28">
<clause id="s24.2_p28_c1" num="1">
<linesub end="158092" start="157951">[RFC6760]  Cheshire, S. and M. Krochmal, "Requirements for a Protocol</linesub>
<linesub end="158165" start="158035">to Replace the AppleTalk Name Binding Protocol (NBP)", RFC</linesub>
<linesub end="158162" start="158108">6760, February 2013.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p29" num="29">
<clause id="s24.2_p29_c1" num="1">
<linesub end="158254" start="158133">[RFC6763]  Cheshire, S. and M. Krochmal, "DNS-Based Service</linesub>
<linesub end="158293" start="158207">Discovery", RFC 6763, February 2013.</linesub>
</clause>
</paragraph>

<paragraph id="s24.2_p30" num="30">
<clause id="s24.2_p30_c1" num="1">
<linesub end="158373" start="158248">[Zeroconf] Cheshire, S. and D. Steinberg, "Zero Configuration</linesub>
<linesub end="158450" start="158324">Networking: The Definitive Guide", O'Reilly Media, Inc.,</linesub>
<linesub end="158477" start="158395">ISBN 0-596-10100-7, December 2005.</linesub>
</clause>
</paragraph>

</section>

<section id="sAppA" name="Design Rationale for Choice of UDP Port Number" num="AppA">
<paragraph id="sAppA_p1" num="1">
<clause id="sAppA_p1_c1" num="1">
<linesub end="158788" start="158651">Arguments were made for and against using UDP port 53, the standard</linesub>
<linesub end="158804" start="158722">Unicast DNS port.</linesub>
</clause>
<clause id="sAppA_p1_c2" num="2">
<linesub end="158844" start="158741">Some of the arguments are given below.</linesub>
</clause>
<clause id="sAppA_p1_c3" num="3">
<linesub end="158849" start="158781">The</linesub>
<linesub end="158927" start="158788">arguments for using a different port were greater in number and more</linesub>
<linesub end="158979" start="158860">compelling, so that option was ultimately selected.</linesub>
</clause>
<clause id="sAppA_p1_c4" num="4">
<linesub end="158993" start="158913">The UDP port</linesub>
<linesub end="159044" start="158929">"5353" was selected for its mnemonic similarity to "53".</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p2" num="2">
<clause id="sAppA_p2_c1" num="1">
<linesub end="159057" start="158990">Arguments for using UDP port 53:</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p3" num="3">
<clause id="sAppA_p3_c1" num="1">
<linesub end="159134" start="159027">* This is "just DNS", so it should be the same port.</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p4" num="4">
<clause id="sAppA_p4_c1" num="1">
<linesub end="159225" start="159084">* There is less work to be done updating old resolver libraries to do</linesub>
<linesub end="159260" start="159159">simple Multicast DNS queries.</linesub>
</clause>
<clause id="sAppA_p4_c2" num="2">
<linesub end="159298" start="159190">Only the destination address need be</linesub>
<linesub end="159307" start="159232">changed.</linesub>
</clause>
<clause id="sAppA_p4_c3" num="3">
<linesub end="159361" start="159242">In some cases, this can be achieved without any code</linesub>
<linesub end="159437" start="159300">changes, just by adding the address 224.0.0.251 to a configuration</linesub>
<linesub end="159387" start="159372">file.</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p5" num="5">
<clause id="sAppA_p5_c1" num="1">
<linesub end="159491" start="159382">Arguments for using a different port (UDP port 5353):</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p6" num="6">
<clause id="sAppA_p6_c1" num="1">
<linesub end="159527" start="159440">* This is not "just DNS".</linesub>
</clause>
<clause id="sAppA_p6_c2" num="2">
<linesub end="159561" start="159467">This is a DNS-like protocol, but</linesub>
<linesub end="159530" start="159505">different.</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p7" num="7">
<clause id="sAppA_p7_c1" num="1">
<linesub end="159655" start="159520">* Changing resolver library code to use a different port number is</linesub>
<linesub end="159669" start="159592">not hard.</linesub>
</clause>
<clause id="sAppA_p7_c2" num="2">
<linesub end="159723" start="159603">In some cases, this can be achieved without any code</linesub>
<linesub end="159780" start="159661">changes, just by adding the address 224.0.0.251:5353 to a</linesub>
<linesub end="159767" start="159724">configuration file.</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p8" num="8">
<clause id="sAppA_p8_c1" num="1">
<linesub end="159881" start="159748">* Using the same port number makes it hard to run a Multicast DNS</linesub>
<linesub end="159942" start="159819">responder and a conventional Unicast DNS server on the same</linesub>
<linesub end="159963" start="159884">machine.</linesub>
</clause>
<clause id="sAppA_p8_c2" num="2">
<linesub end="160021" start="159894">If a conventional Unicast DNS server wishes to implement</linesub>
<linesub end="160079" start="159956">Multicast DNS as well, it can still do that, by opening two</linesub>
<linesub end="160089" start="160021">sockets.</linesub>
</clause>
<clause id="sAppA_p8_c3" num="3">
<linesub end="160136" start="160031">Having two different port numbers allows this</linesub>
<linesub end="160111" start="160082">flexibility.</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p9" num="9">
<clause id="sAppA_p9_c1" num="1">
<linesub end="160228" start="160099">* Some VPN software hijacks all outgoing traffic to port 53 and</linesub>
<linesub end="160297" start="160168">redirects it to a special DNS server set up to serve those VPN</linesub>
<linesub end="160364" start="160236">clients while they are connected to the corporate network.</linesub>
</clause>
<clause id="sAppA_p9_c2" num="2">
<linesub end="160371" start="160296">It is</linesub>
<linesub end="160434" start="160307">questionable whether this is the right thing to do, but it is</linesub>
<linesub end="160501" start="160374">common, and redirecting link-local multicast DNS packets to a</linesub>
<linesub end="160559" start="160441">remote server rarely produces any useful results.</linesub>
</clause>
<clause id="sAppA_p9_c3" num="3">
<linesub end="160574" start="160492">It does mean,</linesub>
<linesub end="160642" start="160511">for example, that a user of such VPN software becomes unable to</linesub>
<linesub end="160719" start="160580">access their local network printer sitting on their desk right next</linesub>
<linesub end="160739" start="160653">to their computer.</linesub>
</clause>
<clause id="sAppA_p9_c4" num="4">
<linesub end="160784" start="160673">Using a different UDP port helps avoid this</linesub>
<linesub end="160765" start="160722">particular problem.</linesub>
</clause>
</paragraph>

<paragraph id="sAppA_p10" num="10">
<clause id="sAppA_p10_c1" num="1">
<linesub end="161036" start="160901">* On many operating systems, unprivileged software may not send or</linesub>
<linesub end="161075" start="160973">receive packets on low-numbered ports.</linesub>
</clause>
<clause id="sAppA_p10_c2" num="2">
<linesub end="161096" start="161013">This means that any</linesub>
<linesub end="161167" start="161038">software sending or receiving Multicast DNS packets on port 53</linesub>
<linesub end="161245" start="161106">would have to run as "root", which is an undesirable security risk.</linesub>
</clause>
<clause id="sAppA_p10_c3" num="3">
<linesub end="161298" start="161179">Using a higher-numbered UDP port avoids this restriction.</linesub>
</clause>
</paragraph>

</section>

<section id="sAppB" name="Design Rationale for Not Using Hashed Multicast Addresses" num="AppB">
<paragraph id="sAppB_p1" num="1">
<clause id="sAppB_p1_c1" num="1">
<linesub end="161444" start="161313">Some discovery protocols use a range of multicast addresses, and</linesub>
<linesub end="161522" start="161381">determine the address to be used by a hash function of the name being</linesub>
<linesub end="161531" start="161454">sought.</linesub>
</clause>
<clause id="sAppB_p1_c2" num="2">
<linesub end="161591" start="161463">Queries are sent via multicast to the address as indicated</linesub>
<linesub end="161662" start="161525">by the hash function, and responses are returned to the querier via</linesub>
<linesub end="161668" start="161596">unicast.</linesub>
</clause>
<clause id="sAppB_p1_c3" num="3">
<linesub end="161721" start="161606">Particularly in IPv6, where multicast addresses are</linesub>
<linesub end="161787" start="161661">extremely plentiful, this approach is frequently advocated.</linesub>
</clause>
<clause id="sAppB_p1_c4" num="4">
<linesub end="161792" start="161722">For</linesub>
<linesub end="161846" start="161729">example, IPv6 Neighbor Discovery [RFC4861] sends Neighbor</linesub>
<linesub end="161921" start="161790">Solicitation messages to the "solicited-node multicast address",</linesub>
<linesub end="161985" start="161858">which is computed as a function of the solicited IPv6 address.</linesub>
</clause>
</paragraph>

<paragraph id="sAppB_p2" num="2">
<clause id="sAppB_p2_c1" num="1">
<linesub end="162066" start="161925">There are some disadvantages to using hashed multicast addresses like</linesub>
<linesub end="162075" start="161998">this in a service discovery protocol:</linesub>
</clause>
</paragraph>

<paragraph id="sAppB_p3" num="3">
<clause id="sAppB_p3_c1" num="1">
<linesub end="162181" start="162040">* When a host has a large number of records with different names, the</linesub>
<linesub end="162240" start="162115">host may have to join a large number of multicast groups.</linesub>
</clause>
<clause id="sAppB_p3_c2" num="2">
<linesub end="162246" start="162174">Each</linesub>
<linesub end="162313" start="162184">time a host joins or leaves a multicast group, this results in</linesub>
<linesub end="162383" start="162252">Internet Group Management Protocol (IGMP) or Multicast Listener</linesub>
<linesub end="162446" start="162321">Discovery (MLD) traffic on the network announcing this fact.</linesub>
</clause>
<clause id="sAppB_p3_c3" num="3">
<linesub end="162522" start="162387">Joining a large number of multicast groups can place undue burden</linesub>
<linesub end="162597" start="162458">on the Ethernet hardware, which typically supports a limited number</linesub>
<linesub end="162637" start="162531">of multicast addresses efficiently.</linesub>
</clause>
<clause id="sAppB_p3_c4" num="4">
<linesub end="162668" start="162568">When this number is exceeded,</linesub>
<linesub end="162722" start="162603">the Ethernet hardware may have to resort to receiving all</linesub>
<linesub end="162795" start="162666">multicasts and passing them up to the host networking code for</linesub>
<linesub end="162873" start="162734">filtering in software, thereby defeating much of the point of using</linesub>
<linesub end="162922" start="162807">a multicast address range in the first place.</linesub>
</clause>
<clause id="sAppB_p3_c5" num="5">
<linesub end="162942" start="162854">Finally, many IPv6</linesub>
<linesub end="163017" start="162878">stacks have a fixed limit IPV6_MAX_MEMBERSHIPS, and the code simply</linesub>
<linesub end="163080" start="162951">fails with an error if a client attempts to exceed this limit.</linesub>
</clause>
<clause id="sAppB_p3_c6" num="6">
<linesub end="163128" start="163019">Common values for IPV6_MAX_MEMBERSHIPS are 20 or 31.</linesub>
</clause>
</paragraph>

<paragraph id="sAppB_p4" num="4">
<clause id="sAppB_p4_c1" num="1">
<linesub end="163217" start="163076">* Multiple questions cannot be placed in one packet if they don't all</linesub>
<linesub end="163226" start="163151">hash to the same multicast address.</linesub>
</clause>
</paragraph>

<paragraph id="sAppB_p5" num="5">
<clause id="sAppB_p5_c1" num="1">
<linesub end="163324" start="163191">* Duplicate Question Suppression doesn't work if queriers are not</linesub>
<linesub end="163323" start="163262">seeing each other's queries.</linesub>
</clause>
</paragraph>

<paragraph id="sAppB_p6" num="6">
<clause id="sAppB_p6_c1" num="1">
<linesub end="163428" start="163295">* Duplicate Answer Suppression doesn't work if responders are not</linesub>
<linesub end="163431" start="163366">seeing each other's responses.</linesub>
</clause>
</paragraph>

<paragraph id="sAppB_p7" num="7">
<clause id="sAppB_p7_c1" num="1">
<linesub end="163478" start="163401">* Opportunistic Caching doesn't work.</linesub>
</clause>
</paragraph>

<paragraph id="sAppB_p8" num="8">
<clause id="sAppB_p8_c1" num="1">
<linesub end="163683" start="163596">* Ongoing Conflict Detection doesn't work.</linesub>
</clause>
</paragraph>

</section>

<section id="sAppC" name="Design Rationale for Maximum Multicast DNS Name Length" num="AppC">
<paragraph id="sAppC_p1" num="1">
<clause id="sAppC_p1_c1" num="1">
<linesub end="163849" start="163712">Multicast DNS names may be up to 255 bytes long (in the on-the-wire</linesub>
<linesub end="163920" start="163783">message format), not counting the terminating zero byte at the end.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p2" num="2">
<clause id="sAppC_p2_c1" num="1">
<linesub end="163988" start="163855">"Domain Names - Implementation and Specification" [RFC1035] says:</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p3" num="3">
<clause id="sAppC_p3_c1" num="1">
<linesub end="164058" start="163928">Various objects and parameters in the DNS have size limits.</linesub>
</clause>
<clause id="sAppC_p3_c2" num="2">
<linesub end="164064" start="163989">They</linesub>
<linesub end="164087" start="164000">are listed below.</linesub>
</clause>
<clause id="sAppC_p3_c3" num="3">
<linesub end="164134" start="164019">Some could be easily changed, others are more</linesub>
<linesub end="164101" start="164071">fundamental.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p4" num="4">
<clause id="sAppC_p4_c1" num="1">
<linesub end="164163" start="164091">labels          63 octets or less</linesub>
<linesub end="164206" start="164132">names           255 octets or less</linesub>
<linesub end="164186" start="164174">...</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p5" num="5">
<clause id="sAppC_p5_c1" num="1">
<linesub end="164317" start="164185">the total length of a domain name (i.e., label octets and label</linesub>
<linesub end="164363" start="164255">length octets) is restricted to 255 octets or less.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p6" num="6">
<clause id="sAppC_p6_c1" num="1">
<linesub end="164444" start="164311">This text does not state whether this 255-byte limit includes the</linesub>
<linesub end="164467" start="164380">terminating zero at the end of every name.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p7" num="7">
<clause id="sAppC_p7_c1" num="1">
<linesub end="164558" start="164427">Several factors lead us to conclude that the 255-byte limit does</linesub>
<linesub end="164568" start="164495">*not* include the terminating zero:</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p8" num="8">
<clause id="sAppC_p8_c1" num="1">
<linesub end="164676" start="164535">o It is common in software engineering to have size limits that are a</linesub>
<linesub end="164744" start="164610">power of two, or a multiple of a power of two, for efficiency.</linesub>
</clause>
<clause id="sAppC_p8_c2" num="2">
<linesub end="164749" start="164674">For</linesub>
<linesub end="164818" start="164683">example, an integer on a modern processor is typically 2, 4, or 8</linesub>
<linesub end="164850" start="164754">bytes, not 3 or 5 bytes.</linesub>
</clause>
<clause id="sAppC_p8_c3" num="3">
<linesub end="164893" start="164780">The number 255 is not a power of two, nor</linesub>
<linesub end="164947" start="164827">is it to most people a particularly noteworthy number.</linesub>
</clause>
<clause id="sAppC_p8_c4" num="4">
<linesub end="164954" start="164883">It is</linesub>
<linesub end="165033" start="164894">noteworthy to computer scientists for only one reason -- because it</linesub>
<linesub end="165078" start="164967">is exactly one *less* than a power of two.</linesub>
</clause>
<clause id="sAppC_p8_c5" num="5">
<linesub end="165100" start="165011">When a size limit is</linesub>
<linesub end="165172" start="165037">exactly one less than a power of two, that suggests strongly that</linesub>
<linesub end="165247" start="165108">the one extra byte is being reserved for some specific reason -- in</linesub>
<linesub end="165316" start="165181">this case reserved, perhaps, to leave room for a terminating zero</linesub>
<linesub end="165279" start="165252">at the end.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p9" num="9">
<clause id="sAppC_p9_c1" num="1">
<linesub end="165405" start="165268">o In the case of DNS label lengths, the stated limit is 63 bytes.</linesub>
</clause>
<clause id="sAppC_p9_c2" num="2">
<linesub end="165409" start="165335">As</linesub>
<linesub end="165478" start="165343">with the total name length, this limit is exactly one less than a</linesub>
<linesub end="165494" start="165414">power of two.</linesub>
</clause>
<clause id="sAppC_p9_c3" num="3">
<linesub end="165543" start="165429">This label length limit also excludes the label</linesub>
<linesub end="165589" start="165482">length byte at the start of every label.</linesub>
</clause>
<clause id="sAppC_p9_c4" num="4">
<linesub end="165611" start="165524">Including that extra</linesub>
<linesub end="165689" start="165550">byte, a 63-byte label takes 64 bytes of space in memory or in a DNS</linesub>
<linesub end="165644" start="165623">message.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p10" num="10">
<clause id="sAppC_p10_c1" num="1">
<linesub end="165927" start="165790">o It is common in software engineering for the semantic "length" of</linesub>
<linesub end="166002" start="165863">an object to be one less than the number of bytes it takes to store</linesub>
<linesub end="166009" start="165936">that object.</linesub>
</clause>
<clause id="sAppC_p10_c2" num="2">
<linesub end="166053" start="165950">For example, in C, strlen("foo") is 3, but</linesub>
<linesub end="166137" start="165998">sizeof("foo") (which includes the terminating zero byte at the end)</linesub>
<linesub end="166086" start="166071">is 4.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p11" num="11">
<clause id="sAppC_p11_c1" num="1">
<linesub end="166212" start="166081">o The text describing the total length of a domain name mentions</linesub>
<linesub end="166290" start="166151">explicitly that label length and data octets are included, but does</linesub>
<linesub end="166339" start="166224">not mention the terminating zero at the end.</linesub>
</clause>
<clause id="sAppC_p11_c2" num="2">
<linesub end="166361" start="166270">The zero byte at the</linesub>
<linesub end="166411" start="166296">end of a domain name is not a label length.</linesub>
</clause>
<clause id="sAppC_p11_c3" num="3">
<linesub end="166435" start="166341">Indeed, the value zero</linesub>
<linesub end="166504" start="166369">is chosen as the terminating marker precisely because it is not a</linesub>
<linesub end="166558" start="166440">legal length byte value -- DNS prohibits empty labels.</linesub>
</clause>
<clause id="sAppC_p11_c4" num="4">
<linesub end="166563" start="166496">For</linesub>
<linesub end="166630" start="166505">example, a name like "bad..name." is not a valid domain name</linesub>
<linesub end="166710" start="166571">because it contains a zero-length label in the middle, which cannot</linesub>
<linesub end="166783" start="166644">be expressed in a DNS message, because software parsing the message</linesub>
<linesub end="166856" start="166717">would misinterpret a zero label-length byte as being a zero "end of</linesub>
<linesub end="166837" start="166790">name" marker instead.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p12" num="12">
<clause id="sAppC_p12_c1" num="1">
<linesub end="166953" start="166816">Finally, "Clarifications to the DNS Specification" [RFC2181] offers</linesub>
<linesub end="167024" start="166887">additional confirmation that, in the context of DNS specifications,</linesub>
<linesub end="167099" start="166958">the stated "length" of a domain name does not include the terminating</linesub>
<linesub end="167122" start="167031">zero byte at the end.</linesub>
</clause>
<clause id="sAppC_p12_c2" num="2">
<linesub end="167168" start="167054">That document refers to the root name, which</linesub>
<linesub end="167241" start="167102">is typically written as "." and is represented in a DNS message by a</linesub>
<linesub end="167309" start="167174">single lone zero byte (i.e., zero bytes of data plus a terminating</linesub>
<linesub end="167323" start="167244">zero), as the "zero length full name":</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p13" num="13">
<clause id="sAppC_p13_c1" num="1">
<linesub end="167424" start="167290">The zero length full name is defined as representing the root of</linesub>
<linesub end="167487" start="167361">the DNS tree, and is typically written and displayed as ".".</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p14" num="14">
<clause id="sAppC_p14_c1" num="1">
<linesub end="167567" start="167426">This wording supports the interpretation that, in a DNS context, when</linesub>
<linesub end="167638" start="167499">talking about lengths of names, the terminating zero byte at the end</linesub>
<linesub end="167653" start="167571">is not counted.</linesub>
</clause>
<clause id="sAppC_p14_c2" num="2">
<linesub end="167702" start="167588">If the root name (".") is considered to be zero</linesub>
<linesub end="167778" start="167639">length, then to be consistent, the length (for example) of "org" has</linesub>
<linesub end="167844" start="167711">to be 4 and the length of "ietf.org" has to be 9, as shown below:</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p15" num="15">
<clause id="sAppC_p15_c1" num="1">
<linesub end="167890" start="167828">------</linesub>
<linesub end="167975" start="167884">| 0x00 |   length = 0</linesub>
<linesub end="168018" start="167956">------</linesub>
<linesub end="168076" start="167993">------------------   ------</linesub>
<linesub end="168161" start="168049">| 0x03 | o | r | g | | 0x00 |   length = 4</linesub>
<linesub end="168204" start="168121">------------------   ------</linesub>
<linesub end="168262" start="168156">-----------------------------------------   ------</linesub>
<linesub end="168347" start="168212">| 0x04 | i | e | t | f | 0x03 | o | r | g | | 0x00 |   length = 9</linesub>
<linesub end="168390" start="168284">-----------------------------------------   ------</linesub>
<linesub end="168630" start="168493">This means that the maximum length of a domain name, as represented</linesub>
<linesub end="168689" start="168564">in a Multicast DNS message, up to but not including the final</linesub>
<linesub end="168720" start="168629">terminating zero, must not exceed 255 bytes.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p16" num="16">
<clause id="sAppC_p16_c1" num="1">
<linesub end="168799" start="168678">However, many Unicast DNS implementers have read these RFCs</linesub>
<linesub end="168870" start="168741">differently, and argue that the 255-byte limit does include the</linesub>
<linesub end="168925" start="168808">terminating zero, and that the "Clarifications to the DNS</linesub>
<linesub end="169008" start="168869">Specification" [RFC2181] statement that "." is the "zero length full</linesub>
<linesub end="168998" start="168941">name" was simply a mistake.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p17" num="17">
<clause id="sAppC_p17_c1" num="1">
<linesub end="169092" start="168973">Hence, implementers should be aware that other Unicast DNS</linesub>
<linesub end="169176" start="169035">implementations may limit the maximum domain name to 254 bytes plus a</linesub>
<linesub end="169245" start="169108">terminating zero, depending on how that implementer interpreted the</linesub>
<linesub end="169220" start="169179">DNS specifications.</linesub>
</clause>
</paragraph>

<paragraph id="sAppC_p18" importance="must" num="18">
<clause id="sAppC_p18_c1" importance="must" num="1">
<linesub end="169342" start="169203">Compliant Multicast DNS implementations MUST support names up to 255</linesub>
<linesub end="169384" start="169275">bytes plus a terminating zero, i.e., 256 bytes total.</linesub>
</clause>
</paragraph>

</section>

<section id="sAppD" name="Benefits of Multicast Responses" num="AppD">
<paragraph id="sAppD_p1" num="1">
<clause id="sAppD_p1_c1" num="1">
<linesub end="169508" start="169379">Some people have argued that sending responses via multicast is</linesub>
<linesub end="169543" start="169446">inefficient on the network.</linesub>
</clause>
<clause id="sAppD_p1_c2" num="2">
<linesub end="169583" start="169475">In fact, using multicast responses can</linesub>
<linesub end="169654" start="169517">result in a net lowering of overall multicast traffic for a variety</linesub>
<linesub end="169679" start="169588">of reasons, and provides other benefits too:</linesub>
</clause>
</paragraph>

<paragraph id="sAppD_p2" num="2">
<clause id="sAppD_p2_c1" num="1">
<linesub end="169727" start="169637">* Opportunistic Caching.</linesub>
</clause>
<clause id="sAppD_p2_c2" num="2">
<linesub end="169766" start="169663">One multicast response can update the</linesub>
<linesub end="169813" start="169706">caches on all machines on the network.</linesub>
</clause>
<clause id="sAppD_p2_c3" num="3">
<linesub end="169839" start="169746">If another machine later</linesub>
<linesub end="169915" start="169776">wants to issue the same query, and it already has the answer in its</linesub>
<linesub end="169988" start="169849">cache, it may not need to even transmit that multicast query on the</linesub>
<linesub end="169957" start="169922">network at all.</linesub>
</clause>
</paragraph>

<paragraph id="sAppD_p3" num="3">
<clause id="sAppD_p3_c1" num="1">
<linesub end="170041" start="169942">* Duplicate Query Suppression.</linesub>
</clause>
<clause id="sAppD_p3_c2" num="2">
<linesub end="170077" start="169974">When more than one machine has the</linesub>
<linesub end="170151" start="170014">same ongoing long-lived query running, every machine does not have</linesub>
<linesub end="170195" start="170086">to transmit its own independent query.</linesub>
</clause>
<clause id="sAppD_p3_c3" num="3">
<linesub end="170223" start="170126">When one machine transmits</linesub>
<linesub end="170295" start="170158">a query, all the other hosts see the answers, so they can suppress</linesub>
<linesub end="170271" start="170230">their own queries.</linesub>
</clause>
</paragraph>

<paragraph id="sAppD_p4" num="4">
<clause id="sAppD_p4_c1" num="1">
<linesub end="170358" start="170253">* Passive Observation Of Failures (POOF).</linesub>
</clause>
<clause id="sAppD_p4_c2" num="2">
<linesub end="170378" start="170296">When a host sees a</linesub>
<linesub end="170447" start="170320">multicast query, but does not see the corresponding multicast</linesub>
<linesub end="170526" start="170387">response, it can use this information to promptly delete stale data</linesub>
<linesub end="170540" start="170460">from its cache.</linesub>
</clause>
<clause id="sAppD_p4_c3" num="3">
<linesub end="170585" start="170477">To achieve the same level of user-interface</linesub>
<linesub end="170651" start="170526">quality and responsiveness without multicast responses would</linesub>
<linesub end="170725" start="170592">require lower cache lifetimes and more frequent network polling,</linesub>
<linesub end="170735" start="170662">resulting in a higher packet rate.</linesub>
</clause>
</paragraph>

<paragraph id="sAppD_p5" num="5">
<clause id="sAppD_p5_c1" num="1">
<linesub end="170792" start="170701">* Passive Conflict Detection.</linesub>
</clause>
<clause id="sAppD_p5_c2" num="2">
<linesub end="170822" start="170732">Just because a name has been</linesub>
<linesub end="170889" start="170766">previously verified to be unique does not guarantee it will</linesub>
<linesub end="170929" start="170831">continue to be so indefinitely.</linesub>
</clause>
<clause id="sAppD_p5_c3" num="3">
<linesub end="170960" start="170864">By allowing all Multicast DNS</linesub>
<linesub end="171189" start="171052">responders to constantly monitor their peers' responses, conflicts</linesub>
<linesub end="171257" start="171124">arising out of network topology changes can be promptly detected</linesub>
<linesub end="171279" start="171194">and resolved.</linesub>
</clause>
<clause id="sAppD_p5_c4" num="4">
<linesub end="171333" start="171209">If responses were not sent via multicast, some other</linesub>
<linesub end="171396" start="171267">conflict detection mechanism would be needed, imposing its own</linesub>
<linesub end="171406" start="171335">additional burden on the network.</linesub>
</clause>
</paragraph>

<paragraph id="sAppD_p6" num="6">
<clause id="sAppD_p6_c1" num="1">
<linesub end="171500" start="171373">* Use on devices with constrained memory resources: When using</linesub>
<linesub end="171578" start="171441">delayed responses to reduce network collisions, responders need to</linesub>
<linesub end="171645" start="171513">maintain a list recording to whom each answer should be sent.</linesub>
</clause>
<clause id="sAppD_p6_c2" num="2">
<linesub end="171650" start="171576">The</linesub>
<linesub end="171710" start="171585">option of multicast responses allows responders with limited</linesub>
<linesub end="171784" start="171651">storage, which cannot store an arbitrarily long list of response</linesub>
<linesub end="171860" start="171721">addresses, to choose to fail-over to a single multicast response in</linesub>
<linesub end="171907" start="171794">place of multiple unicast responses, when appropriate.</linesub>
</clause>
</paragraph>

<paragraph id="sAppD_p7" num="7">
<clause id="sAppD_p7_c1" num="1">
<linesub end="171941" start="171853">* Overlayed Subnets.</linesub>
</clause>
<clause id="sAppD_p7_c2" num="2">
<linesub end="171986" start="171875">In the case of overlayed subnets, multicast</linesub>
<linesub end="172059" start="171924">responses allow a receiver to know with certainty that a response</linesub>
<linesub end="172124" start="171995">originated on the local link, even when its source address may</linesub>
<linesub end="172126" start="172063">apparently suggest otherwise.</linesub>
</clause>
</paragraph>

<paragraph id="sAppD_p8" num="8">
<clause id="sAppD_p8_c1" num="1">
<linesub end="172232" start="172097">* Robustness in the face of misconfiguration: Link-local multicast</linesub>
<linesub end="172302" start="172169">transcends virtually every conceivable network misconfiguration.</linesub>
</clause>
<clause id="sAppD_p8_c2" num="2">
<linesub end="172372" start="172239">Even if you have a collection of devices where every device's IP</linesub>
<linesub end="172444" start="172309">address, subnet mask, default gateway, and DNS server address are</linesub>
<linesub end="172509" start="172380">all wrong, packets sent by any of those devices addressed to a</linesub>
<linesub end="172587" start="172448">link-local multicast destination address will still be delivered to</linesub>
<linesub end="172618" start="172521">all peers on the local link.</linesub>
</clause>
<clause id="sAppD_p8_c3" num="3">
<linesub end="172654" start="172551">This can be extremely helpful when</linesub>
<linesub end="172728" start="172591">diagnosing and rectifying network problems, since it facilitates a</linesub>
<linesub end="172798" start="172663">direct communication channel between client and server that works</linesub>
<linesub end="172850" start="172734">without reliance on ARP, IP routing tables, etc.</linesub>
</clause>
<clause id="sAppD_p8_c4" num="4">
<linesub end="172865" start="172784">Being able to</linesub>
<linesub end="172926" start="172803">discover what IP address a device has (or thinks it has) is</linesub>
<linesub end="172995" start="172868">frequently a very valuable first step in diagnosing why it is</linesub>
<linesub end="173026" start="172935">unable to communicate on the local network.</linesub>
</clause>
</paragraph>

</section>

<section id="sAppE" name="Design Rationale for Encoding Negative Responses" num="AppE">
<paragraph id="sAppE_p1" num="1">
<clause id="sAppE_p1_c1" num="1">
<linesub end="173183" start="173046">Alternative methods of asserting nonexistence were considered, such</linesub>
<linesub end="173250" start="173117">as using an NXDOMAIN response, or emitting a resource record with</linesub>
<linesub end="173225" start="173186">zero-length rdata.</linesub>
</clause>
</paragraph>

<paragraph id="sAppE_p2" num="2">
<clause id="sAppE_p2_c1" num="1">
<linesub end="173345" start="173209">Using an NXDOMAIN response does not work well with Multicast DNS.</linesub>
</clause>
<clause id="sAppE_p2_c2" num="2">
<linesub end="173348" start="173276">A</linesub>
<linesub end="173420" start="173281">Unicast DNS NXDOMAIN response applies to the entire message, but for</linesub>
<linesub end="173490" start="173353">efficiency Multicast DNS allows (and encourages) multiple responses</linesub>
<linesub end="173515" start="173424">in a single message.</linesub>
</clause>
<clause id="sAppE_p2_c3" num="3">
<linesub end="173563" start="173446">If the error code in the header were NXDOMAIN,</linesub>
<linesub end="173625" start="173496">it would not be clear to which name(s) that error code applied.</linesub>
</clause>
</paragraph>

<paragraph id="sAppE_p3" num="3">
<clause id="sAppE_p3_c1" num="1">
<linesub end="173705" start="173564">Asserting nonexistence by emitting a resource record with zero-length</linesub>
<linesub end="173776" start="173637">rdata would mean that there would be no way to differentiate between</linesub>
<linesub end="173850" start="173709">a record that doesn't exist, and a record that does exist, with zero-</linesub>
<linesub end="174020" start="173935">length rdata.</linesub>
</clause>
<clause id="sAppE_p3_c2" num="2">
<linesub end="174076" start="173950">By analogy, most file systems today allow empty files,</linesub>
<linesub end="174137" start="174008">so a file that exists with zero bytes of data is not considered</linesub>
<linesub end="174168" start="174075">equivalent to a filename that does not exist.</linesub>
</clause>
</paragraph>

<paragraph id="sAppE_p4" num="4">
<clause id="sAppE_p4_c1" num="1">
<linesub end="174262" start="174125">A benefit of asserting nonexistence through NSEC records instead of</linesub>
<linesub end="174333" start="174196">through NXDOMAIN responses is that NSEC records can be added to the</linesub>
<linesub end="174406" start="174267">Additional Section of a DNS response to offer additional information</linesub>
<linesub end="174449" start="174339">beyond what the querier explicitly requested.</linesub>
</clause>
<clause id="sAppE_p4_c2" num="2">
<linesub end="174466" start="174386">For example, in</linesub>
<linesub end="174536" start="174405">response to an SRV query, a responder should include A record(s)</linesub>
<linesub end="174604" start="174473">giving its IPv4 addresses in the Additional Section, and an NSEC</linesub>
<linesub end="174682" start="174541">record indicating which other types it does or does not have for this</linesub>
<linesub end="174688" start="174614">name.</linesub>
</clause>
<clause id="sAppE_p4_c3" num="3">
<linesub end="174749" start="174621">If the responder is running on a host that does not support</linesub>
<linesub end="174823" start="174684">IPv6 (or does support IPv6 but currently has no IPv6 address on that</linesub>
<linesub end="174885" start="174756">interface) then this NSEC record in the Additional Section will</linesub>
<linesub end="174931" start="174823">indicate this absence of AAAA records.</linesub>
</clause>
<clause id="sAppE_p4_c4" num="4">
<linesub end="174960" start="174863">In effect, the responder is</linesub>
<linesub end="175029" start="174894">saying, "Here's my SRV record, and here are my IPv4 addresses, and</linesub>
<linesub end="175089" start="174964">no, I don't have any IPv6 addresses, so don't waste your time</linesub>
<linesub end="175104" start="175029">asking".</linesub>
</clause>
<clause id="sAppE_p4_c5" num="5">
<linesub end="175160" start="175039">Without this information in the Additional Section, it</linesub>
<linesub end="175222" start="175097">would take the querier an additional round-trip to perform an</linesub>
<linesub end="175289" start="175162">additional query to ascertain that the target host has no AAAA</linesub>
<linesub end="175307" start="175228">records.</linesub>
</clause>
<clause id="sAppE_p4_c6" num="6">
<linesub end="175367" start="175238">(Arguably Unicast DNS could also benefit from this ability</linesub>
<linesub end="175427" start="175300">to express nonexistence in the Additional Section, but that is</linesub>
<linesub end="175441" start="175366">outside the scope of this document.)</linesub>
</clause>
</paragraph>

</section>

<section id="sAppF" name="Use of UTF-8" num="AppF">
<paragraph id="sAppF_p1" num="1">
<clause id="sAppF_p1_c1" num="1">
<linesub end="175565" start="175434">After many years of debate, as a result of the perceived need to</linesub>
<linesub end="175633" start="175502">accommodate certain DNS implementations that apparently couldn't</linesub>
<linesub end="175699" start="175570">handle any character that's not a letter, digit, or hyphen (and</linesub>
<linesub end="175770" start="175637">apparently never would be updated to remedy this limitation), the</linesub>
<linesub end="175847" start="175706">Unicast DNS community settled on an extremely baroque encoding called</linesub>
<linesub end="175869" start="175779">"Punycode" [RFC3492].</linesub>
</clause>
<clause id="sAppF_p1_c2" num="2">
<linesub end="175914" start="175802">Punycode is a remarkably ingenious encoding</linesub>
<linesub end="175980" start="175849">solution, but it is complicated, hard to understand, and hard to</linesub>
<linesub end="176056" start="175917">implement, using sophisticated techniques including insertion unsort</linesub>
<linesub end="176124" start="175989">coding, generalized variable-length integers, and bias adaptation.</linesub>
</clause>
<clause id="sAppF_p1_c3" num="3">
<linesub end="176196" start="176059">The resulting encoding is remarkably compact given the constraints,</linesub>
<linesub end="176269" start="176130">but it's still not as good as simple straightforward UTF-8, and it's</linesub>
<linesub end="176337" start="176202">hard even to predict whether a given input string will encode to a</linesub>
<linesub end="176401" start="176272">Punycode string that fits within DNS's 63-byte limit, except by</linesub>
<linesub end="176463" start="176339">simply trying the encoding and seeing whether it fits.</linesub>
</clause>
<clause id="sAppF_p1_c4" num="4">
<linesub end="176476" start="176395">Indeed, the</linesub>
<linesub end="176543" start="176410">encoded size depends not only on the input characters, but on the</linesub>
<linesub end="176608" start="176479">order they appear, so the same set of characters may or may not</linesub>
<linesub end="176677" start="176546">encode to a legal Punycode string that fits within DNS's 63-byte</linesub>
<linesub end="176730" start="176614">limit, depending on the order the characters appear.</linesub>
</clause>
<clause id="sAppF_p1_c5" num="5">
<linesub end="176739" start="176668">This is</linesub>
<linesub end="176818" start="176679">extremely hard to present in a user interface that explains to users</linesub>
<linesub end="176888" start="176751">why one name is allowed, but another name containing the exact same</linesub>
<linesub end="176908" start="176822">characters is not.</linesub>
</clause>
<clause id="sAppF_p1_c6" num="6">
<linesub end="176955" start="176842">Neither Punycode nor any other of the "ASCII-</linesub>
<linesub end="177030" start="176891">Compatible Encodings" [RFC5890] proposed for Unicast DNS may be used</linesub>
<linesub end="177213" start="177116">in Multicast DNS messages.</linesub>
</clause>
<clause id="sAppF_p1_c7" num="7">
<linesub end="177255" start="177144">Any text being represented internally in</linesub>
<linesub end="177327" start="177188">some other representation must be converted to canonical precomposed</linesub>
<linesub end="177373" start="177260">UTF-8 before being placed in any Multicast DNS message.</linesub>
</clause>
</paragraph>

</section>

<section id="sAppG" name="Private DNS Namespaces" num="AppG">
<paragraph id="sAppG_p1" num="1">
<clause id="sAppG_p1_c1" num="1">
<linesub end="177478" start="177357">The special treatment of names ending in ".local." has been</linesub>
<linesub end="177555" start="177420">implemented in Macintosh computers since the days of Mac OS 9, and</linesub>
<linesub end="177597" start="177490">continues today in Mac OS X and iOS.</linesub>
</clause>
<clause id="sAppG_p1_c2" num="2">
<linesub end="177629" start="177528">There are also implementations</linesub>
<linesub end="177677" start="177562">for Microsoft Windows [B4W], Linux, and other platforms.</linesub>
</clause>
</paragraph>

<paragraph id="sAppG_p2" num="2">
<clause id="sAppG_p2_c1" num="1">
<linesub end="177744" start="177623">Some network operators setting up private internal networks</linesub>
<linesub end="177825" start="177686">("intranets") have used unregistered top-level domains, and some may</linesub>
<linesub end="177870" start="177758">have used the ".local" top-level domain.</linesub>
</clause>
<clause id="sAppG_p2_c2" num="2">
<linesub end="177899" start="177800">Using ".local" as a private</linesub>
<linesub end="177970" start="177831">top-level domain conflicts with Multicast DNS and may cause problems</linesub>
<linesub end="177980" start="177903">for users.</linesub>
</clause>
<clause id="sAppG_p2_c3" num="3">
<linesub end="178034" start="177915">Clients can be configured to send both Multicast and</linesub>
<linesub end="178110" start="177971">Unicast DNS queries in parallel for these names, and this does allow</linesub>
<linesub end="178172" start="178043">names to be looked up both ways, but this results in additional</linesub>
<linesub end="178249" start="178110">network traffic and additional delays in name resolution, as well as</linesub>
<linesub end="178321" start="178182">potentially creating user confusion when it is not clear whether any</linesub>
<linesub end="178395" start="178254">given result was received via link-local multicast from a peer on the</linesub>
<linesub end="178450" start="178327">same link, or from the configured unicast name server.</linesub>
</clause>
<clause id="sAppG_p2_c4" num="4">
<linesub end="178462" start="178383">Because of</linesub>
<linesub end="178532" start="178397">this, we recommend against using ".local" as a private Unicast DNS</linesub>
<linesub end="178555" start="178467">top-level domain.</linesub>
</clause>
<clause id="sAppG_p2_c5" num="5">
<linesub end="178606" start="178486">We do not recommend use of unregistered top-level</linesub>
<linesub end="178676" start="178539">domains at all, but should network operators decide to do this, the</linesub>
<linesub end="178737" start="178610">following top-level domains have been used on private internal</linesub>
<linesub end="178817" start="178676">networks without the problems caused by trying to reuse ".local." for</linesub>
<linesub end="178778" start="178749">this purpose:</linesub>
</clause>
</paragraph>

<paragraph id="sAppG_p3" num="3">
<clause id="sAppG_p3_c1" num="1">
<linesub end="178796" start="178770">.intranet.</linesub>
</clause>
<clause id="sAppG_p3_c2" num="2">
<linesub end="178813" start="178787">.internal.</linesub>
</clause>
<clause id="sAppG_p3_c3" num="3">
<linesub end="178828" start="178804">.private.</linesub>
</clause>
<clause id="sAppG_p3_c4" num="4">
<linesub end="178838" start="178820">.corp.</linesub>
</clause>
<clause id="sAppG_p3_c5" num="5">
<linesub end="178851" start="178833">.home.</linesub>
</clause>
<clause id="sAppG_p3_c6" num="6">
<linesub end="178862" start="178846">.lan.</linesub>
</clause>
</paragraph>

</section>

<section id="sAppH" name="Deployment History" num="AppH">
<paragraph id="sAppH_p1" num="1">
<clause id="sAppH_p1_c1" num="1">
<linesub end="179018" start="178889">In July 1997, in an email to the net-thinkers@thumper.vmeng.com</linesub>
<linesub end="179095" start="178956">mailing list, Stuart Cheshire first proposed the idea of running the</linesub>
<linesub end="179147" start="179028">AppleTalk Name Binding Protocol [RFC6760] over IP.</linesub>
</clause>
<clause id="sAppH_p1_c2" num="2">
<linesub end="179163" start="179080">As a result of</linesub>
<linesub end="179233" start="179098">this and related IETF discussions, the IETF Zeroconf working group</linesub>
<linesub end="179258" start="179168">was chartered September 1999.</linesub>
</clause>
<clause id="sAppH_p1_c3" num="3">
<linesub end="179287" start="179199">After various working group</linesub>
<linesub end="179365" start="179230">discussions and other informal IETF discussions, several Internet-</linesub>
<linesub end="179437" start="179300">Drafts were written that were loosely related to the general themes</linesub>
<linesub end="179500" start="179371">of DNS and multicast, but did not address the service discovery</linesub>
<linesub end="179469" start="179438">aspect of NBP.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p2" num="2">
<clause id="sAppH_p2_c1" num="1">
<linesub end="179741" start="179610">In April 2000, Stuart Cheshire registered IPv4 multicast address</linesub>
<linesub end="179805" start="179678">224.0.0.251 with IANA [MC4] and began writing code to test and</linesub>
<linesub end="179873" start="179744">develop the idea of performing NBP-like service discovery using</linesub>
<linesub end="179944" start="179811">Multicast DNS, which was documented in a group of three Internet-</linesub>
<linesub end="179897" start="179880">Drafts:</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p3" num="3">
<clause id="sAppH_p3_c1" num="1">
<linesub end="180031" start="179892">o "Requirements for a Protocol to Replace the AppleTalk Name Binding</linesub>
<linesub end="180101" start="179966">Protocol (NBP)" [RFC6760] is an overview explaining the AppleTalk</linesub>
<linesub end="180164" start="180037">Name Binding Protocol, because many in the IETF community had</linesub>
<linesub end="180241" start="180104">little first-hand experience using AppleTalk, and confusion in the</linesub>
<linesub end="180311" start="180176">IETF community about what AppleTalk NBP did was causing confusion</linesub>
<linesub end="180364" start="180247">about what would be required in an IP-based replacement.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p4" num="4">
<clause id="sAppH_p4_c1" num="1">
<linesub end="180449" start="180308">o "Discovering Named Instances of Abstract Services using DNS" [NIAS]</linesub>
<linesub end="180514" start="180383">proposed a way to perform NBP-like service discovery using DNS-</linesub>
<linesub end="180525" start="180452">compatible names and record types.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p5" num="5">
<clause id="sAppH_p5_c1" num="1">
<linesub end="180630" start="180491">o "Multicast DNS" (this document) specifies a way to transport those</linesub>
<linesub end="180702" start="180565">DNS-compatible queries and responses using IP multicast, for zero-</linesub>
<linesub end="180776" start="180637">configuration environments where no conventional Unicast DNS server</linesub>
<linesub end="180743" start="180710">was available.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p6" num="6">
<clause id="sAppH_p6_c1" num="1">
<linesub end="180862" start="180729">In 2001, an update to Mac OS 9 added resolver library support for</linesub>
<linesub end="180906" start="180798">host name lookup using Multicast DNS.</linesub>
</clause>
<clause id="sAppH_p6_c2" num="2">
<linesub end="180937" start="180837">If the user typed a name such</linesub>
<linesub end="181011" start="180870">as "MyPrinter.local." into any piece of networking software that used</linesub>
<linesub end="181080" start="180943">the standard Mac OS 9 name lookup APIs, then those name lookup APIs</linesub>
<linesub end="181145" start="181014">would recognize the name as a dot-local name and query for it by</linesub>
<linesub end="181217" start="181082">sending simple one-shot Multicast DNS queries to 224.0.0.251:5353.</linesub>
</clause>
<clause id="sAppH_p6_c3" num="3">
<linesub end="181261" start="181152">This enabled the user to, for example, enter the name</linesub>
<linesub end="181332" start="181209">"MyPrinter.local." into their web browser in order to view a</linesub>
<linesub end="181400" start="181273">printer's status and configuration web page, or enter the name</linesub>
<linesub end="181476" start="181339">"MyPrinter.local." into the printer setup utility to create a print</linesub>
<linesub end="181503" start="181410">queue for printing documents on that printer.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p7" num="7">
<clause id="sAppH_p7_c1" num="1">
<linesub end="181599" start="181460">Multicast DNS responder software, with full service discovery, first</linesub>
<linesub end="181665" start="181532">began shipping to end users in volume with the launch of Mac OS X</linesub>
<linesub end="181734" start="181601">10.2 "Jaguar" in August 2002, and network printer makers (who had</linesub>
<linesub end="181807" start="181670">historically supported AppleTalk in their network printers and were</linesub>
<linesub end="181872" start="181741">receptive to IP-based technologies that could offer them similar</linesub>
<linesub end="181938" start="181809">ease-of-use) started adopting Multicast DNS shortly thereafter.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p8" num="8">
<clause id="sAppH_p8_c1" num="1">
<linesub end="181994" start="181877">In September 2002, Apple released the source code for the</linesub>
<linesub end="182069" start="181938">mDNSResponder daemon as Open Source under Apple's standard Apple</linesub>
<linesub end="182067" start="182006">Public Source License (APSL).</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p9" num="9">
<clause id="sAppH_p9_c1" num="1">
<linesub end="182169" start="182040">Multicast DNS responder software became available for Microsoft</linesub>
<linesub end="182248" start="182107">Windows users in June 2004 with the launch of Apple's "Rendezvous for</linesub>
<linesub end="182311" start="182180">Windows" (now "Bonjour for Windows"), both in executable form (a</linesub>
<linesub end="182540" start="182401">downloadable installer for end users) and as Open Source (one of the</linesub>
<linesub end="182614" start="182473">supported platforms within Apple's body of cross-platform code in the</linesub>
<linesub end="182683" start="182546">publicly accessible mDNSResponder CVS source code repository) [BJ].</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p10" num="10">
<clause id="sAppH_p10_c1" num="1">
<linesub end="182753" start="182618">In August 2006, Apple re-licensed the cross-platform mDNSResponder</linesub>
<linesub end="182791" start="182688">source code under the Apache License, Version 2.0.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p11" num="11">
<clause id="sAppH_p11_c1" num="1">
<linesub end="182874" start="182743">In addition to desktop and laptop computers running Mac OS X and</linesub>
<linesub end="182948" start="182811">Microsoft Windows, Multicast DNS is now implemented in a wide range</linesub>
<linesub end="183005" start="182882">of hardware devices, such as Apple's "AirPort" wireless base</linesub>
<linesub end="183083" start="182946">stations, iPhone and iPad, and in home gateways from other vendors,</linesub>
<linesub end="183120" start="183017">network printers, network cameras, TiVo DVRs, etc.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p12" num="12">
<clause id="sAppH_p12_c1" num="1">
<linesub end="183185" start="183072">The Open Source community has produced many independent</linesub>
<linesub end="183246" start="183131">implementations of Multicast DNS, some in C like Apple's</linesub>
<linesub end="183330" start="183191">mDNSResponder daemon, and others in a variety of different languages</linesub>
<linesub end="183350" start="183263">including Java, Python, Perl, and C#/Mono.</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p13" num="13">
<clause id="sAppH_p13_c1" num="1">
<linesub end="183451" start="183310">In January 2007, the IETF published the Informational RFC "Link-Local</linesub>
<linesub end="183522" start="183383">Multicast Name Resolution (LLMNR)" [RFC4795], which is substantially</linesub>
<linesub end="183578" start="183455">similar to Multicast DNS, but incompatible in some small but</linesub>
<linesub end="183605" start="183519">important ways.</linesub>
</clause>
<clause id="sAppH_p13_c2" num="2">
<linesub end="183658" start="183536">In particular, the LLMNR design explicitly excluded</linesub>
<linesub end="183730" start="183591">support for service discovery, which made it an unsuitable candidate</linesub>
<linesub end="183766" start="183663">for a protocol to replace AppleTalk NBP [RFC6760].</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p14" num="14">
<clause id="sAppH_p14_c1" num="1">
<linesub end="183847" start="183718">While the original focus of Multicast DNS and DNS-Based Service</linesub>
<linesub end="183906" start="183785">Discovery was for zero-configuration environments without a</linesub>
<linesub end="183981" start="183848">conventional Unicast DNS server, DNS-Based Service Discovery also</linesub>
<linesub end="184058" start="183917">works using Unicast DNS servers, using DNS Update [RFC2136] [RFC3007]</linesub>
<linesub end="184131" start="183990">to create service discovery records and standard DNS queries to query</linesub>
<linesub end="184140" start="184063">for them.</linesub>
</clause>
<clause id="sAppH_p14_c2" num="2">
<linesub end="184196" start="184074">Apple's Back to My Mac service, launched with Mac OS X</linesub>
<linesub end="184273" start="184132">10.5 "Leopard" in October 2007, uses DNS-Based Service Discovery over</linesub>
<linesub end="184252" start="184205">Unicast DNS [RFC6281].</linesub>
</clause>
</paragraph>

<paragraph id="sAppH_p15" num="15">
<clause id="sAppH_p15_c1" num="1">
<linesub end="184371" start="184232">In June 2012, Google's Android operating system added native support</linesub>
<linesub end="184435" start="184304">for DNS-SD and Multicast DNS with the android.net.nsd.NsdManager</linesub>
<linesub end="184485" start="184372">class in Android 4.1 "Jelly Bean" (API Level 16) [NSD].</linesub>
</clause>
</paragraph>

</section>

<section name="Authors' Addresses">
<paragraph num="1">
<line end="184630" id="L3873" start="184612">   Stuart Cheshire</line>
<line end="184644" id="L3874" start="184631">   Apple Inc.</line>
<line end="184663" id="L3875" start="184645">   1 Infinite Loop</line>
<line end="184687" id="L3876" start="184664">   Cupertino, CA  95014</line>
<line end="184694" id="L3877" start="184688">   USA</line>
<line end="184721" id="L3879" start="184696">   Phone: +1 408 974 3207</line>
<line end="184750" id="L3880" start="184722">   EMail: cheshire@apple.com</line>
<line end="184769" id="L3883" start="184753">   Marc Krochmal</line>
<line end="184783" id="L3884" start="184770">   Apple Inc.</line>
<line end="184802" id="L3885" start="184784">   1 Infinite Loop</line>
<line end="184826" id="L3886" start="184803">   Cupertino, CA  95014</line>
<line end="184833" id="L3887" start="184827">   USA</line>
<line end="184860" id="L3889" start="184835">   Phone: +1 408 974 4368</line>
<line end="184885" id="L3890" start="184861">   EMail: marc@apple.com</line>
</paragraph>

</section>

</sections>
</rfc>
