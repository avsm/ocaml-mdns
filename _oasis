OASISFormat: 0.4
Name:        mdns
Version:     0.0.1
Synopsis:    Multicast DNS responder and resolver in OCaml
Authors:     Luke Dunstan
License:     ISC
Plugins:     META (0.3)
BuildTools:  ocamlbuild

Flag lwt
  Description: build the Lwt library
  Default: false

Flag mirage
  Description: build the Mirage library
  Default: false

Flag async
  Description: build the Async library
  Default: false

Flag todo
  Description: not yet implemented
  Default: false

Library mdns
  Path: lib
#  Build$: flag(todo)
#  Install$: flag(todo)
  Findlibname: mdns
  Pack: true
  Modules:
    Protocol
  BuildDepends:	cstruct (>= 0.7.1), cstruct.syntax, re, re.str, ipaddr (>= 2.2.0), base64, dns, bytes
  XMetaRequires: cstruct, re, re.str, ipaddr, base64, dns, bytes

Library "mdns-lwt-core"
  Path: lwt
  Build$: flag(lwt)
  Install$: flag(lwt)
  Findlibname: lwt-core
  Modules: Mdns_server
  BuildDepends: lwt, cstruct, lwt.syntax, mdns, mirage-profile
  XMetaRequires: lwt, cstruct, mdns, mirage-profile
  FindlibParent: mdns

#Library "mdns-lwt-unix"
#  Path: lwt
#  Build$: flag(lwt)
#  Install$: flag(lwt)
#  Findlibname: lwt-unix
#  Modules: Mdns_server_unix
#  BuildDepends: lwt.unix (>= 2.4.1), cstruct.lwt, lwt.syntax, mdns, mdns.lwt-core, ipaddr.unix
#  XMetaRequires: lwt.unix, cstruct.lwt, mdns, mdns.lwt-core, ipaddr.unix
#  FindlibParent: mdns

Library "mdns-mirage"
  Path: mirage
  Build$: flag(mirage)
  Install$: flag(mirage)
  Findlibname: mirage
  Modules: Mdns_resolver_mirage
  BuildDepends: cstruct, lwt.syntax, mdns, mdns.lwt-core, mirage-types, dns.mirage, dns.lwt-core
  XMetaRequires: cstruct, mdns, mdns.lwt-core, tcpip, mirage-types, dns.mirage, dns.lwt-core
  FindlibParent: mdns

#Library "mdns-async"
#  Path: async
#  Build$: flag(async) && flag(todo)
#  Install$: flag(async) && flag(todo)
#  Findlibname: async
#  Modules: Async_mdns_resolver, Async_mdns_resolver_unix
#  BuildDepends: async, ipaddr, mdns, core.syntax, threads
#  XMetaRequires: async, ipaddr, mdns, threads
#  FindlibParent: mdns

Executable "mdns_resolve"
  Path:             lib_test/unix
  MainIs:           mdns_resolve.ml
  Build$:           flag(tests) && flag(lwt)
  BuildDepends:     lwt, lwt.unix, lwt.syntax, dns, dns.lwt, ipaddr
  CompiledObject:   byte
  Custom:           true
  Install:          false

Executable test
  Path:               lib_test/ounit
  MainIs:             test.ml
  Build$:             flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt.unix (>= 2.4.1), mdns.lwt-core, unix, oUnit, pcap-format, mdns.mirage, io-page.unix

Test test
  Run$:               flag(tests)
  Command:            $test
  WorkingDirectory:   lib_test/ounit


